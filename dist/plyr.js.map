{"version":3,"sources":["src/js/types.js","src/js/support.js","src/js/fullscreen.js","src/js/defaults.js","src/js/utils.js","src/js/console.js","src/js/storage.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"names":["range","value","providers","types","defaults","window","navigator","language","split","utils","input","this","instanceof","Plyr","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","array","nodeList","length","object","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","callback","current","querySelector","callbacks","push","element","createElement","is","function","addEventListener","forEach","cb","call","event","src","first","getElementsByTagName","parentNode","insertBefore","id","hasId","querySelectorAll","container","toggleHidden","setAttribute","support","storage","cached","localStorage","getItem","data","JSON","parse","content","then","response","ok","text","setItem","stringify","catch","updateSprite","innerHTML","body","childNodes","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","index","child","cloneNode","parent","sibling","nextSibling","appendChild","type","attributes","setAttributes","textContent","target","removeChild","lastChild","newChild","oldChild","replaceChild","empty","key","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","charAt","class","toggle","contains","classList","removeAttribute","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","controls","getElement","config","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","debug","warn","toggleNativeControls","focused","activeElement","focusable","last","on","keyCode","_this","active","getFocusElement","shiftKey","focus","preventDefault","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","dispatchEvent","pressed","getAttribute","state","max","toFixed","sources","source","shift","extend","youtube","vimeo","match","RegExp","$2","number","parser","href","search","startsWith","parseUrl","slice","indexOf","reduce","params","hash","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","undefined","setTimeout","offsetHeight","provider","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","defineProperty","transitionEndEvent","matchMedia","noop","Console","enabled","console","log","bind","Storage","player","store","json","get","removeItem","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","toggleClass","toggleState","trapFocus","listeners","handleKey","code","which","repeat","altKey","ctrlKey","metaKey","editable","stopPropagation","togglePlay","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","loop","keyboard","global","tabFocus","hideControls","toggleControls","eventType","timeUpdate","durationUpdate","_this2","hasAudio","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","touch","paused","ended","disableContextMenu","set","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","_this3","defaultPrevented","toggleMenu","form","parseFloat","showTab","toggleInvert","invertTime","isWebkit","updateRangeFill","updateSeekTooltip","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","uiSupported","removeElement","inject","setup","ready","setTitle","label","i18n","title","isEmbed","iframe","frameTitle","playing","stopped","button","loading","timers","failed","networkState","setRange","nodeValue","buffered","getPercentage","_this4","end","setProgress","time","format","getHours","parseInt","hours","mins","secs","invert","updateTimeDisplay","seeking","hasDuration","displayDuration","setProperty","iconUrl","svg4everybody","namespace","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","hidden","badge","menu","buttonType","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","suffix","played","toLowerCase","list","checked","item","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","hasClass","setting","tab","tabs","pane","panes","filter","isYouTube","toggleTab","emptyElement","createMenuItem","getLabel","createBadge","getBadge","getLanguage","default","textTracks","getTracks","none","currentTrack","getCurrentTrack","track","disabled","hasTracks","tracks","toUpperCase","unshift","show","isMenuItem","isButton","open","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","back","setSpeedMenu","loadSprite","seekTime","create","findElements","repaint","labels","_this5","stored","setCaptionsMenu","insertAfter","setLanguage","setCue","mode","activeCues","isVimeo","embed","enableTextTrack","cue","setText","getCueAsHTML","caption","setAspectRatio","YT","Player","loadScript","urls","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","result","items","snippet","paddingBottom","currentId","parseYouTubeId","generateId","replaceElement","autoplay","location","hostname","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","setVolume","getVideoUrl","getAvailablePlaybackRates","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","Vimeo","padding","offset","transform","buildUrlParams","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","getAspectRatio","dimensions","setAutopause","autopause","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","blankVideo","insertElement","attribute","cancelRequests","destroy","html5","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","plyr","original","tagName","getProviderByUrl","getUrlParams","truthy","playsinline","hasAttribute","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","clearTimeout","soft","done","unload","mime","readyState","targetTime","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"uLAIA,IC2IcA,ECvINC,EFJKC,SACF,gBACE,gBACF,SAGEC,SACF,cACA,SGXLC,YAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,iDAGG,wDAIC,mBAEL,SACA,SACA,SACA,QACA,QACA,SACA,QACA,OACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACEC,OAAOC,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,qBAKD,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,6BAMD,uDAGA,uDAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,wCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,+BACC,kCACH,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,4BACE,qBACH,qBACI,oBACD,wBACA,wBACA,sBACF,wBACA,sBACE,uBACD,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,mBACD,qCAGG,gCACD,6CAGC,oCACC,4CAGC,6BACH,uCAGG,iCACH,iCAE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","file":"plyr.js","sourcesContent":["// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        [\n            'webkit',\n            'o',\n            'moz',\n            'ms',\n            'khtml',\n        ].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled: document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        return !prefix.length ? target.requestFullScreen() : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length ? document.cancelFullScreen() : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.isAudio || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.debug.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: [\n            'hd2160',\n            'hd1440',\n            'hd1080',\n            'hd720',\n            'large',\n            'medium',\n            'small',\n            'tiny',\n            'default',\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        error: 'plyr--has-error',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        plyr(input) {\n            return this.instanceof(input, Plyr);\n        },\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, window.WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, window.Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url, callback) {\n        const current = document.querySelector(`script[src=\"${url}\"]`);\n\n        // Check script is not already referenced, if so wait for load\n        if (current !== null) {\n            current.callbacks = current.callbacks || [];\n            current.callbacks.push(callback);\n            return;\n        }\n\n        // Build the element\n        const element = document.createElement('script');\n\n        // Callback queue\n        element.callbacks = element.callbacks || [];\n        element.callbacks.push(callback);\n\n        // Bind callback\n        if (utils.is.function(callback)) {\n            element.addEventListener(\n                'load',\n                event => {\n                    element.callbacks.forEach(cb => cb.call(null, event));\n                    element.callbacks = null;\n                },\n                false,\n            );\n        }\n\n        // Set the URL after binding callback\n        element.src = url;\n\n        // Inject\n        const first = document.getElementsByTagName('script')[0];\n        first.parentNode.insertBefore(element, first);\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            fetch(url)\n                .then(response => (response.ok ? response.text() : null))\n                .then(text => {\n                    if (text === null) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: text,\n                            }),\n                        );\n                    }\n\n                    updateSprite.call(container, text);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.element(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // Bail if not tab key or not fullscreen\n                if (event.key !== 'Tab' || event.keyCode !== 9 || !this.fullscreen.active) {\n                    return;\n                }\n\n                // Get the current focused element\n                const focused = utils.getFocusElement();\n\n                if (focused === last && !event.shiftKey) {\n                    // Move focus to first element that can be tabbed if Shift isn't used\n                    first.focus();\n                    event.preventDefault();\n                } else if (focused === first && event.shiftKey) {\n                    // Move focus to last element that can be tabbed if Shift is used\n                    last.focus();\n                    event.preventDefault();\n                }\n            },\n            false,\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (utils.is.nullOrUndefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{8,}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = this.parseUrl(input));\n        }\n\n        if (this.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        window.setTimeout(() => {\n            element.setAttribute('hidden', '');\n            element.offsetHeight; // eslint-disable-line\n            element.removeAttribute('hidden');\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        const test = '___test';\n\n        // Try to use it (it might be disabled, e.g. user is in private mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        const store = window.localStorage.getItem(this.key);\n\n        if (!Storage.supported || utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst listeners = {\n    // Global listeners\n    global() {\n        let last = null;\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const repeat = pressed && code === last;\n\n            // Bail if a modifier key is set\n            if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n                return;\n            }\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.element(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!repeat) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!repeat) {\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!repeat) {\n                            this.muted = !this.muted;\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!repeat) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 76:\n                        // L key\n                        this.loop = !this.loop;\n                        break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n\n            // Fullscreen toggle on double click\n            utils.on(this.elements.container, 'dblclick', event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.media, 'loadeddata', () => {\n            utils.toggleHidden(this.elements.volume, !this.hasAudio);\n            utils.toggleHidden(this.elements.buttons.mute, !this.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.isHTML5 && this.isVideo && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'playing play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'stalled waiting canplay seeked playing', event => ui.checkLoading.call(this, event));\n\n        // Check if media failed to load\n        // utils.on(this.media, 'play', event => ui.checkFailed.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && !this.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.paused) {\n                    return;\n                }\n\n                if (this.paused) {\n                    this.play();\n                } else if (this.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.supported.ui && this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save to storage\n            this.storage.set({ volume: this.volume, muted: this.muted });\n        });\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save to storage\n            this.storage.set({ speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save to storage\n            this.storage.set({ quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            this.storage.set({ language: this.language });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            this.storage.set({ captions: this.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.media.error;\n            }\n\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true, detail);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Play/pause toggle\n        utils.on(this.elements.buttons.play, 'click', event =>\n            proxy(event, 'play', () => {\n                this.togglePlay();\n            })\n        );\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute toggle\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = !this.muted;\n            })\n        );\n\n        // Captions toggle\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen toggle\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airplay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.language = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else {\n                controls.showTab.call(this, event);\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.config.toggleInvert && !utils.is.element(this.elements.display.duration)) {\n            utils.on(this.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.currentTime === 0) {\n                    return;\n                }\n\n                this.config.invertTime = !this.config.invertTime;\n                ui.timeUpdate.call(this);\n            });\n        }\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = [\n                    'mousedown',\n                    'touchstart',\n                ].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            utils.on(this.elements.controls, 'focusin focusout', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set aria state\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => utils.toggleState(button, this.playing));\n        }\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Check if media failed to load\n    checkFailed() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState\n        this.failed = this.media.networkState === 3;\n\n        if (this.failed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, false);\n            utils.toggleClass(this.elements.container, this.config.classNames.error, true);\n        }\n\n        // Clear timer\n        clearTimeout(this.timers.failed);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.element(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.element(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Helpers\n        const getHours = value => parseInt((value / 60 / 60) % 60, 10);\n        const getMinutes = value => parseInt((value / 60) % 60, 10);\n        const getSeconds = value => parseInt(value % 60, 10);\n\n        // Breakdown to hours, mins, secs\n        let hours = getHours(time);\n        const mins = getMinutes(time);\n        const secs = getSeconds(time);\n\n        // Do we need to display hours?\n        if (getHours(this.duration) > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport captions from './captions';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = this.config.i18n[type];\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = type;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = this.config.i18n[label];\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('div', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00'));\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            })\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.isYouTube;\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality =>\n            controls.createMenuItem.call(this, quality, list, type, controls.getLabel.call(this, 'quality', quality), getBadge(quality))\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.active ? this.captions.language : '';\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Update the label\n        if (!utils.is.empty(value)) {\n            const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n            label.innerHTML = controls.getLabel.call(this, setting, value);\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            // Check it\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || !captions.getTracks.call(this).length) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.active) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase()\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu() {\n        const type = 'speed';\n\n        // Set the default speeds\n        if (!utils.is.object(this.options.speed) || !Object.keys(this.options.speed).length) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed)));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            form.setAttribute('aria-hidden', !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            // container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.element(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(captions.getTracks.call(this))) {\n            return;\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Remove previous bindings\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            fetch(url)\n                .then(response => (response.ok ? response.json() : null))\n                .then(result => {\n                    if (result !== null && utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(player.media.getAttribute('src'));\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api, () => {\n                vimeo.ready.call(this);\n            });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 200;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParams(options);\n        const id = utils.parseVimeoId(player.media.getAttribute('src'));\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div');\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n\n        player.media.stop = () => {\n            player.embed.stop().then(() => {\n                player.media.paused = true;\n                player.currentTime = 0;\n            });\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n            // Check for airplay support\n            utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.inline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.0.0-beta.2\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { providers, types } from './types';\nimport defaults from './defaults';\nimport support from './support';\nimport utils from './utils';\n\nimport Console from './console';\nimport Storage from './storage';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport media from './media';\nimport source from './source';\nimport ui from './ui';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> required\n                if (!utils.is.element(iframe)) {\n                    this.debug.error('Setup failed: <iframe> is missing');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                // Detect provider\n                url = iframe.getAttribute('src');\n                this.provider = utils.getProviderByUrl(url);\n\n                // Get attributes from URL and set config\n                params = utils.getUrlParams(url);\n                if (!utils.is.empty(params)) {\n                    const truthy = [\n                        '1',\n                        'true',\n                    ];\n\n                    if (truthy.includes(params.autoplay)) {\n                        this.config.autoplay = true;\n                    }\n                    if (truthy.includes(params.playsinline)) {\n                        this.config.inline = true;\n                    }\n                    if (truthy.includes(params.loop)) {\n                        this.config.loop.active = true;\n                    }\n                }\n\n                // Unsupported provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Rework elements\n                this.elements.container = this.media;\n                this.media = iframe;\n\n                // Reset classname\n                this.elements.container.className = '';\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Global listeners\n        listeners.global.call(this);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return this.provider === providers.html5;\n    }\n    get isEmbed() {\n        return this.isYouTube || this.isVimeo;\n    }\n    get isYouTube() {\n        return this.provider === providers.youtube;\n    }\n    get isVimeo() {\n        return this.provider === providers.vimeo;\n    }\n    get isVideo() {\n        return this.type === types.video;\n    }\n    get isAudio() {\n        return this.type === types.audio;\n    }\n\n    /**\n     * Play the media\n     */\n    play() {\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return this.media.paused;\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return !this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2 : true);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return this.media.ended;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        this.restart();\n        this.pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return this.media.seeking;\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return this.media.muted;\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        // Get audio tracks\n        return this.media.mozHasAudio || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);\n    }\n\n    /**\n     * Set playback speed\n     * @param {decimal} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    /**\n     * Set playback quality\n     * Currently YouTube only\n     * @param {string} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.debug.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return this.media.loop;\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || !this.isVideo) {\n            this.debug.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || !this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return this.config.autoplay;\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle fullscreen playback\n     * Requires user input event\n     * @param {event} event\n     */\n    toggleFullscreen(event) {\n        // Video only\n        if (this.isAudio) {\n            return;\n        }\n\n        // Check for native support\n        if (fullscreen.enabled) {\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                // If it's a fullscreen change event, update the state\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    fullscreen.cancelFullScreen();\n                }\n\n                return;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.fallback, this.fullscreen.active);\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (utils.is.element(this.elements.buttons.fullscreen)) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = [\n                    'mouseenter',\n                    'mousemove',\n                    'touchstart',\n                    'touchmove',\n                    'focusin',\n                ].includes(toggle.type);\n\n                // Delay hiding on move events\n                if ([\n                    'mousemove',\n                    'touchmove',\n                    'touchend',\n                ].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        window.clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = window.setTimeout(() => {\n                /* this.debug.warn({\n                    pressed: this.elements.controls.pressed,\n                    hover: this.elements.controls.pressed,\n                    playing: this.playing,\n                    paused: this.paused,\n                    loading: this.loading,\n                }); */\n\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove buttons\n                    if (this.elements.buttons && this.elements.buttons.play) {\n                        Array.from(this.elements.buttons.play).forEach(button => utils.removeElement(button));\n                    }\n\n                    // Remove others\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n}\n\nexport default Plyr;\n"]}