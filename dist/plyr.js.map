{"version":3,"file":"plyr.js","sources":["src/js/types.js","src/js/utils.js","src/js/support.js","src/js/fullscreen.js","src/js/defaults.js","src/js/console.js","src/js/storage.js","src/js/plugins/ads.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        plyr(input) {\n            return this.instanceof(input, Plyr);\n        },\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, window.WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, window.Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        url(input) {\n            return !this.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url, callback) {\n        const current = document.querySelector(`script[src=\"${url}\"]`);\n\n        // Check script is not already referenced, if so wait for load\n        if (current !== null) {\n            current.callbacks = current.callbacks || [];\n            current.callbacks.push(callback);\n            return;\n        }\n\n        // Build the element\n        const element = document.createElement('script');\n\n        // Callback queue\n        element.callbacks = element.callbacks || [];\n        element.callbacks.push(callback);\n\n        // Bind callback\n        if (utils.is.function(callback)) {\n            element.addEventListener(\n                'load',\n                event => {\n                    element.callbacks.forEach(cb => cb.call(null, event));\n                    element.callbacks = null;\n                },\n                false,\n            );\n        }\n\n        // Set the URL after binding callback\n        element.src = url;\n\n        // Inject\n        const first = document.getElementsByTagName('script')[0];\n        first.parentNode.insertBefore(element, first);\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            fetch(url)\n                .then(response => (response.ok ? response.text() : null))\n                .then(text => {\n                    if (text === null) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: text,\n                            }),\n                        );\n                    }\n\n                    updateSprite.call(container, text);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.element(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // Bail if not tab key or not fullscreen\n                if (event.key !== 'Tab' || event.keyCode !== 9 || !this.fullscreen.active) {\n                    return;\n                }\n\n                // Get the current focused element\n                const focused = utils.getFocusElement();\n\n                if (focused === last && !event.shiftKey) {\n                    // Move focus to first element that can be tabbed if Shift isn't used\n                    first.focus();\n                    event.preventDefault();\n                } else if (focused === first && event.shiftKey) {\n                    // Move focus to last element that can be tabbed if Shift is used\n                    last.focus();\n                    event.preventDefault();\n                }\n            },\n            false,\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (utils.is.nullOrUndefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{8,}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = this.parseUrl(input));\n        }\n\n        if (this.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n\n    // Force repaint of element\n    repaint(element) {\n        window.setTimeout(() => {\n            element.setAttribute('hidden', '');\n            element.offsetHeight; // eslint-disable-line\n            element.removeAttribute('hidden');\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        [\n            'webkit',\n            'o',\n            'moz',\n            'ms',\n            'khtml',\n        ].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled: document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        return !prefix.length ? target.requestFullScreen() : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length ? document.cancelFullScreen() : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.isAudio || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.debug.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: [\n            'hd2160',\n            'hd1440',\n            'hd1080',\n            'hd720',\n            'large',\n            'medium',\n            'small',\n            'tiny',\n            'default',\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n        googleIMA: {\n            api: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        error: 'plyr--has-error',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Ads\n    ads: {\n        tagUrl: null,\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        const test = '___test';\n\n        // Try to use it (it might be disabled, e.g. user is in private mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        const store = window.localStorage.getItem(this.key);\n\n        if (!Storage.supported || utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","import utils from '../utils';\n\n// Events are different on various devices. We set the correct events, based on userAgent.\nconst getStartEvents = () => {\n    let events = ['click'];\n\n    // TODO: Detecting touch is tricky, we should look at other ways?\n    // For mobile users the start event will be one of\n    // touchstart, touchend and touchmove.\n    if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/Android/i)) {\n        events = [\n            'touchstart',\n            'touchend',\n            'touchmove',\n        ];\n    }\n\n    return events;\n};\n\nclass Ads {\n    constructor(player) {\n        this.player = player;\n        this.isPlaying = false;\n        this.isInitialized = false;\n\n        // Check if a tag URL is provided.\n        if (!utils.is.url(player.config.ads.tagUrl)) {\n            return this;\n        }\n\n        // Check if the Google IMA3 SDK is loaded\n        if (!utils.is.object(window.google)) {\n            utils.loadScript(player.config.urls.googleIMA.api, () => {\n                this.ready();\n            });\n        } else {\n            this.ready();\n        }\n    }\n\n    set playing(bool = false) {\n        this.isPlaying = bool;\n    }\n\n    get playing() {\n        return this.isPlaying;\n    }\n\n    set initialized(bool = false) {\n        this.isInitialized = bool;\n    }\n\n    get initialized() {\n        return this.isInitialized;\n    }\n\n    ready() {\n        this.time = Date.now();\n        this.startEvents = getStartEvents();\n        this.adDisplayContainer = null;\n        this.adsDisplayElement = null;\n        this.adsManager = null;\n        this.adsLoader = null;\n        this.adsCuePoints = null;\n        this.currentAd = null;\n        this.events = {};\n        this.safetyTimer = null;\n\n        // Setup a simple promise to resolve if the IMA loader is ready.\n        this.adsLoaderResolve = () => {};\n        this.adsLoaderPromise = new Promise((resolve) => {\n            this.adsLoaderResolve = resolve;\n        });\n        this.adsLoaderPromise.then(() => {\n            this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] adsLoader resolved!`, this.adsLoader);\n        });\n\n        // Setup a promise to resolve if the IMA manager is ready.\n        this.adsManagerResolve = () => {};\n        this.adsManagerPromise = new Promise((resolve) => {\n            // Resolve our promise.\n            this.adsManagerResolve = resolve;\n        });\n        this.adsManagerPromise.then(() => {\n            // Clear the safety timer.\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n            this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] adsManager resolved!`, this.adsManager);\n        });\n\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail.\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Setup the ad display container.\n        this.setupAdDisplayContainer();\n\n        // Setup the IMA SDK.\n        this.setupIMA();\n\n        // Set listeners on the Plyr instance.\n        this.setupListeners();\n    }\n\n    setupIMA() {\n        const { container } = this.player.elements;\n\n        // Create ads loader.\n        this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);\n\n        // Listen and respond to ads loaded and error events.\n        this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n        this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n        // Request video ads.\n        const adsRequest = new google.ima.AdsRequest();\n        adsRequest.adTagUrl = this.player.config.ads.tagUrl;\n\n        // Specify the linear and nonlinear slot sizes. This helps the SDK to\n        // select the correct creative if multiple are returned.\n        adsRequest.linearAdSlotWidth = container.offsetWidth;\n        adsRequest.linearAdSlotHeight = container.offsetHeight;\n        adsRequest.nonLinearAdSlotWidth = container.offsetWidth;\n        adsRequest.nonLinearAdSlotHeight = container.offsetHeight;\n\n        this.adsLoader.requestAds(adsRequest);\n\n        this.adsLoaderResolve();\n    }\n\n    onAdsManagerLoaded(adsManagerLoadedEvent) {\n\n        // Get the ads manager.\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf.\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll.\n        this.adsManager = adsManagerLoadedEvent.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll.\n        this.adsCuePoints = this.adsManager.getCuePoints();\n\n        // Add listeners to the required events.\n        this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n        this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, event => this.onAdEvent(event));\n        this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, event => this.onAdEvent(event));\n        this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, event => this.onAdEvent(event));\n        this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY, event => this.onAdEvent(event));\n\n        // Listen to any additional events, if necessary.\n        this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED, event => this.onAdEvent(event));\n        this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, event => this.onAdEvent(event));\n        this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, event => this.onAdEvent(event));\n\n        // Resolve our adsManager.\n        this.adsManagerResolve();\n    }\n\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated.\n        const ad = event.getAd();\n\n        // Set the currently played ad. This information could be used by callback\n        // events.\n        this.currentAd = ad;\n\n        // let intervalTimer;\n\n        switch (event.type) {\n\n            case google.ima.AdEvent.Type.AD_BREAK_READY:\n                // This event indicates that a mid-roll ad is ready to start.\n                // We pause the player and tell the adsManager to start playing the ad.\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] AD_BREAK_READY |`, 'Fired when an ad rule or a VMAP ad break would have played if autoPlayAdBreaks is false.');\n                // this.handleEventListeners('AD_BREAK_READY');\n                // this.playing = true;\n                // this.adsManager.start();\n                break;\n            case google.ima.AdEvent.Type.AD_METADATA:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] AD_METADATA |`, 'Fired when an ads list is loaded.');\n                break;\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] ALL_ADS_COMPLETED |`, 'Fired when the ads manager is done playing all the ads.');\n                this.handleEventListeners('ALL_ADS_COMPLETED');\n                break;\n            case google.ima.AdEvent.Type.CLICK:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] CLICK |`, 'Fired when the ad is clicked.');\n                break;\n            case google.ima.AdEvent.Type.COMPLETE:\n                // This event indicates the ad has finished - the video player\n                // can perform appropriate UI actions, such as removing the timer for\n                // remaining time detection.\n                // clearInterval(intervalTimer);\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] COMPLETE |`, 'Fired when the ad completes playing.');\n                this.handleEventListeners('COMPLETE');\n                this.playing = false;\n\n                this.adsDisplayElement.style.display = 'none';\n\n                if (this.player.currentTime < this.player.duration) {\n                    this.player.play();\n                }\n                break;\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] CONTENT_PAUSE_REQUESTED |`, 'Fired when content should be paused. This usually happens right before an ad is about to cover the content.');\n                this.handleEventListeners('CONTENT_PAUSE_REQUESTED');\n                this.player.pause();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] CONTENT_RESUME_REQUESTED |`, 'Fired when content should be resumed. This usually happens when an ad finishes or collapses.');\n                this.handleEventListeners('CONTENT_RESUME_REQUESTED');\n                if (this.player.currentTime < this.player.duration) {\n                    this.player.play();\n                }\n                break;\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to\n                // determine whether the ad is a video ad or an overlay.\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] LOADED |`, event.getAd().getContentType());\n                this.handleEventListeners('LOADED');\n\n                // Show the ad display element.\n                this.adsDisplayElement.style.display = 'block';\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay.\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n            case google.ima.AdEvent.Type.STARTED:\n                // This event indicates the ad has started - the video player\n                // can adjust the UI, for example display a pause button and\n                // remaining time.\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] STARTED |`, 'Fired when the ad starts playing.');\n                this.player.pause();\n                this.playing = true;\n                this.handleEventListeners('STARTED');\n                break;\n            case google.ima.AdEvent.Type.DURATION_CHANGE:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] DURATION_CHANGE |`, 'Fired when the ad\\'s duration changes.');\n                break;\n            case google.ima.AdEvent.Type.FIRST_QUARTILE:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] FIRST_QUARTILE |`, 'Fired when the ad playhead crosses first quartile.');\n                break;\n            case google.ima.AdEvent.Type.IMPRESSION:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] IMPRESSION |`, 'Fired when the impression URL has been pinged.');\n                break;\n            case google.ima.AdEvent.Type.INTERACTION:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] INTERACTION |`, 'Fired when an ad triggers the interaction callback. Ad interactions contain an interaction ID string in the ad data.');\n                break;\n            case google.ima.AdEvent.Type.LINEAR_CHANGED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] LINEAR_CHANGED |`, 'Fired when the displayed ad changes from linear to nonlinear, or vice versa.');\n                break;\n            case google.ima.AdEvent.Type.MIDPOINT:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] MIDPOINT |`, 'Fired when the ad playhead crosses midpoint.');\n                break;\n            case google.ima.AdEvent.Type.PAUSED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] PAUSED |`, 'Fired when the ad is paused.');\n                break;\n            case google.ima.AdEvent.Type.RESUMED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] RESUMED |`, 'Fired when the ad is resumed.');\n                break;\n            case google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] SKIPPABLE_STATE_CHANGED |`, 'Fired when the displayed ads skippable state is changed.');\n                break;\n            case google.ima.AdEvent.Type.SKIPPED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] SKIPPED |`, 'Fired when the ad is skipped by the user.');\n                break;\n            case google.ima.AdEvent.Type.THIRD_QUARTILE:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] THIRD_QUARTILE |`, 'Fired when the ad playhead crosses third quartile.');\n                break;\n            case google.ima.AdEvent.Type.USER_CLOSE:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] USER_CLOSE |`, 'Fired when the ad is closed by the user.');\n                break;\n            case google.ima.AdEvent.Type.VOLUME_CHANGED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] VOLUME_CHANGED |`, 'Fired when the ad volume has changed.');\n                break;\n            case google.ima.AdEvent.Type.VOLUME_MUTED:\n                this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK] VOLUME_MUTED |`, 'Fired when the ad volume has been muted.');\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    onAdError(adErrorEvent) {\n        this.cancel();\n\n        if (this.player.debug) {\n            throw new Error(adErrorEvent);\n        }\n    }\n\n    setupAdDisplayContainer() {\n        const { wrapper } = this.player.elements;\n\n        // So we can run VPAID2.\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language.\n        // Todo: Could make a config option out of this locale value.\n        google.ima.settings.setLocale('en');\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads.\n        this.adDisplayContainer = new google.ima.AdDisplayContainer(wrapper);\n\n        this.adsDisplayElement = wrapper.firstChild;\n\n        // The AdDisplayContainer call from google IMA sets the style attribute\n        // by default. We remove the inline style and set it through the stylesheet.\n        this.adsDisplayElement.removeAttribute('style');\n\n        // Set class name on the adDisplayContainer element.\n        this.adsDisplayElement.setAttribute('class', this.player.config.classNames.ads);\n\n        // Play ads when clicked. Wait until the adsManager and adsLoader\n        // are both resolved.\n        Promise.all([\n            this.adsManagerPromise,\n            this.adsLoaderPromise,\n        ]).then(() => {\n            this.setOnClickHandler(this.adsDisplayElement, this.play);\n        });\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes.\n     */\n    setupListeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events.\n        this.player.on('ended', () => {\n            this.adsLoader.contentComplete();\n        });\n\n        this.player.on('seeking', event => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', event => {\n            const seekedTime = this.player.currentTime;\n\n            this.adsCuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.adsManager.discardAdBreak();\n                    this.adsCuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly.\n        window.addEventListener('resize', () => {\n            this.adsManager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements.\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        // Initialize the container. Must be done via a user action on mobile devices.\n        this.adDisplayContainer.initialize();\n\n        // Play the requested advertisement whenever the adsManager is ready.\n        this.adsManagerPromise.then(() => {\n            try {\n                if (!this.initialized) {\n\n                    // Initialize the ads manager. Ad rules playlist will start at this time.\n                    this.adsManager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                    // Call play to start showing the ad. Single video and overlay ads will\n                    // start at this time; the call will be ignored for ad rules.\n                    this.adsManager.start();\n                }\n\n                this.initialized = true;\n            } catch (adError) {\n                // An error may be thrown if there was a problem with the VAST response.\n                this.adsDisplayElement.remove();\n\n                if (this.player.debug) {\n                    throw new Error(adError);\n                }\n                this.player.play();\n            }\n        });\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this.\n     * If we don't then we're not allowed to call new ads based\n     * on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        this.player.debug.warn(`[${(Date.now() - this.time) / 1000}s][IMA SDK]`, 'Advertisement cancelled.');\n\n        // Todo: Removing the ad container might be problematic if we were to recreate the adsManager. Think of playlists. Every new video you need to request a new VAST xml and preload the advertisement.\n        this.adsDisplayElement.remove();\n\n        // Tell our adsManager to go bye bye.\n        this.adsManagerPromise.then(() => {\n            if (this.adsManager) {\n                this.adsManager.destroy();\n            }\n        });\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked.\n     */\n    handleEventListeners(event) {\n        if (typeof this.events[event] !== 'undefined') {\n            this.events[event].call(this);\n        }\n    }\n\n    /**\n     * Set start event listener on a DOM element and triggers the\n     * callback when clicked.\n     * @param {element} element - The element on which to set the listener\n     * @param {function} callback - The callback which will be invoked once triggered.\n     */\n    setOnClickHandler(element, callback) {\n        for (let i = 0; i < this.startEvents.length; i += 1) {\n            const startEvent = this.startEvents[i];\n            element.addEventListener(\n                startEvent,\n                event => {\n                    if ((event.type === 'touchend' && startEvent === 'touchend') || event.type === 'click') {\n                        callback.call(this);\n                    }\n                },\n                { once: true },\n            );\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        this.events[event] = callback;\n        return this;\n    }\n\n    /**\n     * startSafetyTimer\n     * Setup a safety timer for when the ad network\n     * doesn't respond for whatever reason. The advertisement has 12 seconds\n     * to get its shit together. We stop this timer when the advertisement\n     * is playing, or when a user action is required to start, then we\n     * clear the timer on ad ready.\n     * @param {Number} time\n     * @param {String} from\n     * @private\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK]`, `Safety timer invoked timer from: ${from}`);\n        this.safetyTimer = window.setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * clearSafetyTimer\n     * @param {String} from\n     * @private\n     */\n    clearSafetyTimer(from) {\n        if (typeof this.safetyTimer !== 'undefined' && this.safetyTimer !== null) {\n            this.player.debug.log(`[${(Date.now() - this.time) / 1000}s][IMA SDK]`, `Safety timer cleared timer from: ${from}`);\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = undefined;\n        }\n    }\n}\n\nexport default Ads;\n\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst listeners = {\n    // Global listeners\n    global() {\n        let last = null;\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const repeat = pressed && code === last;\n\n            // Bail if a modifier key is set\n            if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n                return;\n            }\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.element(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!repeat) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!repeat) {\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!repeat) {\n                            this.muted = !this.muted;\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!repeat) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 76:\n                        // L key\n                        this.loop = !this.loop;\n                        break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n\n            // Fullscreen toggle on double click\n            utils.on(this.elements.container, 'dblclick', event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.media, 'loadeddata', () => {\n            utils.toggleHidden(this.elements.volume, !this.hasAudio);\n            utils.toggleHidden(this.elements.buttons.mute, !this.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.isHTML5 && this.isVideo && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'playing play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'stalled waiting canplay seeked playing', event => ui.checkLoading.call(this, event));\n\n        // Check if media failed to load\n        // utils.on(this.media, 'play', event => ui.checkFailed.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && !this.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.paused) {\n                    return;\n                }\n\n                if (this.paused) {\n                    this.play();\n                } else if (this.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.supported.ui && this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save to storage\n            this.storage.set({ volume: this.volume, muted: this.muted });\n        });\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save to storage\n            this.storage.set({ speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save to storage\n            this.storage.set({ quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            this.storage.set({ language: this.language });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            this.storage.set({ captions: this.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.media.error;\n            }\n\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true, detail);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Play/pause toggle\n        utils.on(this.elements.buttons.play, 'click', event =>\n            proxy(event, 'play', () => {\n                this.togglePlay();\n            })\n        );\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute toggle\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = !this.muted;\n            })\n        );\n\n        // Captions toggle\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen toggle\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airplay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.language = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else {\n                controls.showTab.call(this, event);\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.config.toggleInvert && !utils.is.element(this.elements.display.duration)) {\n            utils.on(this.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.currentTime === 0) {\n                    return;\n                }\n\n                this.config.invertTime = !this.config.invertTime;\n                ui.timeUpdate.call(this);\n            });\n        }\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = [\n                    'mousedown',\n                    'touchstart',\n                ].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            utils.on(this.elements.controls, 'focusin focusout', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set aria state\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => utils.toggleState(button, this.playing));\n        }\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Check if media failed to load\n    checkFailed() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState\n        this.failed = this.media.networkState === 3;\n\n        if (this.failed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, false);\n            utils.toggleClass(this.elements.container, this.config.classNames.error, true);\n        }\n\n        // Clear timer\n        clearTimeout(this.timers.failed);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.element(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.element(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Helpers\n        const getHours = value => parseInt((value / 60 / 60) % 60, 10);\n        const getMinutes = value => parseInt((value / 60) % 60, 10);\n        const getSeconds = value => parseInt(value % 60, 10);\n\n        // Breakdown to hours, mins, secs\n        let hours = getHours(time);\n        const mins = getMinutes(time);\n        const secs = getSeconds(time);\n\n        // Do we need to display hours?\n        if (getHours(this.duration) > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport captions from './captions';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = this.config.i18n[type];\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = type;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = this.config.i18n[label];\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('div', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00'));\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            })\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.isYouTube;\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality =>\n            controls.createMenuItem.call(this, quality, list, type, controls.getLabel.call(this, 'quality', quality), getBadge(quality))\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.active ? this.captions.language : '';\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Update the label\n        if (!utils.is.empty(value)) {\n            const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n            label.innerHTML = controls.getLabel.call(this, setting, value);\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            // Check it\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || !captions.getTracks.call(this).length) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.active) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase()\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu() {\n        const type = 'speed';\n\n        // Set the default speeds\n        if (!utils.is.object(this.options.speed) || !Object.keys(this.options.speed).length) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed)));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            form.setAttribute('aria-hidden', !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            // container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.element(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(captions.getTracks.call(this))) {\n            return;\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Remove previous bindings\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            fetch(url)\n                .then(response => (response.ok ? response.json() : null))\n                .then(result => {\n                    if (result !== null && utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(player.media.getAttribute('src'));\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api, () => {\n                vimeo.ready.call(this);\n            });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 200;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParams(options);\n        const id = utils.parseVimeoId(player.media.getAttribute('src'));\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div');\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n\n        player.media.stop = () => {\n            player.embed.stop().then(() => {\n                player.media.paused = true;\n                player.currentTime = 0;\n            });\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n            // Check for airplay support\n            utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.inline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.0.0-beta.2\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { providers, types } from './types';\nimport defaults from './defaults';\nimport support from './support';\nimport utils from './utils';\n\nimport Console from './console';\nimport Storage from './storage';\nimport Ads from './plugins/ads';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport media from './media';\nimport source from './source';\nimport ui from './ui';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> required\n                if (!utils.is.element(iframe)) {\n                    this.debug.error('Setup failed: <iframe> is missing');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                // Detect provider\n                url = iframe.getAttribute('src');\n                this.provider = utils.getProviderByUrl(url);\n\n                // Get attributes from URL and set config\n                params = utils.getUrlParams(url);\n                if (!utils.is.empty(params)) {\n                    const truthy = [\n                        '1',\n                        'true',\n                    ];\n\n                    if (truthy.includes(params.autoplay)) {\n                        this.config.autoplay = true;\n                    }\n                    if (truthy.includes(params.playsinline)) {\n                        this.config.inline = true;\n                    }\n                    if (truthy.includes(params.loop)) {\n                        this.config.loop.active = true;\n                    }\n                }\n\n                // Unsupported provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Rework elements\n                this.elements.container = this.media;\n                this.media = iframe;\n\n                // Reset classname\n                this.elements.container.className = '';\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Global listeners\n        listeners.global.call(this);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return this.provider === providers.html5;\n    }\n    get isEmbed() {\n        return this.isYouTube || this.isVimeo;\n    }\n    get isYouTube() {\n        return this.provider === providers.youtube;\n    }\n    get isVimeo() {\n        return this.provider === providers.vimeo;\n    }\n    get isVideo() {\n        return this.type === types.video;\n    }\n    get isAudio() {\n        return this.type === types.audio;\n    }\n\n    /**\n     * Play the media\n     */\n    play() {\n        if (this.ads) {\n            this.ads.play();\n        }\n\n        if (!this.ads.playing) {\n            return this.media.play();\n        }\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return this.media.paused;\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return !this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2 : true);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return this.media.ended;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        this.restart();\n        this.pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return this.media.seeking;\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return this.media.muted;\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        // Get audio tracks\n        return this.media.mozHasAudio || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);\n    }\n\n    /**\n     * Set playback speed\n     * @param {decimal} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    /**\n     * Set playback quality\n     * Currently YouTube only\n     * @param {string} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.debug.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return this.media.loop;\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || !this.isVideo) {\n            this.debug.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || !this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return this.config.autoplay;\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle fullscreen playback\n     * Requires user input event\n     * @param {event} event\n     */\n    toggleFullscreen(event) {\n        // Video only\n        if (this.isAudio) {\n            return;\n        }\n\n        // Check for native support\n        if (fullscreen.enabled) {\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                // If it's a fullscreen change event, update the state\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    fullscreen.cancelFullScreen();\n                }\n\n                return;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.fallback, this.fullscreen.active);\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (utils.is.element(this.elements.buttons.fullscreen)) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = [\n                    'mouseenter',\n                    'mousemove',\n                    'touchstart',\n                    'touchmove',\n                    'focusin',\n                ].includes(toggle.type);\n\n                // Delay hiding on move events\n                if ([\n                    'mousemove',\n                    'touchmove',\n                    'touchend',\n                ].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        window.clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = window.setTimeout(() => {\n                /* this.debug.warn({\n                    pressed: this.elements.controls.pressed,\n                    hover: this.elements.controls.pressed,\n                    playing: this.playing,\n                    paused: this.paused,\n                    loading: this.loading,\n                }); */\n\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove buttons\n                    if (this.elements.buttons && this.elements.buttons.play) {\n                        Array.from(this.elements.buttons.play).forEach(button => utils.removeElement(button));\n                    }\n\n                    // Remove others\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n}\n\nexport default Plyr;\n"],"names":["element","type","range","value","providers","types","defaults","window","navigator","language","split","utils","input","this","instanceof","Plyr","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","test","array","nodeList","length","object","keys","constructor","document","documentMode","documentElement","style","userAgent","platform","url","callback","current","querySelector","callbacks","push","createElement","is","function","addEventListener","forEach","cb","call","event","src","first","getElementsByTagName","parentNode","insertBefore","id","hasId","querySelectorAll","container","toggleHidden","setAttribute","support","storage","cached","localStorage","getItem","data","JSON","parse","content","then","response","ok","text","setItem","stringify","catch","updateSprite","innerHTML","body","childNodes","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","index","child","cloneNode","parent","sibling","nextSibling","appendChild","attributes","setAttributes","textContent","target","removeChild","lastChild","newChild","oldChild","replaceChild","empty","key","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","charAt","class","toggle","contains","classList","removeAttribute","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","controls","getElement","config","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","debug","warn","toggleNativeControls","focused","activeElement","focusable","last","on","keyCode","_this","active","getFocusElement","shiftKey","focus","preventDefault","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","dispatchEvent","pressed","getAttribute","state","max","toFixed","sources","source","shift","extend","youtube","vimeo","match","RegExp","$2","number","parser","href","search","startsWith","parseUrl","slice","indexOf","reduce","params","hash","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","undefined","setTimeout","offsetHeight","provider","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","defineProperty","transitionEnd","matchMedia","noop","Console","enabled","console","log","bind","Storage","player","store","json","get","removeItem","Ads","isPlaying","isInitialized","ads","tagUrl","google","ready","loadScript","urls","googleIMA","time","Date","now","startEvents","adDisplayContainer","adsDisplayElement","adsManager","adsLoader","adsCuePoints","currentAd","safetyTimer","adsLoaderResolve","adsLoaderPromise","Promise","resolve","_this2","adsManagerResolve","adsManagerPromise","clearSafetyTimer","startSafetyTimer","setupAdDisplayContainer","setupIMA","setupListeners","ima","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","_this3","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","adsRequest","AdsRequest","adTagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","requestAds","adsManagerLoadedEvent","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","_this4","AdEvent","CONTENT_PAUSE_REQUESTED","onAdEvent","CONTENT_RESUME_REQUESTED","ALL_ADS_COMPLETED","AD_BREAK_READY","LOADED","STARTED","COMPLETE","ad","getAd","AD_METADATA","handleEventListeners","CLICK","playing","getContentType","isLinear","DURATION_CHANGE","FIRST_QUARTILE","IMPRESSION","INTERACTION","LINEAR_CHANGED","MIDPOINT","PAUSED","RESUMED","SKIPPABLE_STATE_CHANGED","SKIPPED","THIRD_QUARTILE","USER_CLOSE","VOLUME_CHANGED","VOLUME_MUTED","adErrorEvent","cancel","Error","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","AdDisplayContainer","all","setOnClickHandler","_this5","contentComplete","_this6","seekedTime","cuePoint","discardAdBreak","splice","resize","ViewMode","NORMAL","initialize","_this7","initialized","init","start","adError","remove","_this8","destroy","i","startEvent","_this9","once","bool","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","toggleClass","toggleState","trapFocus","listeners","handleKey","code","which","repeat","altKey","ctrlKey","metaKey","editable","stopPropagation","togglePlay","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","loop","keyboard","global","tabFocus","hideControls","toggleControls","eventType","timeUpdate","durationUpdate","hasAudio","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","touch","paused","ended","disableContextMenu","set","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","defaultPrevented","toggleMenu","form","parseFloat","showTab","toggleInvert","invertTime","isWebkit","updateRangeFill","updateSeekTooltip","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","uiSupported","removeElement","inject","setup","setTitle","label","i18n","title","isEmbed","iframe","frameTitle","stopped","button","loading","timers","failed","networkState","setRange","nodeValue","buffered","getPercentage","end","setProgress","format","getHours","parseInt","hours","mins","secs","invert","updateTimeDisplay","seeking","hasDuration","displayDuration","setProperty","iconUrl","svg4everybody","namespace","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","hidden","badge","menu","buttonType","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","suffix","played","toLowerCase","list","checked","item","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","hasClass","setting","tab","tabs","pane","panes","filter","isYouTube","toggleTab","emptyElement","createMenuItem","getLabel","createBadge","getBadge","getLanguage","default","textTracks","getTracks","none","currentTrack","getCurrentTrack","track","disabled","hasTracks","tracks","toUpperCase","unshift","show","isMenuItem","isButton","open","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","back","setSpeedMenu","loadSprite","seekTime","create","findElements","repaint","labels","stored","setCaptionsMenu","insertAfter","setLanguage","setCue","mode","activeCues","isVimeo","embed","enableTextTrack","cue","setText","getCueAsHTML","caption","setAspectRatio","YT","Player","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","result","items","snippet","paddingBottom","currentId","parseYouTubeId","generateId","replaceElement","autoplay","location","hostname","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","setVolume","getVideoUrl","getAvailablePlaybackRates","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","Vimeo","padding","offset","transform","buildUrlParams","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","getVideoWidth","getVideoHeight","getAspectRatio","dimensions","setAutopause","autopause","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","blankVideo","insertElement","attribute","cancelRequests","html5","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","plyr","original","tagName","getProviderByUrl","getUrlParams","truthy","playsinline","hasAttribute","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","clearTimeout","soft","done","unload","mime","readyState","targetTime","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"uLAIA,IC0tBcA,EASAC,ECxlBAC,ECvINC,EHJKC,SACF,gBACE,gBACF,SAGEC,SACF,cACA,SIXLC,YAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,iDAGG,wDAIC,mBAEL,SACA,SACA,SACA,QACA,QACA,SACA,QACA,OACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACEC,OAAOC,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,qBAKD,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,6BAMD,uDAGA,qDAGA,uEAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,wCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,+BACC,kCACH,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,wBACF,oBACI,qBACH,qBACI,oBACD,wBACA,wBACA,sBACF,wBACA,sBACE,uBACD,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,mBACD,qCAGG,gCACD,6CAGC,oCACC,4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"}