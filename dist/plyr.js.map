{"version":3,"file":"plyr.js","sources":["src/js/storage.js","src/js/defaults.js","src/js/types.js","src/js/utils.js","src/js/support.js","src/js/fullscreen.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\n// Get contents of local storage\nfunction get() {\n    const store = window.localStorage.getItem(this.config.storage.key);\n\n    if (utils.is.empty(store)) {\n        return {};\n    }\n\n    return JSON.parse(store);\n}\n\n// Save a value back to local storage\nfunction set(object) {\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return;\n    }\n\n    // Can only store objectst\n    if (!utils.is.object(object)) {\n        return;\n    }\n\n    // Get current storage\n    const storage = get.call(this);\n\n    // Update the working copy of the values\n    utils.extend(storage, object);\n\n    // Update storage\n    window.localStorage.setItem(this.config.storage.key, JSON.stringify(storage));\n}\n\n// Setup localStorage\nfunction setup() {\n    let value = null;\n    let storage = {};\n\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return storage;\n    }\n\n    // Clean up old volume\n    // https://github.com/sampotts/plyr/issues/171\n    window.localStorage.removeItem('plyr-volume');\n\n    // load value from the current key\n    value = window.localStorage.getItem(this.config.storage.key);\n\n    if (!value) {\n        // Key wasn't set (or had been cleared), move along\n    } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n        // If value is a number, it's probably volume from an older\n        // version of this. See: https://github.com/sampotts/plyr/pull/313\n        // Update the key to be JSON\n        set({\n            volume: parseFloat(value),\n        });\n    } else {\n        // Assume it's JSON from this or a later version of plyr\n        storage = JSON.parse(value);\n    }\n\n    return storage;\n}\n\nexport default { setup, set, get };\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: false,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: ['hd2160', 'hd1440', 'hd1080', 'hd720', 'large', 'medium', 'small', 'tiny', 'default'],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: ['captions', 'quality', 'speed', 'loop'],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types\n// ==========================================================================\n\nconst types = {\n    embed: ['youtube', 'vimeo'],\n    html5: ['video', 'audio'],\n};\n\nexport default types;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        htmlElement(input) {\n            return this.instanceof(input, window.HTMLElement);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return (\n                this.instanceof(input, window.TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind))\n            );\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url, callback) {\n        // Check script is not already referenced\n        if (document.querySelectorAll(`script[src=\"${url}\"]`).length) {\n            return;\n        }\n\n        // Build the element\n        const element = document.createElement('script');\n        element.src = url;\n\n        // Find first script\n        const first = document.getElementsByTagName('script')[0];\n\n        // Bind callback\n        if (utils.is.function(callback)) {\n            element.addEventListener('load', event => callback.call(null, event), false);\n        }\n\n        // Inject\n        first.parentNode.insertBefore(element, first);\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            fetch(url)\n                .then(response => (response.ok ? response.text() : null))\n                .then(text => {\n                    if (text === null) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: text,\n                            })\n                        );\n                    }\n\n                    updateSprite.call(container, text);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.htmlElement(element) || !utils.is.htmlElement(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.htmlElement(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.htmlElement(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.htmlElement(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches =\n            prototype.matches ||\n            prototype.webkitMatchesSelector ||\n            prototype.mozMatchesSelector ||\n            prototype.msMatchesSelector ||\n            match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.htmlElement(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(\n                    `.${this.config.classNames.tooltip}`\n                );\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.console.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // Bail if not tab key or not fullscreen\n                if (event.key !== 'Tab' || event.keyCode !== 9 || !this.fullscreen.active) {\n                    return;\n                }\n\n                // Get the current focused element\n                const focused = utils.getFocusElement();\n\n                if (focused === last && !event.shiftKey) {\n                    // Move focus to first element that can be tabbed if Shift isn't used\n                    first.focus();\n                    event.preventDefault();\n                } else if (focused === first && event.shiftKey) {\n                    // Move focus to last element that can be tabbed if Shift is used\n                    last.focus();\n                    event.preventDefault();\n                }\n            },\n            false\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (utils.is.nullOrUndefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // Bail if no target\n        if (!utils.is.htmlElement(element)) {\n            return;\n        }\n\n        // Get state\n        const state = utils.is.boolean(input) ? input : !element.getAttribute('aria-pressed');\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    extend(...objects) {\n        const { length } = objects;\n\n        // Bail if nothing to merge\n        if (!length) {\n            return null;\n        }\n\n        // Return first if specified but nothing to merge\n        if (length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        let destination = Array.prototype.shift.call(objects);\n        if (!utils.is.object(destination)) {\n            destination = {};\n        }\n\n        // Loop through all objects to merge\n        objects.forEach(source => {\n            if (!utils.is.object(source)) {\n                return;\n            }\n\n            Object.keys(source).forEach(property => {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    utils.extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            });\n        });\n\n        return destination;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert object to URL parameters\n    buildUrlParameters(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (type) {\n            case 'video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Local storage\n    // We can't assume if local storage is present that we can use it\n    storage: (() => {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        const test = '___test';\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    })(),\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.type === 'video') {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.type === 'audio') {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        ['webkit', 'o', 'moz', 'ms', 'khtml'].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled:\n        document.fullscreenEnabled ||\n        document.webkitFullscreenEnabled ||\n        document.mozFullScreenEnabled ||\n        document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        return !prefix.length\n            ? target.requestFullScreen()\n            : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length\n            ? document.cancelFullScreen()\n            : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.type === 'audio' || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.console.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.console.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport storage from './storage';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst listeners = {\n    // Global listeners\n    global() {\n        let last = null;\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const held = pressed && code === last;\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.htmlElement(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!held) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!held) {\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!held) {\n                            this.muted = !this.muted;\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!held) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 76:\n                        // L key\n                        this.loop = !this.loop;\n                        break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(\n                this.elements.container,\n                'click mouseenter mouseleave mousemove touchmove enterfullscreen exitfullscreen',\n                event => {\n                    this.toggleControls(event);\n                }\n            );\n        }\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.media, 'loadeddata', () => {\n            utils.toggleHidden(this.elements.volume, !this.hasAudio);\n            utils.toggleHidden(this.elements.buttons.mute, !this.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.type === 'video' && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'playing play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'stalled waiting canplay seeked playing', event => ui.checkLoading.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && this.type !== 'audio') {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!wrapper) {\n                return;\n            }\n\n            // Set cursor\n            wrapper.style.cursor = 'pointer';\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.paused) {\n                    return;\n                }\n\n                if (this.paused) {\n                    this.play();\n                } else if (this.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save to storage\n            storage.set.call(this, { speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save to storage\n            storage.set.call(this, { quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'languagechange', () => {\n            // Save to storage\n            storage.set.call(this, { language: this.language });\n        });\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save to storage\n            storage.set.call(this, { volume: this.volume, muted: this.muted });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            storage.set.call(this, { captions: this.captions.enabled });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat(['keyup', 'keydown']).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.media.error;\n            }\n\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true, detail);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Play/pause toggle\n        utils.on(this.elements.buttons.play, 'click', event =>\n            proxy(event, 'play', () => {\n                this.togglePlay();\n            })\n        );\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute toggle\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = !this.muted;\n            })\n        );\n\n        // Captions toggle\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen toggle\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airplay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.language = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else {\n                controls.showTab.call(this, event);\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.config.toggleInvert && !utils.is.htmlElement(this.elements.display.duration)) {\n            utils.on(this.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.currentTime === 0) {\n                    return;\n                }\n\n                this.config.invertTime = !this.config.invertTime;\n                ui.timeUpdate.call(this);\n            });\n        }\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event =>\n            controls.updateSeekTooltip.call(this, event)\n        );\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = ['mousedown', 'touchstart'].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            // TODO: Check we need capture here\n            utils.on(\n                this.elements.controls,\n                'focusin focusout',\n                event => {\n                    this.toggleControls(event);\n                },\n                true\n            );\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.console.warn(`Basic support only for ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.htmlElement(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set aria state\n        if (utils.is.array(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => utils.toggleState(button, this.playing));\n        }\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = ['stalled', 'waiting'].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.htmlElement(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update checkbox for mute state\n        if (utils.is.htmlElement(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.htmlElement(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.htmlElement(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.htmlElement(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.htmlElement(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Helpers\n        const getHours = value => parseInt((value / 60 / 60) % 60, 10);\n        const getMinutes = value => parseInt((value / 60) % 60, 10);\n        const getSeconds = value => parseInt(value % 60, 10);\n\n        // Breakdown to hours, mins, secs\n        let hours = getHours(time);\n        const mins = getMinutes(time);\n        const secs = getSeconds(time);\n\n        // Do we need to display hours?\n        if (getHours(this.duration) > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.htmlElement(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(\n            this,\n            this.elements.display.currentTime,\n            invert ? this.duration - this.currentTime : this.currentTime,\n            invert\n        );\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's only one time display, display duration there\n        if (!utils.is.htmlElement(this.elements.display.duration) && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (utils.is.htmlElement(this.elements.display.duration)) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport captions from './captions';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.htmlElement(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Inject the stylesheet if needed\n        if (!utils.is.htmlElement(this.elements.styleSheet)) {\n            this.elements.styleSheet = utils.createElement('style');\n            this.elements.container.appendChild(this.elements.styleSheet);\n        }\n\n        const styleSheet = this.elements.styleSheet.sheet;\n        const percentage = range.value / range.max * 100;\n        const selector = `#${range.id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const index = Array.from(styleSheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (index !== -1) {\n            styleSheet.deleteRule(index);\n        }\n\n        // Insert new one\n        styleSheet.insertRule([selector, styles].join(' '));\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = this.config.i18n[type];\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = type;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = this.config.i18n[label];\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('span', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(\n            utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00')\n        );\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            })\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.htmlElement(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.htmlElement(this.elements.inputs.seek) ||\n            !utils.is.htmlElement(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = this.elements.display.seekTooltip.style.left.replace('%', '');\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && ['mouseenter', 'mouseleave'].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.type === 'youtube';\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality =>\n            controls.createMenuItem.call(\n                this,\n                quality,\n                list,\n                type,\n                controls.getLabel.call(this, 'quality', quality),\n                getBadge(quality)\n            )\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.language;\n\n                if (!this.captions.enabled) {\n                    value = '';\n                }\n\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.console.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.console.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.htmlElement(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // Check it\n        target.checked = true;\n\n        // Find the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || !captions.getTracks.call(this).length) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.enabled) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase()\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        const type = 'speed';\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.speed = options.filter(speed => this.config.speed.options.includes(speed));\n        } else {\n            this.options.speed = this.config.speed.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed =>\n            controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed))\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event)\n            ? event\n            : utils.is.htmlElement(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.htmlElement(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.htmlElement(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.htmlElement(form)) {\n            form.setAttribute('aria-hidden', !show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.htmlElement(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || !['width', 'height'].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement(\n            'div',\n            utils.getAttributesFromSelector(this.config.selectors.controls.wrapper)\n        );\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            // container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement(\n                'span',\n                utils.getAttributesFromSelector(this.config.selectors.progress)\n            );\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('span', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.htmlElement(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.htmlElement(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.htmlElement(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport storage from './storage';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        if (!utils.is.empty(storage.get.call(this).language)) {\n            this.captions.language = storage.get.call(this).language;\n        } else if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.enabled)) {\n            if (!utils.is.empty(storage.get.call(this).language)) {\n                this.captions.enabled = storage.get.call(this).captions;\n            } else {\n                this.captions.enabled = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!['video', 'vimeo'].includes(this.type) || (this.type === 'video' && !support.textTracks)) {\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.htmlElement(this.elements.captions)) {\n            this.elements.captions = utils.createElement(\n                'div',\n                utils.getAttributesFromSelector(this.config.selectors.captions)\n            );\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(\n            this.elements.container,\n            this.config.classNames.captions.enabled,\n            !utils.is.empty(captions.getTracks.call(this))\n        );\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(captions.getTracks.call(this))) {\n            return;\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.type === 'video') {\n            captions.getTracks.call(this).forEach(track => {\n                // Remove previous bindings\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.type === 'vimeo' && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => ['captions', 'subtitles'].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.htmlElement(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.console.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.htmlElement(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = storage.get.call(this).captions;\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        const videoId = utils.parseYouTubeId(this.embedId);\n\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Setup API\n        if (utils.is.object(window.YT)) {\n            youtube.ready.call(this, videoId);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this, videoId);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle() {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        const videoId = utils.parseYouTubeId(this.embedId);\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            fetch(url)\n                .then(response => (response.ok ? response.json() : null))\n                .then(result => {\n                    if (result !== null && utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready(videoId) {\n        const player = this;\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(player.media.id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: this.captions.active ? 1 : 0,\n                cc_lang_pref: this.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message =\n                                'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n                        controls.setSpeedMenu.call(player, instance.getAvailablePlaybackRates());\n                    }\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api, () => {\n                vimeo.ready.call(this);\n            });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 200;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParameters(options);\n        const id = utils.parseVimeoId(player.embedId);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        player.media.appendChild(iframe);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n        player.media.stop = () => {\n            player.embed.stop().then(() => {\n                player.media.paused = true;\n                player.currentTime = 0;\n            });\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([player.embed.getVideoWidth(), player.embed.getVideoHeight()]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get available speeds\n        if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(player);\n        }\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.htmlElement(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            if (parseInt(data.percent, 10) === 1) {\n                // Trigger event\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.console.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.pip.supported,\n                support.pip && this.type === 'video'\n            );\n\n            // Check for airplay support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.airplay.supported,\n                support.airplay && this.isHTML5\n            );\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (['video', 'youtube', 'vimeo'].includes(this.type)) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.type) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.console.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport types from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.console.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.htmlElement(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type\n                if ('type' in input) {\n                    this.type = input.type;\n\n                    // Get child type for video (it might be an embed)\n                    if (this.type === 'video') {\n                        const firstSource = input.sources[0];\n\n                        if ('type' in firstSource && types.embed.includes(firstSource.type)) {\n                            this.type = firstSource.type;\n                        }\n                    }\n                }\n\n                // Check for support\n                this.supported = support.check(this.type, this.config.inline);\n\n                // Create new markup\n                switch (this.type) {\n                    case 'video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube':\n                    case 'vimeo':\n                        this.media = utils.createElement('div');\n                        this.embedId = input.sources[0].src;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hooks\n                utils.toggleClass(\n                    this.elements.container,\n                    this.config.classNames.captions.active,\n                    this.supported.ui && this.captions.enabled\n                );\n\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true\n        );\n    },\n};\n\nexport default source;\n","﻿// ==========================================================================\n// Plyr\n// plyr.js v3.0.0\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './defaults';\nimport types from './types';\nimport support from './support';\nimport utils from './utils';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport media from './media';\nimport storage from './storage';\nimport source from './source';\nimport ui from './ui';\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        this.ready = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if (\n            (window.jQuery && this.media instanceof jQuery) ||\n            utils.is.nodeList(this.media) ||\n            utils.is.array(this.media)\n        ) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr'));\n                } catch (e) {\n                    return null;\n                }\n            })()\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            enabled: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        this.console = {\n            log() {},\n            warn() {},\n            error() {},\n        };\n        if (this.config.debug && 'console' in window) {\n            this.console = {\n                log: console.log, // eslint-disable-line\n                warn: console.warn, // eslint-disable-line\n                error: console.error, // eslint-disable-line\n            };\n            this.console.log('Debugging enabled');\n        }\n\n        // Log config options and support\n        this.console.log('Config', this.config);\n        this.console.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.htmlElement(this.media)) {\n            this.console.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.console.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.console.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.console.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Different setup based on type\n        switch (type) {\n            // TODO: Handle passing an iframe for true progressive enhancement\n            // case 'iframe':\n            case 'div':\n                this.type = this.media.getAttribute('data-type');\n                this.embedId = this.media.getAttribute('data-video-id');\n\n                if (utils.is.empty(this.type)) {\n                    this.console.error('Setup failed: embed type missing');\n                    return;\n                }\n\n                if (utils.is.empty(this.embedId)) {\n                    this.console.error('Setup failed: video id missing');\n                    return;\n                }\n\n                // Clean up\n                this.media.removeAttribute('data-type');\n                this.media.removeAttribute('data-video-id');\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.console.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Setup local storage for user settings\n        storage.setup.call(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.console.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        this.elements.container = utils.createElement('div');\n        utils.wrap(this.media, this.elements.container);\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Global listeners\n        listeners.global.call(this);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.console.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * If the player is HTML5\n     */\n    get isHTML5() {\n        return types.html5.includes(this.type);\n    }\n\n    /**\n     * If the player is an embed - e.g. YouTube or Vimeo\n     */\n    get isEmbed() {\n        return types.embed.includes(this.type);\n    }\n\n    /**\n     * Play the media\n     */\n    play() {\n        if ('play' in this.media) {\n            this.media.play();\n        }\n        return this;\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if ('pause' in this.media) {\n            this.media.pause();\n        }\n        return this;\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return this.media.paused;\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return !this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2: true);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return this.media.ended;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} toggle\n     */\n    togglePlay(toggle) {\n        // True toggle if nothing passed\n        if ((!utils.is.boolean(toggle) && this.media.paused) || toggle) {\n            return this.play();\n        }\n\n        return this.pause();\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        return this.restart().pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n        return this;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.console.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return this.media.seeking;\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            ({ volume } = storage.get.call(this));\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + utils.is.number(step) ? step : 1;\n        return this;\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - utils.is.number(step) ? step : 1;\n        return this;\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = storage.get.call(this).muted;\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return this.media.muted;\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            this.media.mozHasAudio ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {decimal} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        } else if (utils.is.number(storage.get.call(this).speed)) {\n            ({ speed } = storage.get.call(this));\n        } else {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.console.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    /**\n     * Set playback quality\n     * Currently YouTube only\n     * @param {string} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        } else if (utils.is.number(storage.get.call(this).quality)) {\n            ({ quality } = storage.get.call(this));\n        } else {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.console.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return this.media.loop;\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || this.type !== 'video') {\n            this.console.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || this.type !== 'video') {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return this.config.autoplay;\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.htmlElement(this.elements.buttons.captions)) {\n            return this;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input)\n            ? input\n            : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.enabled === show) {\n            return this;\n        }\n\n        // Set global\n        this.captions.enabled = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.enabled);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.enabled);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.enabled ? 'captionsenabled' : 'captionsdisabled');\n\n        // Allow chaining\n        return this;\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle fullscreen playback\n     * Requires user input event\n     * @param {event} event\n     */\n    toggleFullscreen(event) {\n        // Check for native support\n        if (fullscreen.enabled) {\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                // If it's a fullscreen change event, update the state\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    fullscreen.cancelFullScreen();\n                }\n\n                return this;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.fullscreen.fallback,\n                this.fullscreen.active\n            );\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (utils.is.htmlElement(this.elements.buttons.fullscreen)) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n\n        return this;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Bail if no support\n        if (!support.airplay) {\n            return this;\n        }\n\n        // Show dialog\n        this.media.webkitShowPlaybackTargetPicker();\n\n        return this;\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return this;\n        }\n\n        // Don't hide if config says not to, it's audio, or not ready or loading\n        if (!this.supported.ui || !this.config.hideControls || this.type === 'audio') {\n            return this;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = ['click', 'mousemove', 'touchmove', 'mouseenter', 'focusin'].includes(toggle.type);\n\n                // Delay hiding on move events\n                if (['mousemove', 'touchmove'].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer every movement\n        window.clearTimeout(this.timers.hover);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.media.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.media.paused || this.loading) {\n                return this;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || !this.media.paused) {\n            this.timers.hover = window.setTimeout(() => {\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n\n        return this;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n        return this;\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n        return this;\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n            this.embedId = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove buttons\n                    if (this.elements.buttons && this.elements.buttons.play) {\n                        Array.from(this.elements.buttons.play).forEach(button => utils.removeElement(button));\n                    }\n\n                    // Remove others\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                const parent = this.elements.container.parentNode;\n\n                if (utils.is.htmlElement(parent)) {\n                    parent.replaceChild(this.elements.original, this.elements.container);\n                }\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (this.type) {\n            case 'youtube':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                this.embed.destroy();\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                this.embed.unload().then(done);\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            case 'video':\n            case 'audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n\nexport default Plyr;\n"],"names":["get","store","window","localStorage","getItem","this","config","storage","key","utils","is","empty","JSON","parse","set","object","support","enabled","call","extend","setItem","stringify","defaults","navigator","language","split","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","instanceof","NodeList","HTMLElement","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","array","nodeList","length","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","callback","querySelectorAll","element","createElement","src","first","getElementsByTagName","function","addEventListener","event","parentNode","insertBefore","id","updateSprite","data","innerHTML","body","childNodes","hasId","container","toggleHidden","setAttribute","cached","content","then","response","ok","text","catch","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","forEach","index","child","cloneNode","parent","sibling","nextSibling","appendChild","type","attributes","setAttributes","textContent","target","htmlElement","removeChild","lastChild","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","value","charAt","class","toggle","contains","classList","removeAttribute","prototype","Element","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","querySelector","controls","getElement","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","console","warn","toggleNativeControls","focused","activeElement","focusable","last","on","keyCode","_this","active","getFocusElement","shiftKey","focus","preventDefault","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","Plyr","dispatchEvent","state","getAttribute","current","max","toFixed","objects","destination","shift","source","property","match","RegExp","$2","number","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","undefined","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","removeItem","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","canPlayType","supported","defineProperty","range","transitionEnd","matchMedia","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","log","toggleClass","toggleState","trapFocus","setup","parseFloat","listeners","getKeyCode","which","handleKey","code","pressed","held","editable","stopPropagation","togglePlay","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","loop","keyboard","global","tabFocus","setTimeout","hideControls","toggleControls","eventType","timeUpdate","durationUpdate","_this2","hasAudio","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","cursor","touch","paused","ended","disableContextMenu","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","_this3","defaultPrevented","toggleMenu","form","showTab","toggleInvert","invertTime","isWebkit","updateRangeFill","updateSeekTooltip","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","uiSupported","isHTML5","removeElement","inject","ready","setTitle","label","i18n","title","isEmbed","iframe","frameTitle","playing","stopped","button","loading","timers","setRange","nodeValue","getPercentage","buffered","end","setProgress","time","format","slice","getHours","parseInt","hours","mins","getMinutes","secs","getSeconds","invert","updateTimeDisplay","seeking","displayDuration","styleSheet","sheet","percentage","styles","rules","findIndex","rule","selectorText","deleteRule","insertRule","iconUrl","indexOf","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","hidden","badge","menu","buttonType","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","suffix","played","toLowerCase","list","checked","item","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","hasClass","setting","tab","tabs","pane","panes","filter","toggleTab","emptyElement","getBadge","createBadge","createMenuItem","getLabel","getLanguage","default","textTracks","getTracks","none","currentTrack","getCurrentTrack","track","disabled","hasTracks","tracks","toUpperCase","unshift","show","isMenuItem","isButton","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","_this4","back","setSpeedMenu","loadSprite","seekTime","create","findElements","labels","_this5","insertAfter","setLanguage","setCaptionsMenu","setCue","mode","activeCues","embed","enableTextTrack","cue","setText","getCueAsHTML","caption","youtube","videoId","parseYouTubeId","embedId","containers","setAspectRatio","generateId","YT","loadScript","urls","onYouTubeReadyCallbacks","push","onYouTubeIframeAPIReady","getVideoData","google","json","result","items","snippet","paddingBottom","player","Player","autoplay","location","hostname","href","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","setVolume","getVideoUrl","getAvailablePlaybackRates","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","vimeo","Vimeo","padding","offset","transform","params","buildUrlParameters","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","getAspectRatio","dimensions","setAutopause","autopause","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","blankVideo","insertElement","attribute","sources","cancelRequests","destroy","firstSource","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","debug","plyr","original","tagName","hasAttribute","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","clearTimeout","mime","soft","done","replaceChild","unload","html5","readyState","targetTime","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"uLAIA,SAISA,QACCC,EAAQC,OAAOC,aAAaC,QAAQC,KAAKC,OAAOC,QAAQC,YAE1DC,EAAMC,GAAGC,MAAMV,MAIZW,KAAKC,MAAMZ,GAItB,SAASa,EAAIC,MAEJC,EAAQT,SAAYF,KAAKC,OAAOC,QAAQU,SAKxCR,EAAMC,GAAGK,OAAOA,QAKfR,EAAUP,EAAIkB,KAAKb,QAGnBc,OAAOZ,EAASQ,UAGfZ,aAAaiB,QAAQf,KAAKC,OAAOC,QAAQC,IAAKI,KAAKS,UAAUd,KCpCxE,IAAMe,YAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,iDAGG,wDAIC,mBACC,SAAU,SAAU,SAAU,QAAS,QAAS,SAAU,QAAS,OAAQ,0BAK7E,mBAOE,WACA,GAAK,IAAM,EAAG,KAAM,IAAK,KAAM,uBAKhC,UACD,uBAKE,QACJ,qBAKE,WACEpB,OAAOqB,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,qBAKD,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAEO,WAAY,UAAW,QAAS,sBAI9B,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,6BAMD,uDAGA,uDAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,wCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,+BACC,kCACH,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,4BACE,qBACH,oBACG,wBACA,wBACA,sBACF,sBACE,uBACD,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,iCAGE,gCACD,6CAGC,oCACC,4CAGC,6BACH,uCAGG,iCACH,iCAEF,gCAKF,OCzTVC,UACM,UAAW,gBACX,QAAS,UCAfjB,uBAGSkB,UACItB,KAAKuB,eAAeD,KAAWE,wBAEnCF,UACItB,KAAKuB,eAAeD,KAAWG,SAAWA,OAAOC,MAAMJ,oBAE3DA,UACItB,KAAKuB,eAAeD,KAAWK,yBAElCL,UACGtB,KAAKuB,eAAeD,KAAWM,2BAEjCN,UACEtB,KAAKuB,eAAeD,KAAWO,yBAEpCP,UACMtB,KAAK8B,gBAAgBR,IAAUS,MAAMC,QAAQV,sBAEhDA,UACEtB,KAAKiC,WAAWX,EAAOzB,OAAOqC,gCAE7BZ,UACDtB,KAAKiC,WAAWX,EAAOzB,OAAOsC,gCAEhCb,UACEtB,KAAKuB,eAAeD,KAAWc,qBAEpCd,UACKtB,KAAKiC,WAAWX,EAAOzB,OAAOwC,qBAErCf,UACOtB,KAAKiC,WAAWX,EAAOzB,OAAOyC,eAAiBtC,KAAKiC,WAAWX,EAAOzB,OAAO0C,wBAElFjB,UAEEtB,KAAKiC,WAAWX,EAAOzB,OAAO2C,aAAgBxC,KAAK8B,gBAAgBR,IAAUtB,KAAKyC,OAAOnB,EAAMoB,gCAGvFpB,UACK,OAAVA,QAAmC,IAAVA,kBAE9BA,UAEEtB,KAAK8B,gBAAgBR,KACnBtB,KAAKyC,OAAOnB,IAAUtB,KAAK2C,MAAMrB,IAAUtB,KAAK4C,SAAStB,MAAYA,EAAMuB,QAC5E7C,KAAKU,OAAOY,KAAWE,OAAOsB,KAAKxB,GAAOuB,4BAGxCvB,EAAOyB,UACPnB,QAAQN,GAASyB,GAAezB,aAAiByB,4BAE7CzB,UACHtB,KAAK8B,gBAAgBR,GAA6B,KAApBA,EAAMyB,kDAOZC,SAASC,sBAC/B,qBAAsBD,SAASE,gBAAgBC,QAAU,OAAOC,KAAKlC,UAAUmC,oBAC/E,kBAAkBD,KAAKlC,UAAUoC,gBACpC,uBAAuBF,KAAKlC,UAAUoC,gCAK1CC,EAAKC,OAERR,SAASS,gCAAgCF,QAASV,YAKhDa,EAAUV,SAASW,cAAc,YAC/BC,IAAML,MAGRM,EAAQb,SAASc,qBAAqB,UAAU,GAGlD1D,EAAMC,GAAG0D,SAASP,MACVQ,iBAAiB,OAAQ,mBAASR,EAAS3C,KAAK,KAAMoD,KAAQ,KAIpEC,WAAWC,aAAaT,EAASG,yBAIhCN,EAAKa,YASHC,EAAaC,QAEbC,UAAYD,WAGRE,KAAKL,aAAanE,KAAMgD,SAASwB,KAAKC,WAAW,OAbzDrE,EAAMC,GAAGoC,OAAOc,QAKfmB,EAAQtE,EAAMC,GAAGoC,OAAO2B,OAYzBM,IAAU1B,SAASS,qBAAqBW,GAAMvB,OAAQ,KAEjD8B,EAAY3B,SAASW,cAAc,YACnCiB,aAAaD,GAAW,GAE1BD,KACUG,aAAa,KAAMT,GAI7BzD,EAAQT,QAAS,KACX4E,EAASjF,OAAOC,aAAaC,QAxB5B,SAwB6CqE,MAC9B,OAAXU,EAEG,KACJR,EAAO/D,KAAKC,MAAMsE,iBACXjE,KAAK8D,EAAWL,EAAKS,gBAMpCxB,GACDyB,KAAK,mBAAaC,EAASC,GAAKD,EAASE,OAAS,OAClDH,KAAK,YACW,OAATG,IAIAxE,EAAQT,gBACDJ,aAAaiB,QA3CrB,SA4CcqD,EACT7D,KAAKS,mBACQmE,OAKRtE,KAAK8D,EAAWQ,MAEhCC,MAAM,qCAKRC,UACGA,MAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,yCAMzB3F,OAAO4F,OAAS5F,OAAO6F,IAChC,MAAOC,UACE,kBAKVC,EAAUC,OAELC,EAAUF,EAAS/C,OAAS+C,GAAYA,SAIxCG,KAAKD,GACNE,UACAC,QAAQ,SAACvC,EAASwC,OACTC,EAAQD,EAAQ,EAAIL,EAAQO,WAAU,GAAQP,EAG9CQ,EAAS3C,EAAQQ,WACjBoC,EAAU5C,EAAQ6C,cAIlBC,YAAY9C,GAKd4C,IACOnC,aAAagC,EAAOG,KAEpBE,YAAYL,6BAMrBM,EAAMC,EAAYvB,OAEtBzB,EAAUV,SAASW,cAAc8C,UAGnCrG,EAAMC,GAAGK,OAAOgG,MACVC,cAAcjD,EAASgD,GAI7BtG,EAAMC,GAAGoC,OAAO0C,OACRyB,YAAczB,GAInBzB,wBAICA,EAASmD,KACV3C,WAAWC,aAAaT,EAASmD,EAAON,qCAIrCE,EAAMJ,EAAQK,EAAYvB,KAE7BqB,YAAYpG,EAAMuD,cAAc8C,EAAMC,EAAYvB,4BAI/CzB,UACLtD,EAAMC,GAAGyG,YAAYpD,IAAatD,EAAMC,GAAGyG,YAAYpD,EAAQQ,eAI5DA,WAAW6C,YAAYrD,GAExBA,GALI,4BASFA,WACHb,EAAWa,EAAQe,WAAnB5B,OAECA,EAAS,KACJkE,YAAYrD,EAAQsD,cAClB,0BAKJtD,EAASgD,UACZ5D,KAAK4D,GAAYT,QAAQ,cACpBpB,aAAa1E,EAAKuG,EAAWvG,0CAKnB8G,EAAKC,OAMtB9G,EAAMC,GAAGoC,OAAOwE,IAAQ7G,EAAMC,GAAGC,MAAM2G,gBAItCP,KACAS,EAAWD,WAEb9F,MAAM,KAAK6E,QAAQ,gBAEbmB,EAAWC,EAAEC,OACbC,EAAYH,EAASI,QAAQ,IAAK,IAIlCC,EAHWL,EAASI,QAAQ,SAAU,IAGrBpG,MAAM,KACvBjB,EAAMsH,EAAM,GACZC,EAAQD,EAAM5E,OAAS,EAAI4E,EAAM,GAAGD,QAAQ,QAAS,IAAM,UAGnDJ,EAASO,OAAO,QAGrB,IAEGvH,EAAMC,GAAGK,OAAOyG,IAAa/G,EAAMC,GAAGoC,OAAO0E,EAASS,WAC7CA,WAAaL,KAGfK,MAAQL,YAGlB,MAEUnD,GAAKgD,EAASI,QAAQ,IAAK,cAGrC,MAEUrH,GAAOuH,KASvBhB,wBAIChD,EAAS6D,EAAWM,MACxBzH,EAAMC,GAAGyG,YAAYpD,GAAU,KACzBoE,EAAWpE,EAAQqE,UAAUD,SAASP,YAEpCQ,UAAUF,EAAS,MAAQ,UAAUN,GAErCM,IAAWC,IAAeD,GAAUC,SAGzC,wBAIFpE,EAAS6D,UACPnH,EAAMC,GAAGyG,YAAYpD,IAAYA,EAAQqE,UAAUD,SAASP,0BAI1D7D,EAASmE,GACbzH,EAAMC,GAAGyG,YAAYpD,KAItBmE,IACQhD,aAAa,SAAU,MAEvBmD,gBAAgB,6BAKxBtE,EAAS0D,OACPa,GAAcC,iBAMdC,EACFF,EAAUE,SACVF,EAAUG,uBACVH,EAAUI,oBACVJ,EAAUK,qCAPHvG,MAAMgE,KAAK/C,SAASS,iBAAiB2D,IAAWmB,SAASvI,cAU7DmI,EAAQtH,KAAK6C,EAAS0D,yBAIrBA,UACDpH,KAAK4F,SAASjB,UAAUlB,iBAAiB2D,wBAIzCA,UACApH,KAAK4F,SAASjB,UAAU6D,cAAcpB,4CAOpCxB,SAAS6C,SAAWrI,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUF,SAAS5C,cAG/ED,SAASgD,cACJxI,EAAMyI,YAAYhI,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQE,YAC1D1I,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQG,eACxD3I,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQI,gBAC3D5I,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQK,gBACzD7I,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQM,cAC7D9I,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQO,UAC3D/I,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQQ,aACtDhJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQS,kBACzDjJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQU,mBAC1DlJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQW,qBACxDnJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUC,QAAQY,kBAIrE5D,SAAS6D,SAAWrJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUc,eAGtE7D,SAAS8D,aACJtJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUe,OAAOC,aACvDvJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUe,OAAOE,cAIhEhE,SAASiE,gBACFzJ,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUkB,QAAQC,iBACxD1J,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUkB,QAAQE,sBACvD3J,EAAMsI,WAAW7H,KAAKb,KAAMA,KAAKC,OAAO0I,UAAUkB,QAAQG,cAIvE5J,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS6D,iBAC9B7D,SAASiE,QAAQI,YAAcjK,KAAK4F,SAAS6D,SAASjB,kBACnDxI,KAAKC,OAAOiK,WAAWC,WAI5B,EACT,MAAOC,eAEAC,QAAQC,KAAK,kEAAmEF,QAGhFG,sBAAqB,IAEnB,mCAMPC,EAAUxH,SAASyH,uBAElBD,GAAWA,IAAYxH,SAASwB,KAGvBxB,SAASwF,cAAc,UAFvB,sCAURkC,EAAYtK,EAAMyI,YAAYhI,KAAKb,KAAM,2DACzC6D,EAAQ6G,EAAU,GAClBC,EAAOD,EAAUA,EAAU7H,OAAS,KAEpC+H,GACF5K,KAAK4F,SAASjB,UACd,UACA,eAEsB,QAAdV,EAAM9D,KAAmC,IAAlB8D,EAAM4G,SAAkBC,EAAKtB,WAAWuB,YAK7DP,EAAUpK,EAAM4K,kBAElBR,IAAYG,GAAS1G,EAAMgH,SAIpBT,IAAY3G,GAASI,EAAMgH,aAE7BC,UACCC,qBALAD,UACAC,qBAOd,4BAKOvF,EAAU3B,EAAOT,EAAUqE,EAAQuD,EAASC,OAEnDjL,EAAMC,GAAGyB,gBAAgB8D,MAKzBxF,EAAMC,GAAGuC,SAASgD,SAEZG,KAAKH,GAAUK,QAAQ,YACrBvC,aAAmB4H,QACbC,eAAe1K,KAAK,KAAM6C,EAASO,EAAOT,EAAUqE,EAAQuD,EAASC,cAQjFG,EAASvH,EAAM7C,MAAM,KAIvBqK,IAAUrL,EAAMC,GAAGqL,QAAQL,IAAWA,EAGtC1K,EAAQgL,+BAGKvL,EAAMC,GAAGqL,QAAQN,IAAWA,YAE5BhL,EAAMC,GAAGqL,QAAQL,IAAWA,MAKtCpF,QAAQ,cACF4B,EAAS,mBAAqB,uBAAuBpB,EAAMjD,EAAUiI,mBAKnF/H,EAAS8H,EAAQhI,EAAU4H,EAASC,KAC7BE,eAAe7H,EAAS8H,EAAQhI,GAAU,EAAM4H,EAASC,iBAI/D3H,EAAS8H,EAAQhI,EAAU4H,EAASC,KAC9BE,eAAe7H,EAAS8H,EAAQhI,GAAU,EAAO4H,EAASC,2BAItD3H,EAAS+C,EAAMmF,EAASC,MAE7BnI,GAAY+C,OAKXxC,EAAQ,IAAI6H,YAAYrF,aACjBrG,EAAMC,GAAGqL,QAAQE,IAAWA,SAC7BpK,OAAOuK,UAAWF,QAChB7L,gBAAgBgM,KAAOhM,KAAO,WAKpCiM,cAAchI,0BAKdP,EAASpC,MAEZlB,EAAMC,GAAGyG,YAAYpD,QAKpBwI,EAAQ9L,EAAMC,GAAGqL,QAAQpK,GAASA,GAASoC,EAAQyI,aAAa,kBAG9DtH,aAAa,eAAgBqH,4BAI3BE,EAASC,UACH,IAAZD,GAAyB,IAARC,GAAa5K,OAAOC,MAAM0K,IAAY3K,OAAOC,MAAM2K,GAC7D,GAEHD,EAAUC,EAAM,KAAKC,QAAQ,iDAM/BC,6CACE1J,EAAW0J,EAAX1J,WAGHA,SACM,QAII,IAAXA,SACO0J,EAAQ,OAIfC,EAAczK,MAAMkG,UAAUwE,MAAM5L,KAAK0L,UACxCnM,EAAMC,GAAGK,OAAO8L,aAKbvG,QAAQ,YACP7F,EAAMC,GAAGK,OAAOgM,WAId5J,KAAK4J,GAAQzG,QAAQ,YACpByG,EAAOC,IAAaD,EAAOC,GAAU5J,aAAe2J,EAAOC,GAAU5J,cAAgBvB,UACzEmL,GAAYH,EAAYG,SAC9B7L,OAAO0L,EAAYG,GAAWD,EAAOC,OAE/BA,GAAYD,EAAOC,OAKpCH,2BAIIjJ,UAEJA,EAAIqJ,MADG,gEACYC,OAAOC,GAAKvJ,yBAI7BA,MACLnD,EAAMC,GAAG0M,OAAOtL,OAAO8B,WAChBA,SAIJA,EAAIqJ,MADG,mCACYC,OAAOC,GAAKvJ,+BAIvBjC,UACVlB,EAAMC,GAAGK,OAAOY,GAIdE,OAAOsB,KAAKxB,GACd0L,IAAI,mBAAUC,mBAAmB9M,OAAQ8M,mBAAmB3L,EAAMnB,MAClE+M,KAAK,KALC,uBASLR,OACAS,EAAWnK,SAASoK,yBACpB1J,EAAUV,SAASW,cAAc,gBAC9B6C,YAAY9C,KACba,UAAYmI,EACbS,EAASE,WAAWC,mCAIhBC,EAAOC,OAEZC,EADW,SAAXC,EAAYC,EAAGC,UAAa,IAANA,EAAUD,EAAID,EAASE,EAAGD,EAAIC,GAC5CF,CAASH,EAAOC,UACpBD,EAAQE,MAASD,EAASC,iBAIxB,eACN/J,EAAUV,SAASW,cAAc,QASjC8C,EAAOjF,OAAOsB,uBANE,oCACH,4BACF,2CACD,kBAGiB+K,KAAK,wBAAkCC,IAAzBpK,EAAQP,MAAMc,WAEtC,iBAATwC,GAAoBA,EAZtB,IC7oBd9F,SAEK,gBAAiBqC,SAASW,cAAc,eACxC,gBAAiBX,SAASW,cAAc,wBAIzC8C,EAAMsH,OACJC,GAAM,EACNC,GAAK,EACHC,EAAU9N,EAAM+N,aAChBC,EAAcF,EAAQG,UAAYN,GAAUpN,EAAQoN,cAElDtH,OACC,aACK9F,EAAQ2N,QACF3N,EAAQ4N,cAAgBL,EAAQG,UAAYD,aAGvD,aACKzN,EAAQ6N,QACF7N,EAAQ4N,qBAGnB,aACK,IACD5N,EAAQ4N,cAAgBL,EAAQG,UAAYD,aAGhD,WACK,IACDzN,EAAQ4N,aAAeL,EAAQG,4BAI9B1N,EAAQ6N,OAAS7N,EAAQ2N,QACnB3N,EAAQ4N,uCAWtB,gBACA,iBAAkB1O,eACb,oBAOAC,aAAaiB,QAFX,UAAA,kBAGFjB,aAAa2O,WAHX,YAIF,EACT,MAAO9I,UACE,GAbL,QAoBUvF,EAAM+N,aACNE,UAAYjO,EAAMC,GAAG0D,SAAS3D,EAAMuD,cAAc,SAAS+K,mCAKtEtO,EAAMC,GAAG0D,SAASlE,OAAO8O,8CAI1B,gBAAiB3L,SAASW,cAAc,uBAK3C8C,OACOmI,EAAU5O,KAAV4O,cAICxO,EAAMC,GAAG0D,SAAS6K,EAAMC,oBAClB,KAIO,UAAd7O,KAAKyG,YACGA,OACC,oBACMmI,EAAMC,YAAY,oCAAoCrH,QAAQ,KAAM,QAE1E,mBACMoH,EAAMC,YAAY,8CAA8CrH,QAAQ,KAAM,QAEpF,mBACMoH,EAAMC,YAAY,8BAA8BrH,QAAQ,KAAM,mBAG9D,OAEZ,GAAkB,UAAdxH,KAAKyG,YACJA,OACC,oBACMmI,EAAMC,YAAY,eAAerH,QAAQ,KAAM,QAErD,mBACMoH,EAAMC,YAAY,8BAA8BrH,QAAQ,KAAM,QAEpE,mBACMoH,EAAMC,YAAY,yBAAyBrH,QAAQ,KAAM,mBAGzD,GAGrB,MAAO7B,UACE,SAIJ,cAIC,eAAgB3C,SAASW,cAAc,0BAKhC,eAEXmL,GAAY,UAENrD,EAAUjK,OAAOuN,kBAAmB,oCAEtB,EACL,eAGR/K,iBAAiB,OAAQ,KAAMyH,GACxC,MAAO9F,WAIFmJ,EAfQ,cAmBN,eACHE,EAAQhM,SAASW,cAAc,kBAC/B8C,KAAO,QACS,UAAfuI,EAAMvI,KAHJ,SAQN,iBAAkBzD,SAASE,6BAGG,IAAxB9C,EAAM6O,4BAIJ,eAAgBpP,QAAUA,OAAOqP,WAAW,4BAA4B/G,SCzKrF9C,EAAU,eACRqC,GAAQ,SAERtH,EAAMC,GAAG0D,SAASf,SAASmM,oBACnB,IAGP,SAAU,IAAK,MAAO,KAAM,SAASC,KAAK,mBACnChP,EAAMC,GAAG0D,SAASf,SAAYqM,0BACtBA,GACD,MACAjP,EAAMC,GAAG0D,SAASf,SAASsM,oBAAqBtM,SAASuM,yBAExD,MACD,KAOZ7H,EArBK,GAyBV8B,oBAMExG,SAASwM,mBACTxM,SAASyM,yBACTzM,SAAS0M,sBACT1M,SAASuM,8BAIS,OAAXlK,EAAkB,qBAA0BA,2CAG1C3B,OACJ8F,EAAW5I,eACL,MAGLiG,EAASzG,EAAMC,GAAGyB,gBAAgB4B,GAAWV,SAASwB,KAAOd,SAE3D2B,OACC,UACMrC,SAAS2M,oBAAsB9I,MAErC,aACM7D,SAAS4M,uBAAyB/I,iBAGlC7D,SAAYqC,yBAA+BwB,+BAK5CnD,OACT8F,EAAW5I,eACL,MAGLiG,EAASzG,EAAMC,GAAGyB,gBAAgB4B,GAAWV,SAASwB,KAAOd,SAE3D2B,EAAOxC,OAETgE,EAAOxB,GAAqB,OAAXA,EAAkB,oBAAsB,wBADzDwB,EAAOgJ,yDAMRrG,EAAW5I,UAIRyE,EAAOxC,OAETG,SAASqC,GAAqB,OAAXA,EAAkB,iBAAmB,uBADxDrC,SAASmM,+CAMV3F,EAAW5I,QAIRyE,EAAOxC,OAAsCG,SAAYqC,uBAAzCrC,SAAS2M,kBAHtB,0BAQN3P,KAAK8O,UAAUb,IAAoB,UAAdjO,KAAKyG,MAAqBzG,KAAKC,OAAOuJ,WAAW5I,aAKrEkP,EAAgBtG,EAAW5I,QAE7BkP,GAAkB9P,KAAKC,OAAOuJ,WAAWuG,WAAa3P,EAAM4P,gBACvD3F,QAAQ4F,KAAOH,EAAgB,SAAW,qCAGzCI,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWV,WAAW5I,SAAS,SAEjFyJ,QAAQ4F,IAAI,kDAIjBjQ,KAAK4F,SAASgD,SAAW5I,KAAK4F,SAASgD,QAAQY,cACzC2G,YAAYnQ,KAAK4F,SAASgD,QAAQY,YAAY,KAIlD4G,UAAUvP,KAAKb,YLlDZqQ,MAjCjB,eACQ3I,EAAQ,KACRxH,YAGCS,EAAQT,SAAYF,KAAKC,OAAOC,QAAQU,gBAMtCd,aAAa2O,WAAW,kBAGvB5O,OAAOC,aAAaC,QAAQC,KAAKC,OAAOC,QAAQC,QAI7C,gBAAgBiD,KAAKsE,aAKhB4I,WAAW5I,OAIbnH,KAAKC,MAAMkH,IAGlBxH,GAxBIA,GA2BSO,MAAKd,OM9DvBuO,EAAU9N,EAAM+N,aAEhBoC,gCAGM5F,EAAO,KAGL6F,EAAa,mBAAUvM,EAAM4G,QAAU5G,EAAM4G,QAAU5G,EAAMwM,OAG7DC,EAAY,gBACRC,EAAOH,EAAWvM,GAClB2M,EAAyB,YAAf3M,EAAMwC,KAChBoK,EAAOD,GAAWD,IAAShG,KAI5BvK,EAAMC,GAAG0M,OAAO4D,OAYjBC,EAAS,KAEHzF,GACF,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAMEX,EAAUpK,EAAM4K,qBAClB5K,EAAMC,GAAGyG,YAAY0D,IAAYpK,EAAM+H,QAAQqC,EAASM,EAAK7K,OAAO0I,UAAUmI,wBAK9E3F,EAAe5C,SAASoI,OAClBxF,mBACA4F,mBAGFJ,QACC,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,GAEIE,MAzDR7G,YAAcc,EAAKf,SAAW,IAAM4G,EAAO,gBA8DvC,QACA,GAEIE,KACIG,wBAIR,KAEIC,eAAe,eAGnB,KAEIC,eAAe,eAGnB,GAEIL,MACIM,OAASrG,EAAKqG,kBAItB,KAEIjI,qBAGJ,KAEID,oBAGJ,KAEImI,8BAGJ,GAEIP,KACIQ,4BAIR,KAEIC,MAAQxG,EAAKwG,MAqBrB9H,EAAW5I,SAAWkK,EAAKtB,WAAWuB,QAAmB,KAAT4F,KAC5CS,qBAIFT,SAEA,OAKX3Q,KAAKC,OAAOsR,SAASC,SACf5G,GAAG/K,OAAQ,gBAAiB6Q,GAAW,GACtC1Q,KAAKC,OAAOsR,SAAS/G,WACtBI,GAAG5K,KAAK4F,SAASjB,UAAW,gBAAiB+L,GAAW,KAK5D9F,GAAG5K,KAAK4F,SAASjB,UAAW,WAAY,cACpCuL,YAAYjM,EAAM4C,OAAQiE,EAAK7K,OAAOiK,WAAWuH,UAAU,OAI/D7G,GAAG5K,KAAK4F,SAASjB,UAAW,UAAW,YACnB,IAAlBV,EAAM4G,gBAMH6G,WAAW,aACRxB,YAAY9P,EAAM4K,kBAAmBF,EAAK7K,OAAOiK,WAAWuH,UAAU,IAC7E,KAIHzR,KAAKC,OAAO0R,gBAEN/G,GACF5K,KAAK4F,SAASjB,UACd,iFACA,cACSiN,eAAe3N,KAM5BuF,EAAW5I,WACLgK,GAAG5H,SAAUwG,EAAWqI,UAAW,cAChCT,iBAAiBnN,uCAQxB2G,GAAG5K,KAAK4O,MAAO,qBAAsB,mBAASX,EAAG6D,WAAWjR,OAAWoD,OAGvE2G,GAAG5K,KAAK4O,MAAO,gCAAiC,mBAASX,EAAG8D,eAAelR,OAAWoD,OAItF2G,GAAG5K,KAAK4O,MAAO,aAAc,aACzBhK,aAAaoN,EAAKpM,SAASgE,QAASoI,EAAKC,YACzCrN,aAAaoN,EAAKpM,SAASgD,QAAQO,MAAO6I,EAAKC,cAInDrH,GAAG5K,KAAK4O,MAAO,QAAS,WAER,UAAdoD,EAAKvL,MAAoBuL,EAAK/R,OAAOiS,oBAEhClJ,YAGA4F,MAAMuD,YAKbvH,GAAG5K,KAAK4O,MAAO,mBAAoB,mBAASX,EAAGmE,eAAevR,OAAWoD,OAGzE2G,GAAG5K,KAAK4O,MAAO,eAAgB,mBAASX,EAAGoE,aAAaxR,OAAWoD,OAGnE2G,GAAG5K,KAAK4O,MAAO,2BAA4B,mBAASX,EAAGqE,aAAazR,OAAWoD,OAG/E2G,GAAG5K,KAAK4O,MAAO,yCAA0C,mBAASX,EAAGsE,aAAa1R,OAAWoD,KAG/FjE,KAAK8O,UAAUb,IAAMjO,KAAKC,OAAOuS,aAA6B,UAAdxS,KAAKyG,KAAkB,KAEjEZ,EAAUzF,EAAMsI,WAAW7H,KAAKb,SAAUA,KAAKC,OAAOiK,WAAWoE,WAGlEzI,WAKG1C,MAAMsP,OAAS,YAGjB7H,GAAG/E,EAAS,QAAS,WAEnBmM,EAAK/R,OAAO0R,cAAgBhR,EAAQ+R,QAAUV,EAAKW,SAInDX,EAAKW,SACA7J,OACEkJ,EAAKY,SACP5J,YACAF,UAEAC,WAMb/I,KAAKC,OAAO4S,sBACNjI,GACF5K,KAAK4O,MACL,cACA,cACUzD,mBAEV,KAKFP,GAAG5K,KAAK4O,MAAO,aAAc,aAEtBkE,cAAcjS,OAAW,WAG1BJ,IAAII,QAAakS,MAAOf,EAAKe,YAInCnI,GAAG5K,KAAK4O,MAAO,gBAAiB,aAEzBkE,cAAcjS,OAAW,aAG1BJ,IAAII,QAAamS,QAAShB,EAAKgB,cAIrCpI,GAAG5K,KAAK4O,MAAO,iBAAkB,aAE3BnO,IAAII,QAAaM,SAAU6Q,EAAK7Q,eAItCyJ,GAAG5K,KAAK4O,MAAO,eAAgB,aAEzBnO,IAAII,QAAa+I,OAAQoI,EAAKpI,OAAQuH,MAAOa,EAAKb,YAIxDvG,GAAG5K,KAAK4O,MAAO,mCAAoC,aAE5CkE,cAAcjS,OAAW,cAG1BJ,IAAII,QAAa0I,SAAUyI,EAAKzI,SAAS3I,cAK/CgK,GAAG5K,KAAK4O,MAAO5O,KAAKC,OAAOuL,OAAOyH,QAAQ,QAAS,YAAY/F,KAAK,KAAM,gBACxErB,KAGe,UAAf5H,EAAMwC,SACGuL,EAAKpD,MAAMxE,SAGlB6B,cAAcpL,OAAWmR,EAAKpM,SAASjB,UAAWV,EAAMwC,MAAM,EAAMoF,qCAOxEqH,EAAahF,EAAQiF,KAAO,SAAW,QAGvCC,EAAQ,SAACnP,EAAOoP,EAAYC,OACxBC,EAAgBC,EAAKvT,OAAOsQ,UAAU8C,GAGxCjT,EAAMC,GAAG0D,SAASwP,MACJ1S,OAAWoD,IAIxBA,EAAMwP,kBAAoBrT,EAAMC,GAAG0D,SAASuP,MAC9BzS,OAAWoD,MAK5B2G,GAAG5K,KAAK4F,SAASgD,QAAQE,KAAM,QAAS,mBAC1CsK,EAAMnP,EAAO,OAAQ,aACZ+M,mBAKPpG,GAAG5K,KAAK4F,SAASgD,QAAQI,QAAS,QAAS,mBAC7CoK,EAAMnP,EAAO,UAAW,aACf+E,gBAKP4B,GAAG5K,KAAK4F,SAASgD,QAAQK,OAAQ,QAAS,mBAC5CmK,EAAMnP,EAAO,SAAU,aACdgF,eAKP2B,GAAG5K,KAAK4F,SAASgD,QAAQM,QAAS,QAAS,mBAC7CkK,EAAMnP,EAAO,UAAW,aACfiF,gBAKP0B,GAAG5K,KAAK4F,SAASgD,QAAQO,KAAM,QAAS,mBAC1CiK,EAAMnP,EAAO,OAAQ,aACZkN,OAASqC,EAAKrC,YAKrBvG,GAAG5K,KAAK4F,SAASgD,QAAQW,SAAU,QAAS,mBAC9C6J,EAAMnP,EAAO,WAAY,aAChBoN,uBAKPzG,GAAG5K,KAAK4F,SAASgD,QAAQY,WAAY,QAAS,mBAChD4J,EAAMnP,EAAO,aAAc,aAClBmN,yBAKPxG,GAAG5K,KAAK4F,SAASgD,QAAQQ,IAAK,QAAS,mBACzCgK,EAAMnP,EAAO,MAAO,aACXmF,IAAM,eAKbwB,GAAG5K,KAAK4F,SAASgD,QAAQS,QAAS,QAAS,mBAC7C+J,EAAMnP,EAAO,UAAW,aACfoF,gBAKPuB,GAAG5K,KAAK4F,SAASgD,QAAQU,SAAU,QAAS,cACrCoK,WAAW7S,OAAWoD,OAI7B2G,GAAG5H,SAASE,gBAAiB,QAAS,cAC/BwQ,WAAW7S,OAAWoD,OAI7B2G,GAAG5K,KAAK4F,SAAS0D,SAASqK,KAAM,QAAS,cACrC5C,kBAGF3Q,EAAM+H,QAAQlE,EAAM4C,OAAQ2M,EAAKvT,OAAO0I,UAAUe,OAAOvI,YACnD8C,EAAO,WAAY,aAChB9C,SAAW8C,EAAM4C,OAAOa,QAE1BtH,EAAM+H,QAAQlE,EAAM4C,OAAQ2M,EAAKvT,OAAO0I,UAAUe,OAAOsJ,WAC1D/O,EAAO,UAAW,aACf+O,QAAU/O,EAAM4C,OAAOa,QAEzBtH,EAAM+H,QAAQlE,EAAM4C,OAAQ2M,EAAKvT,OAAO0I,UAAUe,OAAOqJ,SAC1D9O,EAAO,QAAS,aACb8O,MAAQzC,WAAWrM,EAAM4C,OAAOa,WAGhCkM,QAAQ/S,OAAWoD,OAK9B2G,GAAG5K,KAAK4F,SAAS8D,OAAOC,KAAMuJ,EAAY,mBAC5CE,EAAMnP,EAAO,OAAQ,aACZ+F,YAAc/F,EAAM4C,OAAOa,MAAQzD,EAAM4C,OAAOwF,IAAMmH,EAAKzJ,aAMpE/J,KAAKC,OAAO4T,eAAiBzT,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASiE,QAAQE,aAClEa,GAAG5K,KAAK4F,SAASiE,QAAQG,YAAa,QAAS,WAExB,IAArBwJ,EAAKxJ,gBAIJ/J,OAAO6T,YAAcN,EAAKvT,OAAO6T,aACnChC,WAAWjR,aAKhB+J,GAAG5K,KAAK4F,SAAS8D,OAAOE,OAAQsJ,EAAY,mBAC9CE,EAAMnP,EAAO,SAAU,aACd2F,OAAS3F,EAAM4C,OAAOa,UAK/BwG,EAAQ6F,YACFnJ,GAAGxK,EAAMyI,YAAYhI,KAAKb,KAAM,uBAAwB,QAAS,cAC1DgU,gBAAgBnT,OAAWoD,EAAM4C,YAK5C+D,GAAG5K,KAAK4F,SAAS6D,SAAU,kCAAmC,mBAChEhB,EAASwL,kBAAkBpT,OAAWoD,KAItCjE,KAAKC,OAAO0R,iBAEN/G,GAAG5K,KAAK4F,SAAS6C,SAAU,wBAAyB,cACjD7C,SAAS6C,SAASyL,MAAuB,eAAfjQ,EAAMwC,SAInCmE,GAAG5K,KAAK4F,SAAS6C,SAAU,oDAAqD,cAC7E7C,SAAS6C,SAASmI,SAAW,YAAa,cAAcrI,SAAStE,EAAMwC,UAK1EmE,GACF5K,KAAK4F,SAAS6C,SACd,mBACA,cACSmJ,eAAe3N,KAExB,MAKF2G,GACF5K,KAAK4F,SAAS8D,OAAOE,OACrB,QACA,mBACIwJ,EAAMnP,EAAO,SAAU,eAGbkQ,EAAWlQ,EAAMmQ,kCAEnBC,EAAY,GAGZpQ,EAAMqQ,OAAS,GAAKrQ,EAAMsQ,OAAS,KAC/BJ,KACKjD,eANA,QAOQ,MAERD,eATA,OAUO,KAKhBhN,EAAMqQ,OAAS,GAAKrQ,EAAMsQ,OAAS,KAC/BJ,KACKlD,eAjBA,OAkBO,MAEPC,eApBA,QAqBQ,KAKF,IAAdmD,GAAmBb,EAAK5E,MAAMhF,OAAS,IAAsB,IAAfyK,GAAoBb,EAAK5E,MAAMhF,OAAS,MACjFuB,qBAGlB,KCzjBN8C,6BAEQiC,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAO0I,UAAUhE,UAAU6C,QAAQ,IAAK,KAAK,KACvF0I,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWsK,YAAaxU,KAAK8O,UAAUb,8FAKhFjO,KAAKyU,aACV7F,MAAM/J,aAAa,WAAY,SAE/B+J,MAAM5G,gBAAgB,mCAQrB4G,MAAM/N,KAAKb,OAGhBA,KAAK8O,UAAUb,eACX5D,QAAQC,+BAA+BtK,KAAKyG,QAG3CiO,cAAc7T,KAAKb,KAAM,cAGzB0U,cAAc7T,KAAKb,KAAM,uBAG5BuK,qBAAqB1J,KAAKb,MAAM,GAOlCI,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS6C,cAE3BkM,OAAO9T,KAAKb,QAGXyI,SAAS5H,KAAKb,OAIvBI,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS6C,cAKrC8B,qBAAqB1J,KAAKb,QAGlBqQ,MAAMxP,KAAKb,QAGbqQ,MAAMxP,KAAKb,WAGf4J,OAAS,UAGTuH,MAAQ,UAGR4B,MAAQ,UAGRzB,KAAO,UAGP7F,QAAQuH,aAGVlB,WAAWjR,KAAKb,QAGhBsS,aAAazR,KAAKb,WAGhB4U,OAAQ,IAGP3I,cAAcpL,KAAKb,KAAMA,KAAK4O,MAAO,WAGxCiG,SAAShU,KAAKb,gCAMb8U,EAAQ9U,KAAKC,OAAO8U,KAAKjM,QAGzB1I,EAAMC,GAAGoC,OAAOzC,KAAKC,OAAO+U,SAAW5U,EAAMC,GAAGC,MAAMN,KAAKC,OAAO+U,iBACpDhV,KAAKC,OAAO+U,WAGrBpP,SAASjB,UAAUE,aAAa,aAAc7E,KAAKC,OAAO+U,QAI/D5U,EAAMC,GAAGuC,SAAS5C,KAAK4F,SAASgD,QAAQE,aAClC/C,KAAK/F,KAAK4F,SAASgD,QAAQE,MAAM7C,QAAQ,cACpCpB,aAAa,aAAciQ,KAMtC9U,KAAKiV,QAAS,KACRC,EAAS9U,EAAMsI,WAAW7H,KAAKb,KAAM,cAEtCI,EAAMC,GAAGyG,YAAYoO,cAKpBF,EAAS5U,EAAMC,GAAGC,MAAMN,KAAKC,OAAO+U,OAA6B,QAApBhV,KAAKC,OAAO+U,QAExDnQ,aAAa,QAAS7E,KAAKC,OAAO8U,KAAKI,WAAW3N,QAAQ,UAAWwN,2CAO1E9E,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWkL,QAASpV,KAAKoV,WAC1ElF,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWmL,QAASrV,KAAK2S,QAG5EvS,EAAMC,GAAGsC,MAAM3C,KAAK4F,SAASgD,QAAQE,aAC/B/C,KAAK/F,KAAK4F,SAASgD,QAAQE,MAAM7C,QAAQ,mBAAU7F,EAAM+P,YAAYmF,EAAQxK,EAAKsK,gBAIvFxD,gBAAgB5R,KAAKoV,gCAIjBnR,mBACJsR,SAAW,UAAW,WAAWhN,SAAStE,EAAMwC,mBAGxCzG,KAAKwV,OAAOD,cAGpBC,OAAOD,QAAU7D,WAAW,aAEvBxB,YAAY8B,EAAKpM,SAASjB,UAAWqN,EAAK/R,OAAOiK,WAAWqL,QAASvD,EAAKuD,WAG3E3D,eAAeI,EAAKuD,UAC1BvV,KAAKuV,QAAU,IAAM,4BAKnBvV,KAAK8O,UAAUb,KAKhB7N,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS8D,OAAOE,WACvC6L,SAAS5U,KAAKb,KAAMA,KAAK4F,SAAS8D,OAAOE,OAAQ5J,KAAKmR,MAAQ,EAAInR,KAAK4J,QAI1ExJ,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASgD,QAAQO,SACrCgH,YAAYnQ,KAAK4F,SAASgD,QAAQO,KAAMnJ,KAAKmR,OAAyB,IAAhBnR,KAAK4J,4BAKhE/C,OAAQa,yDAAQ,EAChBtH,EAAMC,GAAGyG,YAAYD,OAKnBa,MAAQA,IAGNsM,gBAAgBnT,KAAKb,KAAM6G,0BAI5BA,EAAQvF,OACVoG,EAAQtH,EAAMC,GAAG0M,OAAOzL,GAASA,EAAQ,EACzCmI,EAAWrJ,EAAMC,GAAGyG,YAAYD,GAAUA,EAAS7G,KAAK4F,SAASiE,QAAQC,UAG3E1J,EAAMC,GAAGyG,YAAY2C,GAAW,GACvB/B,MAAQA,MAGXoN,EAAQrL,EAAS3F,qBAAqB,QAAQ,GAChD1D,EAAMC,GAAGyG,YAAYgO,OACfrQ,WAAW,GAAGiR,UAAYhO,6BAM7BzD,iBACNjE,KAAK8O,UAAUb,IAAO7N,EAAMC,GAAG4D,MAAMA,QAItCyD,EAAQ,KAERzD,SACQA,EAAMwC,UAEL,iBACA,YACOrG,EAAMuV,cAAc3V,KAAKgK,YAAahK,KAAK+J,UAGhC,eAAf9F,EAAMwC,QACHgP,SAAS5U,KAAKb,KAAMA,KAAK4F,SAAS8D,OAAOC,KAAMjC,aAMrD,cACA,aACQ,eACGkO,EAAapC,EAAK5E,MAAlBgH,gBAEJA,GAAYA,EAAS/S,OAEdzC,EAAMuV,cAAcC,EAASC,IAAI,GAAIrC,EAAKzJ,UAC1C3J,EAAMC,GAAG0M,OAAO6I,GAEL,IAAXA,EAGJ,EAXF,KAcNE,YAAYjV,KAAKb,KAAMA,KAAK4F,SAASiE,QAAQC,OAAQpC,uCAWtDb,yDAAS,KAAMkP,yDAAO,EAAG5B,6DAElC/T,EAAMC,GAAGyG,YAAYD,IAAYzG,EAAMC,GAAG0M,OAAOgJ,QAKhDC,EAAS,uBAAatO,GAAQuO,OAAO,IAGrCC,EAAW,mBAASC,SAAUzO,EAAQ,GAAK,GAAM,GAAI,KAKvD0O,EAAQF,EAASH,GACfM,EALa,mBAASF,SAAUzO,EAAQ,GAAM,GAAI,IAK3C4O,CAAWP,GAClBQ,EALa,mBAASJ,SAASzO,EAAQ,GAAI,IAKpC8O,CAAWT,GAGpBG,EAASlW,KAAK+J,UAAY,WAGlB,KAKLnD,aAAiBuN,EAAW,IAAM,IAAKiC,EAAQJ,EAAOK,OAASL,EAAOO,yBAItEtS,OAEDwS,GAAUrW,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASiE,QAAQE,WAAa/J,KAAKC,OAAO6T,aAGjF4C,kBAAkB7V,KACjBb,KACAA,KAAK4F,SAASiE,QAAQG,YACtByM,EAASzW,KAAK+J,SAAW/J,KAAKgK,YAAchK,KAAKgK,YACjDyM,GAIAxS,GAAwB,eAAfA,EAAMwC,MAAyBzG,KAAK4O,MAAM+H,WAKpDvE,eAAevR,KAAKb,KAAMiE,8BAKxBjE,KAAK8O,UAAUb,MAKf7N,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASiE,QAAQE,WAAa/J,KAAKC,OAAO2W,iBAAmB5W,KAAK2S,UAC1F+D,kBAAkB7V,KAAKb,KAAMA,KAAK4F,SAASiE,QAAQG,YAAahK,KAAK+J,UAIxE3J,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASiE,QAAQE,aACxC2M,kBAAkB7V,KAAKb,KAAMA,KAAK4F,SAASiE,QAAQE,SAAU/J,KAAK+J,YAIhEkK,kBAAkBpT,KAAKb,SCvUlCkO,EAAU9N,EAAM+N,aAEhB1F,4BAEc5B,MAEPqH,EAAQ6F,cAKP/E,EAAQ5O,EAAMC,GAAG4D,MAAM4C,GAAUA,EAAOA,OAASA,KAGlDzG,EAAMC,GAAGyG,YAAYkI,IAAyC,UAA/BA,EAAM7C,aAAa,SAKlD/L,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASiR,mBAC/BjR,SAASiR,WAAazW,EAAMuD,cAAc,cAC1CiC,SAASjB,UAAU6B,YAAYxG,KAAK4F,SAASiR,iBAGhDA,EAAa7W,KAAK4F,SAASiR,WAAWC,MACtCC,EAAa/H,EAAMtH,MAAQsH,EAAM3C,IAAM,IACvCjF,MAAe4H,EAAM5K,qCACrB4S,gEAAuED,oBAA4BA,SAGnG7Q,EAAQnE,MAAMgE,KAAK8Q,EAAWI,OAAOC,UAAU,mBAAQC,EAAKC,eAAiBhQ,KAGpE,IAAXlB,KACWmR,WAAWnR,KAIfoR,YAAYlQ,EAAU4P,GAAQ9J,KAAK,0CAMrClN,KAAKC,OAAOsX,iBACiC,IAAxCvX,KAAKC,OAAOsX,QAAQC,QAAQ,SAAkBtJ,EAAQiF,OAAStT,OAAO4X,oCAK7EhR,EAAMC,OAEP6Q,EAAU9O,EAASiP,WAAW7W,KAAKb,MACnC2X,GAAeJ,EAAQK,SAAyB,GAAdL,EAAQhU,SAAYvD,KAAKC,OAAO4X,WAGlEC,EAAO9U,SAAS+U,gBALJ,6BAK+B,SAC3CpR,cACFmR,EACA1X,EAAMU,OAAO4F,QACH,sBAKRsR,EAAMhV,SAAS+U,gBAdH,6BAc8B,OAC1CE,EAAUN,MAAYlR,QAKxB,SAAUuR,IACNE,eAAe,+BAAgC,OAAQD,KAEvDC,eAAe,+BAAgC,aAAcD,KAIhEzR,YAAYwR,GAEVF,wBAICrR,EAAM0R,OACVhT,EAAOnF,KAAKC,OAAO8U,KAAKtO,GACtBC,EAAalF,OAAOuK,UAAWoM,UAE7B1R,OACC,QACM,gBAGN,YACM,gBAOX,UAAWC,IACAkB,WAAa5H,KAAKC,OAAOiK,WAAWkO,SAEpCxQ,MAAQ5H,KAAKC,OAAOiK,WAAWkO,OAGvChY,EAAMuD,cAAc,OAAQ+C,EAAYvB,yBAIvCA,MACJ/E,EAAMC,GAAGC,MAAM6E,UACR,SAGLkT,EAAQjY,EAAMuD,cAAc,cACvB3D,KAAKC,OAAOiK,WAAWoO,KAAK5Q,iBAGjClB,YACFpG,EAAMuD,cACF,cAEW3D,KAAKC,OAAOiK,WAAWoO,KAAKD,OAEvClT,IAIDkT,yBAIEE,EAAYJ,OACf7C,EAASlV,EAAMuD,cAAc,UAC7B+C,EAAalF,OAAOuK,UAAWoM,GACjC1R,EAAO8R,EAEP1Q,GAAS,EACTiN,SACAgD,SACAU,SACAC,gBAEE,SAAU/R,MACDD,KAAO,UAGlB,UAAWC,EACPA,EAAWkB,MAAMW,SAASvI,KAAKC,OAAOiK,WAAWwO,aACtC9Q,WAAa5H,KAAKC,OAAOiK,WAAWwO,WAGxC9Q,MAAQ5H,KAAKC,OAAOiK,WAAWwO,QAItCjS,OACC,UACQ,IACD,SACO,UACR,SACO,kBAGb,UACQ,IACD,SACO,WACR,WACO,kBAGb,cACQ,IACD,mBACO,oBACR,iBACO,wBAGb,gBACQ,IACD,oBACO,mBACR,qBACO,4BAGb,eACUmB,WAAa5H,KAAKC,OAAOiK,WAAWwO,uBACxC,SACC,SACD,uBAICjS,IACDA,SAIXoB,KAEOrB,YAAYiC,EAASkQ,WAAW9X,KAAKb,KAAMyY,GAAe7Q,MAAO,qBACjEpB,YAAYiC,EAASkQ,WAAW9X,KAAKb,KAAM8X,GAAQlQ,MAAO,yBAG1DpB,YAAYiC,EAASmQ,YAAY/X,KAAKb,KAAMwY,GAAgB5Q,MAAO,sBACnEpB,YAAYiC,EAASmQ,YAAY/X,KAAKb,KAAM8U,GAASlN,MAAO,0BAGxD,iBAAkB,IAClB,cAAgB5H,KAAKC,OAAO8U,KAAKD,OAErCtO,YAAYiC,EAASkQ,WAAW9X,KAAKb,KAAM8X,MAC3CtR,YAAYiC,EAASmQ,YAAY/X,KAAKb,KAAM8U,OAIjDhU,OAAO4F,EAAYtG,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUC,QAAQnC,GAAOC,MAExFC,cAAc2O,EAAQ5O,QAEvBd,SAASgD,QAAQnC,GAAQ6O,EAEvBA,wBAIC7O,EAAMC,OAERoO,EAAQ1U,EAAMuD,cAChB,aAES+C,EAAWtC,SACTpE,KAAKC,OAAOiK,WAAWkO,QAElCpY,KAAKC,OAAO8U,KAAKtO,IAIfnF,EAAQlB,EAAMuD,cAChB,QACAvD,EAAMU,OACFV,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUe,OAAOjD,UAEnD,YACD,MACA,SACC,UACC,eACO,OAElBC,gBAIHd,SAAS8D,OAAOjD,GAAQnF,IAGpB0S,gBAAgBnT,KAAKb,KAAMsB,8CASzBmF,EAAMC,OACX+C,EAAWrJ,EAAMuD,cACnB,WACAvD,EAAMU,OACFV,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUkB,QAAQpD,SAErD,MACA,UACE,GAEXC,OAKK,WAATD,EAAmB,GACVD,YAAYpG,EAAMuD,cAAc,OAAQ,KAAM,UAEnDmV,EAAS,UACLrS,OACC,WACQzG,KAAKC,OAAO8U,KAAKgE,iBAGzB,WACQ/Y,KAAKC,OAAO8U,KAAKa,WAOzBhP,iBAAmBkS,EAAOE,0BAGlCpT,SAASiE,QAAQpD,GAAQgD,EAEvBA,uBAIAhD,OACD9B,EAAYvE,EAAMuD,cAAc,cAC3B,wBAGD6C,YACNpG,EAAMuD,cACF,cAEW3D,KAAKC,OAAOiK,WAAWkO,QAElCpY,KAAKC,OAAO8U,KAAKtO,OAIfD,YACNpG,EAAMuD,cAAc,OAAQvD,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUkB,QAAQpD,IAAQ,eAGjGb,SAASiE,QAAQpD,GAAQ9B,EAEvBA,2BAII+C,EAAOuR,EAAMxS,EAAMuO,OAAOqD,yDAAQ,KAAMa,0DAC7CC,EAAO/Y,EAAMuD,cAAc,MAE3BmR,EAAQ1U,EAAMuD,cAAc,eACvB3D,KAAKC,OAAOiK,WAAWwO,UAG5BU,EAAQhZ,EAAMuD,cAChB,QACAvD,EAAMU,OAAOV,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUe,OAAOjD,UAChE,qBACQA,0BAGP,mBAIT4S,EAAOjZ,EAAMuD,cAAc,QAAU2V,eAAe,MAEpD9S,YAAY4S,KACZ5S,YAAY6S,KACZE,mBAAmB,YAAavE,GAElC5U,EAAMC,GAAGyG,YAAYuR,MACf7R,YAAY6R,KAGjB7R,YAAYsO,KACZtO,YAAY2S,+BAIHlV,MAGTjE,KAAKC,OAAOuZ,SAAS7P,MACrBvJ,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS8D,OAAOC,OAC1CvJ,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASiE,QAAQI,cAC1B,IAAlBjK,KAAK+J,cAML0P,EAAU,EACRC,EAAa1Z,KAAK4F,SAAS8D,OAAOC,KAAKgQ,wBACvCC,EAAa5Z,KAAKC,OAAOiK,WAAWC,uBAGtC/J,EAAMC,GAAG4D,MAAMA,KACL,IAAMyV,EAAWnM,OAAStJ,EAAM4V,MAAQH,EAAWI,UAC1D,CAAA,IAAI1Z,EAAM2Z,SAAS/Z,KAAK4F,SAASiE,QAAQI,YAAa2P,YAC/C5Z,KAAK4F,SAASiE,QAAQI,YAAY9G,MAAM2W,KAAKtS,QAAQ,IAAK,IAMpEiS,EAAU,IACA,EACHA,EAAU,QACP,OAIX/C,kBAAkB7V,KAAKb,KAAMA,KAAK4F,SAASiE,QAAQI,YAAajK,KAAK+J,SAAW,IAAM0P,QAGpF7T,SAASiE,QAAQI,YAAY9G,MAAM2W,KAAUL,MAI9CrZ,EAAMC,GAAG4D,MAAMA,KAAW,aAAc,cAAcsE,SAAStE,EAAMwC,SAC/DyJ,YAAYlQ,KAAK4F,SAASiE,QAAQI,YAAa2P,EAAwB,eAAf3V,EAAMwC,2BAKlEuT,EAASnS,OACToS,EAAMja,KAAK4F,SAAS0D,SAAS4Q,KAAKF,GAClCG,EAAOna,KAAK4F,SAAS0D,SAAS8Q,MAAMJ,KAEpCpV,aAAaqV,GAAMpS,KACnBjD,aAAauV,GAAOtS,4BAKf4D,cAELwN,EAAOjZ,KAAK4F,SAAS0D,SAAS8Q,MAAMpH,QAAQxK,cAAc,MAG5DpI,EAAMC,GAAGsC,MAAM8I,QACVA,QAAQuH,QAAUvH,EAAQ4O,OAAO,mBAAWvP,EAAK7K,OAAO+S,QAAQvH,QAAQlD,SAASyK,UAEjFvH,QAAQuH,QAAUhT,KAAKC,OAAO+S,QAAQvH,YAIzC5D,GAAUzH,EAAMC,GAAGC,MAAMN,KAAKyL,QAAQuH,UAA0B,YAAdhT,KAAKyG,UACpD6T,UAAUzZ,KAAKb,KAZX,UAYuB6H,GAG/BA,KAKC0S,aAAatB,OAGbuB,EAAW,gBACT1F,EAAQ,UAEJ9B,OACC,WACO,eAGP,WACO,iBAGP,aAIA,UACO,YAOX8B,EAAMjS,OAIJ4F,EAASgS,YAAY5Z,OAAWiU,GAH5B,WAMVrJ,QAAQuH,QAAQ/M,QAAQ,mBACzBwC,EAASiS,eAAe7Z,OAEpBmS,EACAiG,EA1DK,UA4DLxQ,EAASkS,SAAS9Z,OAAW,UAAWmS,GACxCwH,EAASxH,QAIRF,cAAcjS,KAAKb,KAjEf,UAiE2BiZ,uBAKnCe,EAAStS,UACNsS,OACC,eACgB,IAAVtS,EAAc,SAAcA,gBAElC,iBACOA,OACC,eACM,YACN,eACM,YACN,eACM,YACN,cACM,WACN,cACM,WACN,eACM,WACN,cACM,WACN,aACM,WACN,gBACM,sBAEAA,MAGd,kBACMe,EAASmS,YAAY/Z,KAAKb,qBAG1B,8BAKLga,EAASrV,OACbwV,EAAOna,KAAK4F,SAAS0D,SAAS8Q,MAAMJ,GACtCtS,EAAQ,KACRuR,EAAOtU,SAEHqV,OACC,aACOha,KAAKuJ,SAASpI,SAEjBnB,KAAKuJ,SAAS3I,YACP,uBAMJZ,KAAKga,GAGT5Z,EAAMC,GAAGC,MAAMoH,OACP1H,KAAKC,OAAO+Z,GAASa,UAI5B7a,KAAKyL,QAAQuO,GAASzR,SAASb,oBAC3B2C,QAAQC,8BAA8B5C,WAAcsS,OAKxDha,KAAKC,OAAO+Z,GAASvO,QAAQlD,SAASb,oBAClC2C,QAAQC,2BAA2B5C,WAAcsS,GAQ7D5Z,EAAMC,GAAGyG,YAAYmS,OACfkB,GAAQA,EAAK3R,cAAc,WAIhC3B,EAASoS,GAAQA,EAAKzQ,8BAA8Bd,QAErDtH,EAAMC,GAAGyG,YAAYD,OAKnBqS,SAAU,EAGHlZ,KAAK4F,SAAS0D,SAAS4Q,KAAKF,GAASxR,kBAAkBxI,KAAKC,OAAOiK,WAAWoO,KAAK5Q,OAC3FnD,UAAYkE,EAASkS,SAAS9Z,KAAKb,KAAMga,EAAStS,gCA6CnD1H,KAAK8O,UAAUb,UACT,SAGNtN,EAAQma,aAAevR,EAASwR,UAAUla,KAAKb,MAAM6C,cAC/C7C,KAAKC,OAAO8U,KAAKiG,QAGxBhb,KAAKuJ,SAAS3I,QAAS,KACjBqa,EAAe1R,EAAS2R,gBAAgBra,KAAKb,SAE/CI,EAAMC,GAAG8a,MAAMF,UACRA,EAAanG,aAIrB9U,KAAKC,OAAO8U,KAAKqG,gDAOlBnC,EAAOjZ,KAAK4F,SAAS0D,SAAS8Q,MAAM7Q,SAASf,cAAc,MAG3D6S,EAAY9R,EAASwR,UAAUla,KAAKb,MAAM6C,YACvCyX,UAAUzZ,KAAKb,KALX,WAKuBqb,KAG9Bd,aAAatB,GAGdoC,OAKCC,EAAS/R,EAASwR,UAAUla,KAAKb,MAAMgN,IAAI,4BACnCmO,EAAMha,eACRf,EAAMC,GAAGC,MAAM6a,EAAMrG,OAAuBqG,EAAMha,SAASoa,cAA7BJ,EAAMrG,WAIzC0G,kBACO,SACHxb,KAAKC,OAAO8U,KAAKiG,SAIrB/U,QAAQ,cACFyU,eAAe7Z,OAEpBsa,EAAMha,SACN8X,EACA,WACAkC,EAAMrG,OAASqG,EAAMha,SACrBsH,EAASgS,YAAY5Z,OAAWsa,EAAMha,SAASoa,eAC/CJ,EAAMha,SAAS6X,gBAAkBhH,EAAKzI,SAASpI,SAAS6X,mBAIvDlG,cAAcjS,KAAKb,KAxCf,WAwC2BiZ,2BAI/BxN,cAILrL,EAAMC,GAAGsC,MAAM8I,QACVA,QAAQsH,MAAQtH,EAAQ4O,OAAO,mBAAS7G,EAAKvT,OAAO8S,MAAMtH,QAAQlD,SAASwK,UAE3EtH,QAAQsH,MAAQ/S,KAAKC,OAAO8S,MAAMtH,YAIrC5D,GAAUzH,EAAMC,GAAGC,MAAMN,KAAKyL,QAAQsH,YACnCuH,UAAUzZ,KAAKb,KAXX,QAWuB6H,GAG/BA,OAKCoR,EAAOjZ,KAAK4F,SAAS0D,SAAS8Q,MAAMrH,MAAMvK,cAAc,QAGxD5D,aAAa5E,KAAK4F,SAAS0D,SAAS4Q,KAAKnH,OAAO,KAChDnO,aAAa5E,KAAK4F,SAAS0D,SAAS8Q,MAAMrH,OAAO,KAGjDwH,aAAatB,QAGdxN,QAAQsH,MAAM9M,QAAQ,mBACvBwC,EAASiS,eAAe7Z,OAAWkS,EAAOkG,EA9BjC,QA8B6CxQ,EAASkS,SAAS9Z,OAAW,QAASkS,QAGvFD,cAAcjS,KAAKb,KAjCf,QAiC2BiZ,yBAIjChV,OACC0P,EAAS3T,KAAK4F,SAAS0D,SAAvBqK,KACF2B,EAAStV,KAAK4F,SAASgD,QAAQU,SAC/BmS,EAAOrb,EAAMC,GAAGqL,QAAQzH,GACxBA,EACA7D,EAAMC,GAAGyG,YAAY6M,IAA8C,SAArCA,EAAKxH,aAAa,kBAElD/L,EAAMC,GAAG4D,MAAMA,GAAQ,KACjByX,EAAatb,EAAMC,GAAGyG,YAAY6M,IAASA,EAAK7L,SAAS7D,EAAM4C,QAC/D8U,EAAW1X,EAAM4C,SAAW7G,KAAK4F,SAASgD,QAAQU,YAKpDoS,IAAgBA,IAAeC,GAAYF,SAK3CE,KACM5K,kBAKV3Q,EAAMC,GAAGyG,YAAYwO,MACdzQ,aAAa,gBAAiB4W,GAGrCrb,EAAMC,GAAGyG,YAAY6M,OAChB9O,aAAa,eAAgB4W,GAE9BA,IACKzT,gBAAgB,cAEhBnD,aAAa,YAAa,yBAMhCoV,OACD2B,EAAQ3B,EAAI7T,WAAU,KACtBjD,MAAM0Y,SAAW,aACjB1Y,MAAM2Y,QAAU,IAChBjX,aAAa,eAAe,SAG5BkB,KAAK6V,EAAMnY,iBAAiB,gBAAgBwC,QAAQ,gBAChD8V,EAAOza,EAAM6K,aAAa,UAC1BtH,aAAa,OAAWkX,gBAI9B7X,WAAWsC,YAAYoV,OAGrBrO,EAAQqO,EAAMI,YACdxO,EAASoO,EAAMK,sBAGfvH,cAAckH,wCAShB3X,OACIqU,EAAStY,KAAK4F,SAAS0D,SAAvBgP,KACF2B,EAAMhW,EAAM4C,OACZ4U,EAA6C,UAAtCxB,EAAI9N,aAAa,iBACxBgO,EAAOnX,SAASkZ,eAAejC,EAAI9N,aAAa,qBAGjD/L,EAAMC,GAAGyG,YAAYqT,IAKkB,aAA9BA,EAAKhO,aAAa,aAO1BC,EAAUkM,EAAK9P,cAAc,0CAC7B7D,EAAYyH,EAAQlI,oBAGpB6B,KAAKuS,EAAK7U,oCAAoC2I,EAAQD,aAAa,aAAYlG,QAAQ,cAClFpB,aAAa,iBAAiB,KAIrClE,EAAQwb,cAAgBxb,EAAQyb,cAAe,GAErCjZ,MAAMoK,MAAWnB,EAAQ4P,mBACzB7Y,MAAMqK,OAAYpB,EAAQ6P,sBAG9BI,EAAO5T,EAAS6T,WAAWzb,KAAKb,KAAMma,GAGtCoC,EAAU,SAAVA,KAEE5W,EAAEkB,SAAWlC,IAAe,QAAS,UAAU4D,SAAS5C,EAAE6W,kBAKpDrZ,MAAMoK,MAAQ,KACdpK,MAAMqK,OAAS,KAGnBiP,IAAI9X,EAAWvE,EAAM6O,cAAesN,OAIxC3R,GAAGjG,EAAWvE,EAAM6O,cAAesN,KAG/BpZ,MAAMoK,MAAW8O,EAAK9O,aACtBpK,MAAMqK,OAAY6O,EAAK7O,cAI7B3I,aAAa,eAAe,KAC5BA,aAAa,YAAa,KAG7BA,aAAa,eAAgB4W,KAC9B5W,aAAa,gBAAiB4W,KAC7BzT,gBAAgB,cAGhBvE,iBAAiB,2DAA2D,GAAGyH,0BAKjF5G,iBAEClE,EAAMC,GAAGC,MAAMN,KAAKC,OAAOwI,iBACpB,SAIL9D,EAAYvE,EAAMuD,cACpB,MACAvD,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUF,SAAS5C,aAI/D7F,KAAKC,OAAOwI,SAASF,SAAS,cACpB/B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,YAIvDA,KAAKC,OAAOwI,SAASF,SAAS,aACpB/B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,WAIvDA,KAAKC,OAAOwI,SAASF,SAAS,WACpB/B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,SAKvDA,KAAKC,OAAOwI,SAASF,SAAS,mBACpB/B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,iBAIvDA,KAAKC,OAAOwI,SAASF,SAAS,YAAa,KACrCkB,EAAWrJ,EAAMuD,cACnB,OACAvD,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUc,WAIpDE,EAAOlB,EAASkU,YAAY9b,KAAKb,KAAM,wBACxBsE,EAAKF,UAEjBoC,YAAYmD,EAAKmL,SACjBtO,YAAYmD,EAAKrI,SAGjBkF,YAAYiC,EAASmU,eAAe/b,KAAKb,KAAM,WAKpDA,KAAKC,OAAOuZ,SAAS7P,KAAM,KACrBQ,EAAU/J,EAAMuD,cAClB,aAEU,gBACC3D,KAAKC,OAAOiK,WAAWC,SAElC,WAGK3D,YAAY2D,QAChBvE,SAASiE,QAAQI,YAAcE,OAGnCvE,SAAS6D,SAAWA,IACfjD,YAAYxG,KAAK4F,SAAS6D,aAIpCzJ,KAAKC,OAAOwI,SAASF,SAAS,mBACpB/B,YAAYiC,EAASoU,WAAWhc,KAAKb,KAAM,gBAIrDA,KAAKC,OAAOwI,SAASF,SAAS,eACpB/B,YAAYiC,EAASoU,WAAWhc,KAAKb,KAAM,aAIrDA,KAAKC,OAAOwI,SAASF,SAAS,WACpB/B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,SAIvDA,KAAKC,OAAOwI,SAASF,SAAS,UAAW,KACnCqB,EAASxJ,EAAMuD,cAAc,cACxB,iBAIL+C,OACG,OACC,UACC1G,KAAKC,OAAO2J,QAIjBoF,EAAQvG,EAASkU,YAAY9b,KAC/Bb,KACA,SACAI,EAAMU,OAAO4F,qBACUpC,EAAKF,QAGzBoC,YAAYwI,EAAM8F,SAClBtO,YAAYwI,EAAM1N,YAEpBsE,SAASgE,OAASA,IAEbpD,YAAYoD,MAItB5J,KAAKC,OAAOwI,SAASF,SAAS,eACpB/B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,aAIvDA,KAAKC,OAAOwI,SAASF,SAAS,cAAgBnI,EAAMC,GAAGC,MAAMN,KAAKC,OAAOqJ,UAAW,KAC9EgP,EAAOlY,EAAMuD,cAAc,aACtB,iBAGN6C,YACDiC,EAASiU,aAAa7b,KAAKb,KAAM,uCACDsE,EAAKF,oBAChB,mCACiBE,EAAKF,oBACtB,SAInBuP,EAAOvT,EAAMuD,cAAc,cACtB,4CACcW,EAAKF,kBACX,6CAC6BE,EAAKF,QAC3C,oBACK,IAGT0Y,EAAQ1c,EAAMuD,cAAc,OAE5BoZ,EAAO3c,EAAMuD,cAAc,2BACRW,EAAKF,0BACX,6CAC6BE,EAAKF,QAC3C,aAIJ8V,EAAO9Z,EAAMuD,cAAc,WACvB,iBAIL1D,OAAOqJ,SAASrD,QAAQ,gBACnBgU,EAAM7Z,EAAMuD,cAAc,WACtB,aACE,KAGN2R,EAASlV,EAAMuD,cACjB,SACAvD,EAAMU,OAAOV,EAAMyY,0BAA0BmE,EAAK/c,OAAO0I,UAAUC,QAAQU,gBACjE,eACI0T,EAAK/c,OAAOiK,WAAWwO,YAAWsE,EAAK/c,OAAOiK,WAAWwO,wCAC9CpU,EAAKF,OAAMqC,0BACf,mCACiBnC,EAAKF,OAAMqC,mBAC5B,IAErBuW,EAAK/c,OAAO8U,KAAKtO,IAGfiB,EAAQtH,EAAMuD,cAAc,cACvBqZ,EAAK/c,OAAOiK,WAAWoO,KAAK5Q,UAIjCnD,UAAYD,EAAKmC,KAEhBD,YAAYkB,KACflB,YAAY8O,KACX9O,YAAYyT,KAEZrU,SAAS0D,SAAS4Q,KAAKzT,GAAQwT,MAGnCzT,YAAY0T,KACX1T,YAAYuW,QAGb9c,OAAOqJ,SAASrD,QAAQ,gBACnBkU,EAAO/Z,EAAMuD,cAAc,2BACRW,EAAKF,OAAMqC,iBACjB,sCACsBnC,EAAKF,OAAMqC,cAC1C,qBACK,SACH,KAGNwW,EAAO7c,EAAMuD,cACf,eAEU,eACIqZ,EAAK/c,OAAOiK,WAAWwO,YAAWsE,EAAK/c,OAAOiK,WAAWwO,kCAClD,mCACiBpU,EAAKF,4BACtB,GAErB4Y,EAAK/c,OAAO8U,KAAKtO,MAGhBD,YAAYyW,OAEXxR,EAAUrL,EAAMuD,cAAc,QAE/B6C,YAAYiF,KACXjF,YAAY2T,KAEbvU,SAAS0D,SAAS8Q,MAAM3T,GAAQ0T,MAGpC3T,YAAYsW,KACZtW,YAAYmN,KACPnN,YAAY8R,QAEjB1S,SAAS0D,SAASqK,KAAOA,OACzB/N,SAAS0D,SAASgP,KAAOA,SAI9BtY,KAAKC,OAAOwI,SAASF,SAAS,QAAU5H,EAAQyI,OACtC5C,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,QAIvDA,KAAKC,OAAOwI,SAASF,SAAS,YAAc5H,EAAQ0I,WAC1C7C,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,YAIvDA,KAAKC,OAAOwI,SAASF,SAAS,iBACpB/B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,eAIvDA,KAAKC,OAAOwI,SAASF,SAAS,oBACzB3C,SAASjB,UAAU6B,YAAYiC,EAASiU,aAAa7b,KAAKb,KAAM,oBAGpE4F,SAAS6C,SAAW9D,EAErB3E,KAAKC,OAAOwI,SAASF,SAAS,aAAevI,KAAKC,OAAOqJ,SAASf,SAAS,YAClE2U,aAAarc,KAAKb,MAGxB2E,mCAMH3E,KAAKC,OAAOkd,WAAY,KAClBrF,EAAOrP,EAASiP,WAAW7W,KAAKb,MAGlC8X,EAAKF,YACCuF,WAAWrF,EAAKvU,IAAK,oBAK9Ba,GAAKkB,KAAKC,MAAsB,IAAhBD,KAAKE,cAGtBb,EAAY,OAGZvE,EAAMC,GAAGoC,OAAOzC,KAAKC,OAAOwI,UAChBzI,KAAKC,OAAOwI,SACjBrI,EAAMC,GAAG0D,SAAS/D,KAAKC,OAAOwI,UAGzBzI,KAAKC,OAAOwI,aAChBzI,KAAKoE,YACCpE,KAAKC,OAAOmd,eACfpd,KAAKC,OAAO+U,QAIXvM,EAAS4U,OAAOxc,KAAKb,SACzBA,KAAKoE,YACCpE,KAAKC,OAAOmd,eACfpd,KAAK+S,cACH/S,KAAKgT,iBACJvK,EAASmS,YAAY/Z,KAAKb,YAOxC6G,YAGAzG,EAAMC,GAAGoC,OAAOzC,KAAKC,OAAO0I,UAAUF,SAAS9D,eACtC3B,SAASwF,cAAcxI,KAAKC,OAAO0I,UAAUF,SAAS9D,YAI9DvE,EAAMC,GAAGyG,YAAYD,OACb7G,KAAK4F,SAASjB,WAIvBvE,EAAMC,GAAGyG,YAAYnC,KACd6B,YAAY7B,KAEZ4U,mBAAmB,YAAa5U,GAIvCvE,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS6C,aAC7B6U,aAAazc,KAAKb,MAIxBA,KAAKC,OAAOuZ,SAAS/Q,SAAU,KACzB8U,EAASnd,EAAMyI,YAAYhI,KAC7Bb,MAEIA,KAAKC,OAAO0I,UAAUF,SAAS5C,QAC/B,IACA7F,KAAKC,OAAO0I,UAAU4U,OACtB,KACAvd,KAAKC,OAAOiK,WAAWkO,QACzBlL,KAAK,WAGLnH,KAAKwX,GAAQtX,QAAQ,cACjBiK,YAAY4E,EAAO0I,EAAKvd,OAAOiK,WAAWkO,QAAQ,KAClDlI,YAAY4E,EAAO0I,EAAKvd,OAAOiK,WAAWC,SAAS,KACnDtF,aAAa,OAAQ,gBCjtCrC0E,oBAIOvJ,KAAK8O,UAAUb,KAKf7N,EAAMC,GAAGC,MAAMJ,EAAQP,IAAIkB,KAAKb,MAAMmB,UAEhCf,EAAMC,GAAGC,MAAMN,KAAKuJ,SAASpI,iBAC/BoI,SAASpI,SAAWnB,KAAKC,OAAOsJ,SAASpI,SAAS6X,oBAFlDzP,SAASpI,SAAWjB,EAAQP,IAAIkB,KAAKb,MAAMmB,SAM/Cf,EAAMC,GAAGqL,QAAQ1L,KAAKuJ,SAAS3I,WAC3BR,EAAMC,GAAGC,MAAMJ,EAAQP,IAAIkB,KAAKb,MAAMmB,eAGlCoI,SAAS3I,QAAUZ,KAAKC,OAAOsJ,SAASwB,YAFxCxB,SAAS3I,QAAUV,EAAQP,IAAIkB,KAAKb,MAAMuJ,WAOjD,QAAS,SAAShB,SAASvI,KAAKyG,QAAwB,UAAdzG,KAAKyG,MAAqB9F,EAAQma,aAU7E1a,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS2D,iBAC/B3D,SAAS2D,SAAWnJ,EAAMuD,cAC3B,MACAvD,EAAMyY,0BAA0B7Y,KAAKC,OAAO0I,UAAUY,aAGpDkU,YAAYzd,KAAK4F,SAAS2D,SAAUvJ,KAAK4F,SAASC,YAItDqK,YACFlQ,KAAK4F,SAASjB,UACd3E,KAAKC,OAAOiK,WAAWX,SAAS3I,SAC/BR,EAAMC,GAAGC,MAAMiJ,EAASwR,UAAUla,KAAKb,QAIxCI,EAAMC,GAAGC,MAAMiJ,EAASwR,UAAUla,KAAKb,WAKlC0d,YAAY7c,KAAKb,QAGjByb,KAAK5a,KAAKb,MAGfA,KAAKC,OAAOwI,SAASF,SAAS,aAAevI,KAAKC,OAAOqJ,SAASf,SAAS,eAClEoV,gBAAgB9c,KAAKb,QArC1BA,KAAKC,OAAOwI,SAASF,SAAS,aAAevI,KAAKC,OAAOqJ,SAASf,SAAS,eAClEoV,gBAAgB9c,KAAKb,6CA2CpB,UAAdA,KAAKyG,KAAkB,GACdsU,UAAUla,KAAKb,MAAMiG,QAAQ,cAE5B2E,GAAGuQ,EAAO,YAAa,mBAAS5R,EAASqU,OAAO/c,OAAWoD,OAI3D4Z,KAAO,eAIX5C,EAAe1R,EAAS2R,gBAAgBra,KAAKb,MAG/CI,EAAMC,GAAG8a,MAAMF,IAEXlZ,MAAMgE,KAAKkV,EAAa6C,gBAAkBjb,UACjC+a,OAAO/c,KAAKb,KAAMib,OAGd,UAAdjb,KAAKyG,MAAoBzG,KAAKuJ,SAASwB,aACzCgT,MAAMC,gBAAgBhe,KAAKmB,uCAOhCf,EAAMC,GAAGyB,gBAAgB9B,KAAK4O,UAK3B7M,MAAMgE,KAAK/F,KAAK4O,MAAMkM,gBAAkBT,OAAO,mBAAU,WAAY,aAAa9R,SAAS4S,EAAMzY,sDAKjG6G,EAASwR,UAAUla,KAAKb,MAAM6N,KAAK,mBAASsN,EAAMha,SAAS6X,gBAAkBhH,EAAK7Q,4BAItFG,OAEG6Z,EAAQ/a,EAAMC,GAAG4D,MAAM3C,GAASA,EAAMuF,OAASvF,EAC/CyJ,EAASoQ,EAAM2C,WAAW,GAI5B3C,IAHiB5R,EAAS2R,gBAAgBra,KAAKb,QAQ/CI,EAAMC,GAAG4d,IAAIlT,KACJmT,QAAQrd,KAAKb,KAAM+K,EAAOoT,kBAE1BD,QAAQrd,KAAKb,KAAM,QAG1BiM,cAAcpL,KAAKb,KAAMA,KAAK4O,MAAO,gCAIvCtN,MAECtB,KAAK8O,UAAUb,MAIhB7N,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS2D,UAAW,KACxCxE,EAAU3E,EAAMuD,cAAc,UAG9B4W,aAAava,KAAK4F,SAAS2D,cAG3B6U,EAAWhe,EAAMC,GAAGyB,gBAAgBR,GAAiB,GAARA,EAG/ClB,EAAMC,GAAGoC,OAAO2b,KACRxX,YAAcwX,EAAQ9W,SAEtBd,YAAY4X,QAInBxY,SAAS2D,SAAS/C,YAAYzB,aAE9BsF,QAAQC,KAAK,wDAOjBlK,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASgD,QAAQW,eAK5CwB,EAAS7K,EAAQP,IAAIkB,KAAKb,MAAMuJ,SAG/BnJ,EAAMC,GAAGqL,QAAQX,QAGbxB,SAASwB,OAASA,IAFT/K,KAAKC,OAAOsJ,SAAvBwB,OAKHA,MACMmF,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWX,SAASwB,QAAQ,KAC7EoF,YAAYnQ,KAAK4F,SAASgD,QAAQW,UAAU,OCxLxD8U,+BAEQC,EAAUle,EAAMme,eAAeve,KAAKwe,SAGpCC,EAAare,EAAMyI,YAAYhI,KAAKb,cAAeA,KAAKyG,kBACxDV,KAAK0Y,GAAYxY,QAAQ7F,EAAMsU,iBAG/BxE,YAAYlQ,KAAK4F,SAASC,QAAS7F,KAAKC,OAAOiK,WAAW6T,OAAO,KAG/DW,eAAe7d,KAAKb,WAGvB4O,MAAM/J,aAAa,KAAMzE,EAAMue,WAAW3e,KAAKyG,OAGhDrG,EAAMC,GAAGK,OAAOb,OAAO+e,MACfhK,MAAM/T,KAAKb,KAAMse,MAGnBO,WAAW7e,KAAKC,OAAO6e,KAAKT,QAAQrQ,YAGnC+Q,wBAA0Blf,OAAOkf,mCAGjCA,wBAAwBC,KAAK,aACxBpK,MAAM/T,OAAWyd,YAItBW,wBAA0B,kBACtBF,wBAAwB9Y,QAAQ,uDAY3C7F,EAAMC,GAAG0D,SAAS/D,KAAK+d,MAAMmB,cAAe,KACpClK,EAAUhV,KAAK+d,MAAMmB,eAArBlK,SAEJ5U,EAAMC,GAAGC,MAAM0U,eACV/U,OAAO+U,MAAQA,SACjBH,SAAShU,KAAKb,UAMnBG,EAAMH,KAAKC,OAAO6C,KAAKqc,OACvBb,EAAUle,EAAMme,eAAeve,KAAKwe,YACtCpe,EAAMC,GAAGoC,OAAOtC,KAASC,EAAMC,GAAGC,MAAMH,GAAM,KACxCoD,qDAAyD+a,UAAene,qDAExEoD,GACDyB,KAAK,mBAAaC,EAASC,GAAKD,EAASma,OAAS,OAClDpa,KAAK,YACa,OAAXqa,GAAmBjf,EAAMC,GAAGK,OAAO2e,OAC9Bpf,OAAO+U,MAAQqK,EAAOC,MAAM,GAAGC,QAAQvK,QACzCH,SAAShU,WAGnBuE,MAAM,8CAMTqI,EAAQzN,KAAKC,OAAOwN,MAAMrM,MAAM,UACjCwE,SAASC,QAAQ1C,MAAMqc,cAAmB,IAAM/R,EAAM,GAAKA,EAAM,uBAIpE6Q,OACImB,EAASzf,OAIR+d,MAAQ,IAAIle,OAAO+e,GAAGc,OAAOD,EAAO7Q,MAAMxK,mCAG/Bqb,EAAOxf,OAAO0f,SAAW,EAAI,WAC7BF,EAAO3Q,UAAUb,GAAK,EAAI,MAC/B,WACK,iBACM,iBACA,YACL,cACE,SAGLpO,QAAUA,OAAO+f,SAASC,yBACjBhgB,QAAUA,OAAO+f,SAASE,oBAG3B9f,KAAKuJ,SAASwB,OAAS,EAAI,eAC7B/K,KAAKC,OAAOsJ,SAASpI,mCAG3B8C,OAGA7D,EAAMC,GAAGK,OAAO+e,EAAO7Q,MAAMxE,YAI3ByB,QACI5H,EAAMK,aAIRL,EAAMK,WACL,IACMyb,QACH,kPAGH,IACMA,QACH,kIAGH,MACMA,QACH,gJAGH,SACA,MACMA,QACH,uGAIGA,QAAU,6BAIlBnR,MAAMxE,MAAQyB,IAEfI,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,4CAE3B3K,OAEd+b,EAAW/b,EAAM4C,SAGhB+H,MAAMoE,QAAUgN,EAASC,uBAE1BhU,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,gDAE9B3K,OAEX+b,EAAW/b,EAAM4C,SAGhB+H,MAAMsR,aAAeF,EAASG,oBAE/BlU,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,gCAE3C3K,OAEE+b,EAAW/b,EAAM4C,SAGfuZ,SAASvf,KAAK4e,KAGf7Q,MAAM9F,KAAO,aACPuX,cACFzR,MAAM+D,QAAS,KAEnB/D,MAAM7F,MAAQ,aACRuX,eACF1R,MAAM+D,QAAS,KAEnB/D,MAAM2R,KAAO,aACPC,cACF5R,MAAM+D,QAAS,KAEnB/D,MAAM7E,SAAWiW,EAASS,gBAC1B7R,MAAM+D,QAAS,IAGf/D,MAAM5E,YAAc,SACpB+E,eAAe0Q,EAAO7Q,MAAO,qCAErBnN,OAAOue,EAASU,gCAEvB3K,KAEOnH,MAAM+H,SAAU,IAGjB1K,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,aAGtC+R,OAAO5K,aAKjBhH,eAAe0Q,EAAO7Q,MAAO,sCAErBoR,EAASG,gCAEhB7e,KACSsf,gBAAgBtf,aAK1ByN,eAAe0Q,EAAO7Q,MAAO,iCAErBoR,EAASC,mCAEhB3e,KAEM2K,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,oBAAoB,WACtDtN,MAGJuf,mBAAmBvf,UAK9BsI,EAAW6V,EAAOxf,OAAlB2J,cACCmF,eAAe0Q,EAAO7Q,MAAO,gCAErBhF,gBAEPtI,KACSA,IACAwf,UAAmB,IAATlX,KACbqC,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,uBAKjDuC,EAAUsO,EAAOxf,OAAjBkR,aACCpC,eAAe0Q,EAAO7Q,MAAO,+BAErBuC,gBAEP7P,OACMuG,EAASzH,EAAMC,GAAGqL,QAAQpK,GAASA,EAAQ6P,IACzCtJ,IACCA,EAAS,OAAS,cACrBoE,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,0BAKhDG,eAAe0Q,EAAO7Q,MAAO,oCAErBoR,EAASe,wBAKjBhS,eAAe0Q,EAAO7Q,MAAO,+BAErB6Q,EAAOzV,cAAgByV,EAAO1V,YAKzC0V,EAAOxf,OAAOwI,SAASF,SAAS,aAAekX,EAAOxf,OAAOqJ,SAASf,SAAS,YACtE2U,aAAarc,KAAK4e,EAAQO,EAASgB,6BAI5CvB,EAAO3Q,UAAUb,MACVW,MAAM/J,aAAa,YAAa,KAGrCoH,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,gBACzC3C,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,yBAGxCqS,cAAcxB,EAAOjK,OAAO0L,aAG5B1L,OAAO0L,UAAYrhB,OAAOshB,YAAY,aAElCvS,MAAMgH,SAAWoK,EAASoB,0BAGC,OAA9B3B,EAAO7Q,MAAMyS,cAAyB5B,EAAO7Q,MAAMyS,aAAe5B,EAAO7Q,MAAMgH,aACzE3J,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,cAI5CA,MAAMyS,aAAe5B,EAAO7Q,MAAMgH,SAGX,IAA1B6J,EAAO7Q,MAAMgH,kBACNqL,cAAcxB,EAAOjK,OAAO0L,aAG7BjV,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,oBAEpD,YAGI8C,WAAW,kBAAMzD,EAAGqT,MAAMzgB,KAAK4e,IAAS,4BAErCxb,OAEJ+b,EAAW/b,EAAM4C,qBAGhBoa,cAAcxB,EAAOjK,OAAOJ,SAS3BnR,EAAMK,WACL,IACMsK,MAAM+D,QAAS,EAGlB8M,EAAO7Q,MAAM0C,QAEJkP,cACAH,eAEHpU,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,oBAKlD,EAEG6Q,EAAO7Q,MAAM+H,WACP1K,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,YAE5CA,MAAM+H,SAAU,EAGnB8I,EAAO7Q,MAAM+D,UACP1G,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,UAE5CA,MAAM+D,QAAS,IAEhB1G,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,aAGxC4G,OAAOJ,QAAUvV,OAAOshB,YAAY,aACjClV,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,eAChD,IAKC6Q,EAAO7Q,MAAM7E,WAAaiW,EAASS,kBAC5B7R,MAAM7E,SAAWiW,EAASS,gBAC3BxU,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,qBAI1C2S,eAAe1gB,KAAK4e,EAAQO,EAASwB,wCAI7C,IACM5S,MAAM+D,QAAS,IAEhB1G,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,WAQjD3C,cAAcpL,KAAK4e,EAAQA,EAAO7Z,SAASjB,UAAW,eAAe,QACjEV,EAAMK,aCrY9Bmd,+BAGQhD,EAAare,EAAMyI,YAAYhI,KAAKb,cAAeA,KAAKyG,kBACxDV,KAAK0Y,GAAYxY,QAAQ7F,EAAMsU,iBAG/BxE,YAAYlQ,KAAK4F,SAASC,QAAS7F,KAAKC,OAAOiK,WAAW6T,OAAO,KAGjEW,eAAe7d,KAAKb,WAGrB4O,MAAM/J,aAAa,KAAMzE,EAAMue,WAAW3e,KAAKyG,OAG/CrG,EAAMC,GAAGK,OAAOb,OAAO6hB,SAKlB9M,MAAM/T,KAAKb,QAJX6e,WAAW7e,KAAKC,OAAO6e,KAAK2C,MAAMzT,IAAK,aACnC4G,MAAM/T,mCASTS,OACLmM,EAAQrN,EAAMC,GAAGoC,OAAOnB,GAASA,EAAMF,MAAM,KAAOpB,KAAKC,OAAOwN,MAAMrM,MAAM,KAC5EugB,EAAU,IAAMlU,EAAM,GAAKA,EAAM,GAEjCmU,GADS,IACUD,UACpB/b,SAASC,QAAQ1C,MAAMqc,cAAmBmC,WAC1C/S,MAAMzL,MAAM0e,yBAA2BD,oCAKtCnC,EAASzf,KAGTyL,QACIgU,EAAOxf,OAAOqR,KAAKvG,gBACf0U,EAAOE,iBACT,YACE,SACH,SACA,cACM,UACJ,SAEPmC,EAAS1hB,EAAM2hB,mBAAmBtW,GAClCrH,EAAKhE,EAAM4hB,aAAavC,EAAOjB,SAG/BtJ,EAAS9U,EAAMuD,cAAc,UAC7BC,oCAAwCQ,MAAM0d,IAC7Cjd,aAAa,MAAOjB,KACpBiB,aAAa,kBAAmB,MAChC+J,MAAMpI,YAAY0O,KAIlB6I,MAAQ,IAAIle,OAAO6hB,MAAMhC,OAAOxK,KAEhCtG,MAAM+D,QAAS,IACf/D,MAAM5E,YAAc,IAGpB4E,MAAM9F,KAAO,aACTiV,MAAMjV,OAAO9D,KAAK,aACd4J,MAAM+D,QAAS,OAGvB/D,MAAM7F,MAAQ,aACVgV,MAAMhV,QAAQ/D,KAAK,aACf4J,MAAM+D,QAAS,OAGvB/D,MAAM2R,KAAO,aACTxC,MAAMwC,OAAOvb,KAAK,aACd4J,MAAM+D,QAAS,IACf3I,YAAc,SAKvBA,EAAgByV,EAAO7Q,MAAvB5E,mBACC+E,eAAe0Q,EAAO7Q,MAAO,qCAErB5E,gBAEP+L,OAGQpD,EAAW8M,EAAO7Q,MAAlB+D,SAGD/D,MAAM+H,SAAU,IAGjB1K,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,aAGxCmP,MAAMkE,eAAelM,GAGxBpD,KACO5J,eAMfgK,EAAQ0M,EAAOxf,OAAO8S,MAAMmP,gBACzBnT,eAAe0Q,EAAO7Q,MAAO,sCAErBmE,gBAEPzR,KACOyc,MAAM6C,gBAAgBtf,GAAO0D,KAAK,aAC7B1D,IACF2K,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,uBAMrDhF,EAAW6V,EAAOxf,OAAlB2J,cACCmF,eAAe0Q,EAAO7Q,MAAO,gCAErBhF,gBAEPtI,KACOyc,MAAM+C,UAAUxf,GAAO0D,KAAK,aACtB1D,IACH2K,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,yBAMrDuC,EAAUsO,EAAOxf,OAAjBkR,aACCpC,eAAe0Q,EAAO7Q,MAAO,+BAErBuC,gBAEP7P,OACMuG,IAASzH,EAAMC,GAAGqL,QAAQpK,IAASA,IAElCyc,MAAM+C,UAAUjZ,EAAS,EAAI4X,EAAOxf,OAAO2J,QAAQ5E,KAAK,aACnD6C,IACFoE,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,yBAMrD0C,EAASmO,EAAOxf,OAAhBqR,YACCvC,eAAe0Q,EAAO7Q,MAAO,8BAErB0C,gBAEPhQ,OACMuG,EAASzH,EAAMC,GAAGqL,QAAQpK,GAASA,EAAQme,EAAOxf,OAAOqR,KAAKvG,SAE7DgT,MAAMoE,QAAQta,GAAQ7C,KAAK,aACvB6C,WAMfua,WACGrE,MAAMgD,cAAc/b,KAAK,cACf0C,WAEVqH,eAAe0Q,EAAO7Q,MAAO,oCAErBwT,YAKRrT,eAAe0Q,EAAO7Q,MAAO,+BAErB6Q,EAAOzV,cAAgByV,EAAO1V,oBAKrCsY,KAAK5C,EAAO1B,MAAMuE,gBAAiB7C,EAAO1B,MAAMwE,mBAAmBvd,KAAK,gBACtEyI,EAAQrN,EAAMoiB,eAAeC,EAAW,GAAIA,EAAW,MACvD/D,eAAe7d,OAAW4M,OAI7BsQ,MAAM2E,aAAajD,EAAOxf,OAAO0iB,WAAW3d,KAAK,cAC7C/E,OAAO0iB,UAAYzW,IAI1BuT,EAAOxf,OAAOwI,SAASF,SAAS,aAAekX,EAAOxf,OAAOqJ,SAASf,SAAS,YACtE2U,aAAarc,KAAK4e,KAIxB1B,MAAM6E,gBAAgB5d,KAAK,cACvB/E,OAAO+U,MAAQA,IACnBH,SAAShU,YAITkd,MAAM2C,iBAAiB1b,KAAK,cACjB0C,IACRuE,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,kBAI5CmP,MAAM0C,cAAczb,KAAK,cACrB4J,MAAM7E,SAAWrC,IAClBuE,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,sBAI5CmP,MAAM8E,gBAAgB7d,KAAK,cACvB4J,MAAMkM,WAAaQ,IACjBjL,MAAMxP,KAAK4e,OAGjB1B,MAAMnT,GAAG,YAAa,gBACrBqT,EAAM,KAEN3Z,EAAKwe,KAAKjgB,WACJzC,EAAM2iB,UAAUze,EAAKwe,KAAK,GAAG3d,SAG9B+Y,QAAQrd,KAAK4e,EAAQxB,OAG3BF,MAAMnT,GAAG,SAAU,WAClBxK,EAAMC,GAAGyG,YAAY2Y,EAAO1B,MAAMra,UAAY+b,EAAO3Q,UAAUb,IACjDwR,EAAO1B,MAAMra,QAIrBmB,aAAa,YAAa,OAIjCkZ,MAAMnT,GAAG,OAAQ,WAEhB6U,EAAO7Q,MAAM+D,UACP1G,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,UAE5CA,MAAM+D,QAAS,IAChB1G,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,eAG5CmP,MAAMnT,GAAG,QAAS,aACdgE,MAAM+D,QAAS,IAChB1G,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,aAG5CmP,MAAMnT,GAAG,aAAc,cACnBgE,MAAM+H,SAAU,IACTrS,EAAK0e,UACb/W,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,kBAG5CmP,MAAMnT,GAAG,WAAY,cACjBgE,MAAMgH,SAAWtR,EAAKmV,UACvBxN,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,YAEZ,IAA/BuH,SAAS7R,EAAKmV,QAAS,OAEjBxN,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,sBAIhDmP,MAAMnT,GAAG,SAAU,aACfgE,MAAM+H,SAAU,IACjB1K,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,YACzC3C,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,YAG5CmP,MAAMnT,GAAG,QAAS,aACdgE,MAAM+D,QAAS,IAChB1G,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,aAG5CmP,MAAMnT,GAAG,QAAS,cACdgE,MAAMxE,MAAQyB,IACfI,cAAcpL,KAAK4e,EAAQA,EAAO7Q,MAAO,kBAI5C8C,WAAW,kBAAMzD,EAAGqT,MAAMzgB,KAAK4e,IAAS,KCvSjDvR,EAAU9N,EAAM+N,aAEhBS,uBAIO5O,KAAK4O,WAMJsB,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWzD,KAAKe,QAAQ,MAAOxH,KAAKyG,OAAO,GAI9FzG,KAAKiV,WACC/E,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWzD,KAAKe,QAAQ,MAAO,UAAU,GAGhGxH,KAAK8O,UAAUb,OAETiC,YACFlQ,KAAK4F,SAASjB,UACd3E,KAAKC,OAAOiK,WAAWd,IAAI0F,UAC3BnO,EAAQyI,KAAqB,UAAdpJ,KAAKyG,QAIlByJ,YACFlQ,KAAK4F,SAASjB,UACd3E,KAAKC,OAAOiK,WAAWb,QAAQyF,UAC/BnO,EAAQ0I,SAAWrJ,KAAKyU,WAItBvE,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWmL,QAASrV,KAAKC,OAAO0f,YAGjFzP,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAW+Y,MAAO/U,EAAQ+U,SAG3E/S,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWgZ,QAASviB,EAAQ+R,SAIlF,QAAS,UAAW,SAASnK,SAASvI,KAAKyG,aAEvCb,SAASC,QAAUzF,EAAMuD,cAAc,aACjC3D,KAAKC,OAAOiK,WAAWoE,UAI5B6U,KAAKnjB,KAAK4O,MAAO5O,KAAK4F,SAASC,UAGrC7F,KAAKiV,eACGjV,KAAKyG,UACJ,YACO4J,MAAMxP,KAAKb,gBAGlB,UACKqQ,MAAMxP,KAAKb,WAMlBA,KAAKyU,WACTI,SAAShU,KAAKb,gBA/DZqK,QAAQC,KAAK,sDAsEjBtK,KAAKyU,gBAKJ1O,KAAK/F,KAAK4O,MAAMnL,iBAAiB,WAAWwC,QAAQ7F,EAAMsU,oBAK3D9F,MAAM/J,aAAa,MAAO7E,KAAKC,OAAOmjB,iBAKtCxU,MAAMuD,YAGN9H,QAAQ4F,IAAI,iCChGnBvD,2BAEajG,EAAMC,cACbtG,EAAMC,GAAGoC,OAAOiE,KACV2c,cAAc5c,EAAMzG,KAAK4O,WACtBlI,IAEFtG,EAAMC,GAAGsC,MAAM+D,MACXT,QAAQ,cACTod,cAAc5c,EAAMqE,EAAK8D,MAAO0U,sBAO3ChiB,cACElB,EAAMC,GAAGK,OAAOY,IAAY,YAAaA,GAAWA,EAAMiiB,QAAQ1gB,UAMjE2gB,eAAe3iB,KAAKb,WAGrByjB,QAAQ5iB,KACTb,KACA,gBAIU0U,cAAc1C,EAAKpD,SACpBA,MAAQ,KAGTxO,EAAMC,GAAGyG,YAAYkL,EAAKpM,SAASjB,cAC9BiB,SAASjB,UAAUqD,gBAAgB,SAIxC,SAAU1G,MACLmF,KAAOnF,EAAMmF,KAGA,UAAduL,EAAKvL,MAAkB,KACjBid,EAAcpiB,EAAMiiB,QAAQ,GAE9B,SAAUG,GAAeriB,EAAM0c,MAAMxV,SAASmb,EAAYjd,UACrDA,KAAOid,EAAYjd,eAM/BqI,UAAYnO,EAAQgjB,MAAM3R,EAAKvL,KAAMuL,EAAK/R,OAAO8N,QAG9CiE,EAAKvL,UACJ,UACImI,MAAQxO,EAAMuD,cAAc,mBAGhC,UACIiL,MAAQxO,EAAMuD,cAAc,mBAGhC,cACA,UACIiL,MAAQxO,EAAMuD,cAAc,SAC5B6a,QAAUld,EAAMiiB,QAAQ,GAAG3f,MAQnCgC,SAASjB,UAAU6B,YAAYwL,EAAKpD,OAGrCxO,EAAMC,GAAGqL,QAAQpK,EAAMqe,cAClB1f,OAAO0f,SAAWre,EAAMqe,UAI7B3N,EAAKyC,UACDzC,EAAK/R,OAAO2jB,eACPhV,MAAM/J,aAAa,cAAe,IAEvCmN,EAAK/R,OAAO0f,YACP/Q,MAAM/J,aAAa,WAAY,IAEpC,WAAYvD,KACPsN,MAAM/J,aAAa,SAAUvD,EAAMuiB,QAExC7R,EAAK/R,OAAOqR,KAAKvG,UACZ6D,MAAM/J,aAAa,OAAQ,IAEhCmN,EAAK/R,OAAOkR,SACPvC,MAAM/J,aAAa,QAAS,IAEjCmN,EAAK/R,OAAO8N,UACPa,MAAM/J,aAAa,cAAe,OAKzCqL,YACF8B,EAAKpM,SAASjB,UACdqN,EAAK/R,OAAOiK,WAAWX,SAASwB,OAChCiH,EAAKlD,UAAUb,IAAM+D,EAAKzI,SAAS3I,WAGpCkjB,aAAajjB,QAGZmR,EAAKyC,WACEsP,eAAeljB,OAAW,SAAUS,EAAMiiB,WAIhDtjB,OAAO+U,MAAQ1T,EAAM0T,QAGpB3E,MAAMxP,QAGRmR,EAAKyC,UAED,WAAYnT,KACLyiB,eAAeljB,OAAW,QAASS,EAAMga,UAI/C1M,MAAMuD,SAIXH,EAAKyC,SAAYzC,EAAKiD,UAAYjD,EAAKlD,UAAUb,OAE9CqT,MAAMzgB,UAGjB,SA9HKwJ,QAAQC,KAAK,2wCCN1B0Z,KACG,IACA,gCAKSnd,EAAQ4E,gCACX+J,eACAZ,OAAQ,OAGRhG,MAAQ/H,EAGTzG,EAAMC,GAAGoC,OAAOzC,KAAK4O,cAChBA,MAAQ5L,SAASS,iBAAiBzD,KAAK4O,SAK3C/O,OAAOokB,QAAUjkB,KAAK4O,iBAAiBqV,QACxC7jB,EAAMC,GAAGuC,SAAS5C,KAAK4O,QACvBxO,EAAMC,GAAGsC,MAAM3C,KAAK4O,eAGfA,MAAQ5O,KAAK4O,MAAM,SAIvB3O,OAASG,EAAMU,UAEhBG,EACAwK,EACC,sBAEclL,KAAKC,MAAMsK,EAAK8D,MAAMzC,aAAa,cAC5C,MAAOxG,UACE,MAJd,SAUAC,oBACU,gEAMD,gCAIA,WAIT2D,kBACQ,kBACK,WAIbC,oBACO,QAIPiC,mCAMApB,gEAKDrK,KAAKC,OAAOikB,OAAS,YAAarkB,cAC7BwK,aACIA,QAAQ4F,SACP5F,QAAQC,WACPD,QAAQD,YAEdC,QAAQ4F,IAAI,2BAIhB5F,QAAQ4F,IAAI,SAAUjQ,KAAKC,aAC3BoK,QAAQ4F,IAAI,UAAWtP,IAGxBP,EAAMC,GAAGyB,gBAAgB9B,KAAK4O,QAAWxO,EAAMC,GAAGyG,YAAY9G,KAAK4O,UAMnE5O,KAAK4O,MAAMuV,UACN9Z,QAAQC,KAAK,gCAKjBtK,KAAKC,OAAOW,WAOZD,EAAQgjB,QAAQ3V,UAMhBpI,SAASwe,SAAWpkB,KAAK4O,MAAMxI,WAAU,OAIxCK,EAAOzG,KAAK4O,MAAMyV,QAAQrL,qBAGxBvS,OAGC,cACIA,KAAOzG,KAAK4O,MAAMzC,aAAa,kBAC/BqS,QAAUxe,KAAK4O,MAAMzC,aAAa,iBAEnC/L,EAAMC,GAAGC,MAAMN,KAAKyG,uBACf4D,QAAQD,MAAM,uCAInBhK,EAAMC,GAAGC,MAAMN,KAAKwe,0BACfnU,QAAQD,MAAM,uCAKlBwE,MAAM5G,gBAAgB,kBACtB4G,MAAM5G,gBAAgB,2BAG1B,YACA,aACIvB,KAAOA,EAERzG,KAAK4O,MAAM0V,aAAa,sBACnBrkB,OAAO2jB,aAAc,GAE1B5jB,KAAK4O,MAAM0V,aAAa,mBACnBrkB,OAAO0f,UAAW,GAEvB3f,KAAK4O,MAAM0V,aAAa,sBACnBrkB,OAAO8N,QAAS,GAErB/N,KAAK4O,MAAM0V,aAAa,gBACnBrkB,OAAOkR,OAAQ,GAEpBnR,KAAK4O,MAAM0V,aAAa,eACnBrkB,OAAOqR,KAAKvG,QAAS,kCAMzBV,QAAQD,MAAM,oCAKnBiG,MAAMxP,KAAKb,WAGd8O,UAAYnO,EAAQgjB,MAAM3jB,KAAKyG,KAAMzG,KAAKC,OAAO8N,QAGjD/N,KAAK8O,UAAUd,UAMfY,MAAMuV,KAAOnkB,UAGb4F,SAASjB,UAAYvE,EAAMuD,cAAc,SACxCwf,KAAKnjB,KAAK4O,MAAO5O,KAAK4F,SAASjB,gBAGhCiB,SAASjB,UAAUE,aAAa,WAAY,KAGvC2M,OAAO3Q,KAAKb,QAGnB8jB,aAAajjB,KAAKb,QAGfqQ,MAAMxP,KAAKb,MAGbA,KAAKC,OAAOikB,SACNtZ,GAAG5K,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOuL,OAAO0B,KAAK,KAAM,cACvD7C,QAAQ4F,cAAchM,EAAMwC,SAMrCzG,KAAKyU,SAAYzU,KAAKiV,UAAYjV,KAAK8O,UAAUb,OAC9CqT,MAAMzgB,KAAKb,YAjCTqK,QAAQD,MAAM,sCArEdC,QAAQD,MAAM,sCAPdC,QAAQD,MAAM,8CAZdC,QAAQD,MAAM,2FAmJnB,SAAUpK,KAAK4O,YACVA,MAAM9F,OAER9I,2CAOH,UAAWA,KAAK4O,YACXA,MAAM7F,QAER/I,wCA4BA6H,UAEDzH,EAAMC,GAAGqL,QAAQ7D,IAAW7H,KAAK4O,MAAM+D,QAAW9K,EAC7C7H,KAAK8I,OAGT9I,KAAK+I,8CAOL/I,KAAKgJ,UAAUD,sDAOjBiB,YAAc,EACZhK,oCAOJod,eACEpT,YAAchK,KAAKgK,aAAe5J,EAAMC,GAAG0M,OAAOqQ,GAAYA,EAAWpd,KAAKC,OAAOmd,UACnFpd,qCAOHod,eACCpT,YAAchK,KAAKgK,aAAe5J,EAAMC,GAAG0M,OAAOqQ,GAAYA,EAAWpd,KAAKC,OAAOmd,UACnFpd,4CA+GIukB,OACL3a,EAAS5J,KAAK4O,MAAMuC,MAAQ,EAAInR,KAAK4J,mBACtCA,OAASA,EAASxJ,EAAMC,GAAG0M,OAAOwX,GAAQA,EAAO,EAC/CvkB,4CAOIukB,OACL3a,EAAS5J,KAAK4O,MAAMuC,MAAQ,EAAInR,KAAK4J,mBACtCA,OAASA,EAASxJ,EAAMC,GAAG0M,OAAOwX,GAAQA,EAAO,EAC/CvkB,4CA0PIsB,OAENtB,KAAK8O,UAAUb,KAAO7N,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASgD,QAAQW,iBAC3DvJ,SAILyb,EAAOrb,EAAMC,GAAGqL,QAAQpK,GACxBA,GACuF,IAAvFtB,KAAK4F,SAASjB,UAAU4C,UAAUiQ,QAAQxX,KAAKC,OAAOiK,WAAWX,SAASwB,eAG5E/K,KAAKuJ,SAAS3I,UAAY6a,EACnBzb,WAINuJ,SAAS3I,QAAU6a,IAGlBtL,YAAYnQ,KAAK4F,SAASgD,QAAQW,SAAUvJ,KAAKuJ,SAAS3I,WAG1DsP,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWX,SAASwB,OAAQ/K,KAAKuJ,SAAS3I,WAG3FqL,cAAcpL,KAAKb,KAAMA,KAAK4O,MAAO5O,KAAKuJ,SAAS3I,QAAU,kBAAoB,oBAGhFZ,+CAsDMiE,MAETuF,EAAW5I,QAAS,KAChBR,EAAMC,GAAG4D,MAAMA,IAAUA,EAAMwC,OAAS+C,EAAWqI,iBAK9C7R,KAAKwJ,WAAWuB,SAGNoE,qBAFAU,kBAAkB7P,KAAK4F,SAASjB,WAKxC3E,UATFwJ,WAAWuB,OAASvB,EAAWgb,aAAaxkB,KAAK4F,SAASjB,qBAa9D6E,WAAWuB,QAAU/K,KAAKwJ,WAAWuB,SAGpCmF,YACFlQ,KAAK4F,SAASjB,UACd3E,KAAKC,OAAOiK,WAAWV,WAAWuG,SAClC/P,KAAKwJ,WAAWuB,QAIhB/K,KAAKwJ,WAAWuB,YAETlL,OAAO4kB,aAAe,IACtB5kB,OAAO6kB,aAAe,UAGtBC,SAASX,EAAeY,EAAGZ,EAAea,YAI5CrgB,KAAKrB,MAAM2hB,SAAW9kB,KAAKwJ,WAAWuB,OAAS,SAAW,UAInE3K,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAASgD,QAAQY,eACrC2G,YAAYnQ,KAAK4F,SAASgD,QAAQY,WAAYxJ,KAAKwJ,WAAWuB,UAIlEkB,cAAcpL,KAAKb,KAAMA,KAAK4O,MAAO5O,KAAKwJ,WAAWuB,OAAS,kBAAoB,kBAEjF/K,8CA2CFW,EAAQ0I,cAKRuF,MAAMmW,iCAEJ/kB,MANIA,4CAaA6H,kBAENzH,EAAMC,GAAGyG,YAAY9G,KAAK4F,SAAS6C,iBAC7BzI,SAINA,KAAK8O,UAAUb,KAAOjO,KAAKC,OAAO0R,cAA8B,UAAd3R,KAAKyG,YACjDzG,SAGPglB,EAAQ,EACRvJ,EAAO5T,EACPod,GAAoB,KAGnB7kB,EAAMC,GAAGqL,QAAQ7D,KACdzH,EAAMC,GAAG4D,MAAM4D,MAEqB,oBAAhBA,EAAOpB,QAGnB,QAAS,YAAa,YAAa,aAAc,WAAW8B,SAASV,EAAOpB,OAG/E,YAAa,aAAa8B,SAASV,EAAOpB,UACnC,KAIQ,YAAhBoB,EAAOpB,SACC,MACFyJ,YAAYlQ,KAAK4F,SAAS6C,SAAUzI,KAAKC,OAAOiK,WAAWgb,cAAc,OAG5E9kB,EAAM2Z,SAAS/Z,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWyH,sBAKvEwT,aAAanlB,KAAKwV,OAAOtB,OAG5BuH,GAAQzb,KAAK4O,MAAM+D,QAAU3S,KAAKuV,QAAS,IAE3BnV,EAAM8P,YAAYlQ,KAAK4F,SAASjB,UAAW3E,KAAKC,OAAOiK,WAAWyH,cAAc,MAItF1F,cAAcpL,KAAKb,KAAMA,KAAK4O,MAAO,iBAI3C5O,KAAK4O,MAAM+D,QAAU3S,KAAKuV,eACnBvV,KAIPW,EAAQ+R,UACA,YAMX+I,GAASzb,KAAK4O,MAAM+D,cAChB6C,OAAOtB,MAAQrU,OAAO6R,WAAW,aAE7BM,EAAKpM,SAAS6C,SAASmI,UAAWoB,EAAKpM,SAAS6C,SAASyL,OAAW+Q,KAKpE7kB,EAAM2Z,SAAS/H,EAAKpM,SAASjB,UAAWqN,EAAK/R,OAAOiK,WAAWyH,iBAC1DzB,YAAY8B,EAAKpM,SAAS6C,SAAUuJ,EAAK/R,OAAOiK,WAAWgb,cAAc,GAInE9kB,EAAM8P,YAAY8B,EAAKpM,SAASjB,UAAWqN,EAAK/R,OAAOiK,WAAWyH,cAAc,OAItF1F,cAAcpL,OAAWmR,EAAKpD,MAAO,kBAEvCoD,EAAK/R,OAAOwI,SAASF,SAAS,cAAgBnI,EAAMC,GAAGC,MAAM0R,EAAK/R,OAAOqJ,aAChEoK,WAAW7S,QAAW,MAGxCmkB,IAGAhlB,gCAQRiE,EAAOT,YACAoH,GAAG5K,KAAK4F,SAASjB,UAAWV,EAAOT,GAClCxD,iCAQPiE,EAAOT,YACDiZ,IAAIzc,KAAK4F,SAASjB,UAAWV,EAAOT,GACnCxD,sCAOFyG,UACE9F,EAAQykB,KAAKvkB,KAAKb,KAAMyG,mCAU3BjD,cAAU6hB,0DACRC,EAAO,uBAEA9gB,KAAKrB,MAAM2hB,SAAW,KAG1B/G,MAAQ,OACRS,QAAU,KAGX6G,EACI7jB,OAAOsB,KAAK0Q,EAAK5N,UAAU/C,SAEvB2Q,EAAK5N,SAASgD,SAAW4K,EAAK5N,SAASgD,QAAQE,YACzC/C,KAAKyN,EAAK5N,SAASgD,QAAQE,MAAM7C,QAAQ,mBAAU7F,EAAMsU,cAAcY,OAI3EZ,cAAclB,EAAK5N,SAAS2D,YAC5BmL,cAAclB,EAAK5N,SAAS6C,YAC5BiM,cAAclB,EAAK5N,SAASC,WAG7BD,SAASgD,QAAQE,KAAO,OACxBlD,SAAS2D,SAAW,OACpB3D,SAAS6C,SAAW,OACpB7C,SAASC,QAAU,MAIxBzF,EAAMC,GAAG0D,SAASP,YAGnB,KAEG6C,EAASmN,EAAK5N,SAASjB,UAAUT,WAEnC9D,EAAMC,GAAGyG,YAAYT,MACdkf,aAAa/R,EAAK5N,SAASwe,SAAU5Q,EAAK5N,SAASjB,aAIxDsH,cAAcpL,OAAW2S,EAAK5N,SAASwe,SAAU,aAAa,GAGhEhkB,EAAMC,GAAG0D,SAASP,MACT3C,KAAK2S,EAAK5N,SAASwe,YAI3Bxe,SAAW,cAKhB5F,KAAKyG,UACJ,iBAEMwa,cAAcjhB,KAAKwV,OAAO0L,kBAC1BD,cAAcjhB,KAAKwV,OAAOJ,cAG5B2I,MAAM0F,wBAOV,aAGI1F,MAAMyH,SAASxgB,KAAKsgB,UAGlB5T,WAAW4T,EAAM,eAIvB,YACA,UAEE/a,qBAAqB1J,KAAKb,MAAM,+CAp2BpCqB,EAAMokB,MAAMld,SAASvI,KAAKyG,6CAO1BpF,EAAM0c,MAAMxV,SAASvI,KAAKyG,4CA2B1BzG,KAAK4O,MAAM+D,8CAOV3S,KAAK2S,SAAW3S,KAAK4S,SAAU5S,KAAKyU,SAAUzU,KAAK4O,MAAM8W,WAAa,wCAOvE1lB,KAAK4O,MAAMgE,wCAqDNtR,OACRqkB,EAAa,EAEbvlB,EAAMC,GAAG0M,OAAOzL,OACHA,GAIbqkB,EAAa,IACA,EACNA,EAAa3lB,KAAK+J,aACZ/J,KAAK+J,eAIjB6E,MAAM5E,YAAc2b,EAAWrZ,QAAQ,QAGvCjC,QAAQ4F,kBAAkBjQ,KAAKgK,+CAO7BvI,OAAOzB,KAAK4O,MAAM5E,oDAOlBhK,KAAK4O,MAAM+H,6CAQZiP,EAAezP,SAASnW,KAAKC,OAAO8J,SAAU,IAG9C8b,EAAepkB,OAAOzB,KAAK4O,MAAM7E,iBAG/BtI,OAAOC,MAAMkkB,GAA+BC,EAAfD,+BAO9Ble,OACHkC,EAASlC,EAITtH,EAAMC,GAAGoC,OAAOmH,OACPnI,OAAOmI,IAIfxJ,EAAMC,GAAG0M,OAAOnD,OACH1J,EAAQP,IAAIkB,KAAKb,MAA5B4J,QAIFxJ,EAAMC,GAAG0M,OAAOnD,OACH5J,KAAKC,OAAhB2J,QAIHA,EAlBQ,MAAA,GAsBRA,EArBQ,MAAA,QA0BP3J,OAAO2J,OAASA,OAGhBgF,MAAMhF,OAASA,EAGhB5J,KAAKmR,OAASvH,EAAS,SAClBuH,OAAQ,0BAQVnR,KAAK4O,MAAMhF,mCA2BZT,OACFtB,EAASsB,EAGR/I,EAAMC,GAAGqL,QAAQ7D,OACT3H,EAAQP,IAAIkB,KAAKb,MAAMmR,OAI/B/Q,EAAMC,GAAGqL,QAAQ7D,OACT7H,KAAKC,OAAOkR,YAIpBlR,OAAOkR,MAAQtJ,OAGf+G,MAAMuC,MAAQtJ,yBAOZ7H,KAAK4O,MAAMuC,8CAQbnR,KAAKyU,UAMNzU,KAAK4O,MAAMkX,aACXlkB,QAAQ5B,KAAK4O,MAAMmX,8BACnBnkB,QAAQ5B,KAAK4O,MAAMoX,aAAehmB,KAAK4O,MAAMoX,YAAYnjB,qCAQvDvB,OACFyR,EAAQ,QAER3S,EAAMC,GAAG0M,OAAOzL,GACRA,EACDlB,EAAMC,GAAG0M,OAAO7M,EAAQP,IAAIkB,KAAKb,MAAM+S,OACjC7S,EAAQP,IAAIkB,KAAKb,MAA3B+S,MAEK/S,KAAKC,OAAO8S,MAAMmP,UAIlB,OACA,IAERnP,EAAQ,MACA,GAGP/S,KAAKC,OAAO8S,MAAMtH,QAAQlD,SAASwK,SAMnC9S,OAAO8S,MAAMmP,SAAWnP,OAGxBnE,MAAMsR,aAAenN,QARjB1I,QAAQC,2BAA2ByI,8BAerC/S,KAAK4O,MAAMsR,2CAQV5e,OACJ0R,EAAU,OAEV5S,EAAMC,GAAGoC,OAAOnB,GACNA,EACHlB,EAAMC,GAAG0M,OAAO7M,EAAQP,IAAIkB,KAAKb,MAAMgT,SAC/B9S,EAAQP,IAAIkB,KAAKb,MAA7BgT,QAEOhT,KAAKC,OAAO+S,QAAQkP,SAG7BliB,KAAKyL,QAAQuH,QAAQzK,SAASyK,SAM9B/S,OAAO+S,QAAQkP,SAAWlP,OAG1BpE,MAAMoE,QAAUA,QARZ3I,QAAQC,oCAAoC0I,8BAe9ChT,KAAK4O,MAAMoE,mCAQb1R,OACCuG,EAASzH,EAAMC,GAAGqL,QAAQpK,GAASA,EAAQtB,KAAKC,OAAOqR,KAAKvG,YAC7D9K,OAAOqR,KAAKvG,OAASlD,OACrB+G,MAAM0C,KAAOzJ,yBAkDX7H,KAAK4O,MAAM0C,kCAOXhQ,KACA2kB,OAAOplB,KAAKb,KAAMsB,0BAOlBtB,KAAK4O,MAAMwT,wCAOX9gB,GACFtB,KAAKyU,SAAyB,UAAdzU,KAAKyG,KAKtBrG,EAAMC,GAAGoC,OAAOnB,SACXsN,MAAM/J,aAAa,SAAUvD,QAL7B+I,QAAQC,KAAK,gEAajBtK,KAAKyU,SAAyB,UAAdzU,KAAKyG,KAInBzG,KAAK4O,MAAMzC,aAAa,UAHpB,oCAUF7K,OACHuG,EAASzH,EAAMC,GAAGqL,QAAQpK,GAASA,EAAQtB,KAAKC,OAAO0f,cACxD1f,OAAO0f,SAAW9X,yBAOhB7H,KAAKC,OAAO0f,wCA2CVre,MAEJlB,EAAMC,GAAGoC,OAAOnB,UAKhB+P,gBAAgBjR,EAAMC,GAAGC,MAAMgB,KAGhClB,EAAMC,GAAGC,MAAMgB,SAKbH,EAAWG,EAAM0X,cAGnBhZ,KAAKmB,WAAaA,SAKjBoI,SAASpI,SAAWA,IAGhB+c,QAAQrd,KAAKb,KAAM,QAGnB0d,YAAY7c,KAAKb,QAGpBiM,cAAcpL,KAAKb,KAAMA,KAAK4O,MAAO,2CAOpC5O,KAAKuJ,SAASpI,mCAiEjBG,OACE4kB,OACG,4BACG,aAIPvlB,EAAQyI,SAKPvB,EAASzH,EAAMC,GAAGqL,QAAQpK,GAASA,EAAQtB,KAAKoJ,MAAQ8c,EAAOnY,YAGhEa,MAAMF,0BAA0B7G,EAASqe,EAAO9c,IAAM8c,EAAOnY,gCAO7DpN,EAAQyI,IAINpJ,KAAK4O,MAAMuX,uBAHP"}