{"version":3,"file":"plyr.js","sources":["src/js/storage.js","src/js/defaults.js","src/js/types.js","src/js/utils.js","src/js/support.js","src/js/fullscreen.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\n// Get contents of local storage\nfunction get() {\n    const store = window.localStorage.getItem(this.config.storage.key);\n\n    if (utils.is.empty(store)) {\n        return {};\n    }\n\n    return JSON.parse(store);\n}\n\n// Save a value back to local storage\nfunction set(object) {\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return;\n    }\n\n    // Can only store objectst\n    if (!utils.is.object(object)) {\n        return;\n    }\n\n    // Get current storage\n    const storage = get.call(this);\n\n    // Update the working copy of the values\n    utils.extend(storage, object);\n\n    // Update storage\n    window.localStorage.setItem(this.config.storage.key, JSON.stringify(storage));\n}\n\n// Setup localStorage\nfunction setup() {\n    let value = null;\n    let storage = {};\n\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return storage;\n    }\n\n    // Clean up old volume\n    // https://github.com/sampotts/plyr/issues/171\n    window.localStorage.removeItem('plyr-volume');\n\n    // load value from the current key\n    value = window.localStorage.getItem(this.config.storage.key);\n\n    if (!value) {\n        // Key wasn't set (or had been cleared), move along\n    } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n        // If value is a number, it's probably volume from an older\n        // version of this. See: https://github.com/sampotts/plyr/pull/313\n        // Update the key to be JSON\n        set({\n            volume: parseFloat(value),\n        });\n    } else {\n        // Assume it's JSON from this or a later version of plyr\n        storage = JSON.parse(value);\n    }\n\n    return storage;\n}\n\nexport default { setup, set, get };\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration\n    displayDuration: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video to play\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: ['hd2160', 'hd1440', 'hd1080', 'hd720', 'large', 'medium', 'small', 'tiny', 'default'],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        default: 1,\n        options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: ['captions', 'quality', 'speed', 'loop'],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        toggleMute: 'Toggle Mute',\n        toggleCaptions: 'Toggle Captions',\n        toggleFullscreen: 'Toggle Fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'captionchange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        muted: 'plyr--muted',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types\n// ==========================================================================\n\nconst types = {\n    embed: ['youtube', 'vimeo'],\n    html5: ['video', 'audio'],\n};\n\nexport default types;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.undefined(input) && Array.isArray(input);\n        },\n        nodeList(input) {\n            return !this.undefined(input) && input instanceof NodeList;\n        },\n        htmlElement(input) {\n            return !this.undefined(input) && input instanceof HTMLElement;\n        },\n        event(input) {\n            return !this.undefined(input) && input instanceof Event;\n        },\n        cue(input) {\n            return this.instanceOf(input, window.TextTrackCue) || this.instanceOf(input, window.VTTCue);\n        },\n        track(input) {\n            return (\n                !this.undefined(input) && (this.instanceOf(input, window.TextTrack) || typeof input.kind === 'string')\n            );\n        },\n        undefined(input) {\n            return input !== null && typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                input === null ||\n                typeof input === 'undefined' ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && input.length === 0) ||\n                (this.object(input) && Object.keys(input).length === 0)\n            );\n        },\n        getConstructor(input) {\n            if (input === null || typeof input === 'undefined') {\n                return null;\n            }\n\n            return input.constructor;\n        },\n        instanceOf(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url) {\n        // Check script is not already referenced\n        if (document.querySelectorAll(`script[src=\"${url}\"]`).length) {\n            return;\n        }\n\n        const tag = document.createElement('script');\n        tag.src = url;\n\n        const firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (typeof url !== 'string') {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = typeof id === 'string';\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            container.setAttribute('hidden', '');\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                }\n            }\n\n            // ReSharper disable once InconsistentNaming\n            const xhr = new XMLHttpRequest();\n\n            // XHR for Chrome/Firefox/Opera/Safari\n            if ('withCredentials' in xhr) {\n                xhr.open('GET', url, true);\n            } else {\n                return;\n            }\n\n            // Once loaded, inject to container and body\n            xhr.onload = () => {\n                if (support.storage) {\n                    window.localStorage.setItem(\n                        prefix + id,\n                        JSON.stringify({\n                            content: xhr.responseText,\n                        })\n                    );\n                }\n\n                updateSprite.call(container, xhr.responseText);\n            };\n\n            xhr.send();\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.htmlElement(element) || !utils.is.htmlElement(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.htmlElement(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.htmlElement(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches =\n            prototype.matches ||\n            prototype.webkitMatchesSelector ||\n            prototype.mozMatchesSelector ||\n            prototype.msMatchesSelector ||\n            match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.htmlElement(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(\n                    `.${this.config.classNames.tooltip}`\n                );\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const tabbables = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = tabbables[0];\n        const last = tabbables[tabbables.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // Bail if not tab key or not fullscreen\n                if (event.key !== 'Tab' || event.keyCode !== 9 || !this.fullscreen.active) {\n                    return;\n                }\n\n                // Get the current focused element\n                const focused = utils.getFocusElement();\n\n                if (focused === last && !event.shiftKey) {\n                    // Move focus to first element that can be tabbed if Shift isn't used\n                    first.focus();\n                    event.preventDefault();\n                } else if (focused === first && event.shiftKey) {\n                    // Move focus to last element that can be tabbed if Shift is used\n                    last.focus();\n                    event.preventDefault();\n                }\n            },\n            false\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (elements === null || utils.is.undefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, properties) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, properties, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(target, state) {\n        // Bail if no target\n        if (!target) {\n            return null;\n        }\n\n        // Get state\n        const newState = utils.is.boolean(state) ? state : !target.getAttribute('aria-pressed');\n\n        // Set the attribute on target\n        target.setAttribute('aria-pressed', newState);\n\n        return newState;\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    extend(...objects) {\n        const { length } = objects;\n\n        // Bail if nothing to merge\n        if (!length) {\n            return null;\n        }\n\n        // Return first if specified but nothing to merge\n        if (length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        let destination = Array.prototype.shift.call(objects);\n        if (!utils.is.object(destination)) {\n            destination = {};\n        }\n\n        // Loop through all objects to merge\n        objects.forEach(source => {\n            if (!utils.is.object(source)) {\n                return;\n            }\n\n            Object.keys(source).forEach(property => {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    utils.extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            });\n        });\n\n        return destination;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert object to URL parameters\n    buildUrlParameters(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (type) {\n            case 'video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Local storage\n    // We can't assume if local storage is present that we can use it\n    storage: (() => {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        const test = '___test';\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    })(),\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.type === 'video') {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.type === 'audio') {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        ['webkit', 'o', 'moz', 'ms', 'khtml'].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled:\n        document.fullscreenEnabled ||\n        document.webkitFullscreenEnabled ||\n        document.mozFullScreenEnabled ||\n        document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        return !prefix.length\n            ? target.requestFullScreen()\n            : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length\n            ? document.cancelFullScreen()\n            : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.type === 'audio' || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport storage from './storage';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst listeners = {\n    // Global listeners\n    global() {\n        let last = null;\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const held = pressed && code === last;\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.htmlElement(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!held) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!held) {\n                            this.warn('togglePlay', event.type);\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!held) {\n                            this.muted = 'toggle';\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!held) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(\n                this.elements.container,\n                'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen',\n                event => {\n                    this.toggleControls(event);\n                }\n            );\n        }\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.displayDuration.call(this, event));\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.type === 'video' && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'waiting canplay seeked', event => ui.checkLoading.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && this.type !== 'audio') {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!wrapper) {\n                return;\n            }\n\n            // Set cursor\n            wrapper.style.cursor = 'pointer';\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.media.paused) {\n                    return;\n                }\n\n                if (this.media.paused) {\n                    this.play();\n                } else if (this.media.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save speed to localStorage\n            storage.set.call(this, { speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save speed to localStorage\n            storage.set.call(this, { quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'captionchange', () => {\n            // Save speed to localStorage\n            storage.set.call(this, { language: this.language });\n        });\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save speed to localStorage\n            storage.set.call(this, { volume: this.volume });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save speed to localStorage\n            storage.set.call(this, { captions: this.captions.enabled });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat(['keyup', 'keydown']).join(' '), event => {\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Click play/pause helper\n        const togglePlay = () => {\n            const play = this.togglePlay();\n\n            // Determine which buttons\n            const target = this.elements.buttons[play ? 'pause' : 'play'];\n\n            // Transfer focus\n            if (utils.is.htmlElement(target)) {\n                target.focus();\n            }\n        };\n\n        // Play\n        utils.on(this.elements.buttons.play, 'click', event => proxy(event, 'play', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.pause, 'click', event => proxy(event, 'pause', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = 'toggle';\n            })\n        );\n\n        // Captions\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airPlay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            // Show tab in menu\n            controls.showTab.call(this, event);\n\n            // Settings menu items - use event delegation as items are added/removed\n            // Settings - Language\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.toggleCaptions(true);\n                    this.language = event.target.value.toLowerCase();\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                // Settings - Quality\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                // Settings - Speed\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else if (utils.matches(event.target, this.config.selectors.buttons.loop)) {\n                // Settings - Looping\n                // TODO: use toggle buttons\n                proxy(event, 'loop', () => {\n                    // TODO: This should be done in the method itself I think\n                    // var value = event.target.getAttribute('data-loop__value') || event.target.getAttribute('data-loop__type');\n\n                    this.warn('Set loop');\n                });\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event =>\n            controls.updateSeekTooltip.call(this, event)\n        );\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = ['mousedown', 'touchstart'].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            // TODO: Check we need capture here\n            utils.on(\n                this.elements.controls,\n                'focus blur',\n                event => {\n                    this.toggleControls(event);\n                },\n                true\n            );\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.warn(`Basic support only for ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Set volume\n        this.volume = null;\n        // this.muted = null;\n\n        // Set playback speed\n        this.speed = null;\n\n        // Set loop\n        this.loop = null;\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Autoplay\n        // TODO: check we still need this?\n        /* if (this.isEmbed && this.config.autoplay) {\n            this.play();\n        } */\n    },\n\n    // Show the duration on metadataloaded\n    displayDuration() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's only one time display, display duration there\n        if (!this.elements.display.duration && this.config.displayDuration && this.media.paused) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.currentTime);\n        }\n\n        // If there's a duration element, update content\n        if (this.elements.display.duration) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (this.supported.ui) {\n            if (utils.is.htmlElement(this.elements.buttons.play)) {\n                this.elements.buttons.play.setAttribute('aria-label', label);\n            }\n            if (utils.is.htmlElement(this.elements.buttons.playLarge)) {\n                this.elements.buttons.playLarge.setAttribute('aria-label', label);\n            }\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.htmlElement(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, !this.media.paused);\n\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.media.paused);\n\n        this.toggleControls(this.media.paused);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        // Update the <input type=\"range\"> if present\n        if (this.supported.ui) {\n            const value = this.muted ? 0 : this.volume;\n\n            if (utils.is.htmlElement(this.elements.inputs.volume)) {\n                ui.setRange.call(this, this.elements.inputs.volume, value);\n            }\n        }\n\n        // Toggle class if muted\n        utils.toggleClass(this.elements.container, this.config.classNames.muted, this.muted);\n\n        // Update checkbox for mute state\n        if (this.supported.ui && utils.is.htmlElement(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted);\n        }\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = event.type === 'waiting';\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value) {\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        // Default to 0\n        const value = !utils.is.undefined(input) ? input : 0;\n        const progress = !utils.is.undefined(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.htmlElement(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.htmlElement(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(value, element) {\n        // Bail if there's no duration display\n        if (!utils.is.htmlElement(element)) {\n            return null;\n        }\n\n        // Fallback to 0\n        const time = !Number.isNaN(value) ? value : 0;\n\n        let secs = parseInt(time % 60, 10);\n        let mins = parseInt((time / 60) % 60, 10);\n        const hours = parseInt((time / 60 / 60) % 60, 10);\n\n        // Do we need to display hours?\n        const displayHours = parseInt((this.duration / 60 / 60) % 60, 10) > 0;\n\n        // Ensure it's two digits. For example, 03 rather than 3.\n        secs = `0${secs}`.slice(-2);\n        mins = `0${mins}`.slice(-2);\n\n        // Generate display\n        const display = `${(displayHours ? `${hours}:` : '') + mins}:${secs}`;\n\n        // Render\n        element.textContent = display;\n\n        // Return for looping\n        return display;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Duration\n        ui.updateTimeDisplay.call(this, this.currentTime, this.elements.display.currentTime);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.htmlElement(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Inject the stylesheet if needed\n        if (!utils.is.htmlElement(this.elements.styleSheet)) {\n            this.elements.styleSheet = utils.createElement('style');\n            this.elements.container.appendChild(this.elements.styleSheet);\n        }\n\n        const styleSheet = this.elements.styleSheet.sheet;\n        const percentage = range.value / range.max * 100;\n        const selector = `#${range.id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const index = Array.from(styleSheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (index !== -1) {\n            styleSheet.deleteRule(index);\n        }\n\n        // Insert new one\n        styleSheet.insertRule([selector, styles].join(' '));\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // If the new `href` attribute is supported, use that\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttribute('href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type) {\n        let text = this.config.i18n[type];\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        return utils.createElement(\n            'span',\n            {\n                class: this.config.classNames.hidden,\n            },\n            text\n        );\n    },\n\n    // Create a badge\n    createBadge(text) {\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n        let iconDefault;\n        let iconToggled;\n        let labelKey;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.indexOf(this.config.classNames.control) === -1) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'mute':\n                labelKey = 'toggleMute';\n                iconDefault = 'volume';\n                iconToggled = 'muted';\n                break;\n\n            case 'captions':\n                labelKey = 'toggleCaptions';\n                iconDefault = 'captions-off';\n                iconToggled = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                labelKey = 'toggleFullscreen';\n                iconDefault = 'enter-fullscreen';\n                iconToggled = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class = 'plyr__play-large';\n                type = 'play';\n                labelKey = 'play';\n                iconDefault = 'play';\n                break;\n\n            default:\n                labelKey = type;\n                iconDefault = type;\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        // Add toggle icon if needed\n        if (utils.is.string(iconToggled)) {\n            button.appendChild(\n                controls.createIcon.call(this, iconToggled, {\n                    class: `icon--${iconToggled}`,\n                })\n            );\n        }\n\n        button.appendChild(controls.createIcon.call(this, iconDefault));\n        button.appendChild(controls.createLabel.call(this, labelKey));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('span', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(\n            utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00')\n        );\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.htmlElement(this.elements.inputs.seek) ||\n            !utils.is.htmlElement(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = this.elements.display.seekTooltip.style.left.replace('%', '');\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.duration / 100 * percent, this.elements.display.seekTooltip);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && ['mouseenter', 'mouseleave'].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        if (utils.is.htmlElement(tab)) {\n            if (toggle) {\n                tab.removeAttribute('hidden');\n            } else {\n                tab.setAttribute('hidden', '');\n            }\n        }\n\n        if (utils.is.htmlElement(pane)) {\n            if (toggle) {\n                pane.removeAttribute('hidden');\n            } else {\n                pane.setAttribute('hidden', '');\n            }\n        }\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.type === 'youtube';\n        controls.toggleTab.call(this, 'quality', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.quality), {\n                    type: 'radio',\n                    name: 'plyr-quality',\n                    value: quality,\n                })\n            );\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(controls.getLabel.call(this, 'quality', quality)));\n\n            const badge = getBadge(quality);\n            if (utils.is.htmlElement(badge)) {\n                label.appendChild(badge);\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'quality', list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.language;\n\n                if (!this.captions.enabled) {\n                    value = '';\n                }\n\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.htmlElement(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // Check it\n        target.checked = true;\n\n        // Find the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n    },\n\n    // Set the looping options\n    setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.loop.removeAttribute('hidden');\n        this.elements.settings.panes.loop.removeAttribute('hidden');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    },\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || utils.is.empty(this.captions.tracks)) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.enabled) {\n            return this.captions.currentTrack.label;\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.captions.tracks);\n        controls.toggleTab.call(this, 'captions', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = Array.from(this.captions.tracks).map(track => ({\n            language: track.language,\n            badge: true,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.language), {\n                    type: 'radio',\n                    name: 'plyr-language',\n                    value: track.language,\n                })\n            );\n\n            if (track.language.toLowerCase() === this.captions.language.toLowerCase()) {\n                radio.checked = true;\n            }\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(track.label || track.language));\n\n            if (track.badge) {\n                label.appendChild(controls.createBadge.call(this, track.language.toUpperCase()));\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'captions', list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.speed = options.filter(speed => this.config.speed.options.includes(speed));\n        } else {\n            this.options.speed = this.config.speed.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, 'speed', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.speed.removeAttribute('hidden');\n        this.elements.settings.panes.speed.removeAttribute('hidden');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.speed), {\n                    type: 'radio',\n                    name: 'plyr-speed',\n                    value: speed,\n                })\n            );\n\n            label.appendChild(radio);\n            label.insertAdjacentHTML('beforeend', controls.getLabel.call(this, 'speed', speed));\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'speed', list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : form && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = form && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (button) {\n            button.setAttribute('aria-expanded', show);\n        }\n        if (form) {\n            form.setAttribute('aria-hidden', !show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.htmlElement(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || !['width', 'height'].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement(\n            'div',\n            utils.getAttributesFromSelector(this.config.selectors.controls.wrapper)\n        );\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement(\n                'span',\n                utils.getAttributesFromSelector(this.config.selectors.progress)\n            );\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('span', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.htmlElement(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.htmlElement(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.htmlElement(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport storage from './storage';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        if (!utils.is.empty(storage.get.call(this).language)) {\n            this.captions.language = storage.get.call(this).language;\n        } else if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.enabled)) {\n            if (!utils.is.empty(storage.get.call(this).language)) {\n                this.captions.enabled = storage.get.call(this).captions;\n            } else {\n                this.captions.enabled = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!['video', 'vimeo'].includes(this.type) || (this.type === 'video' && !support.textTracks)) {\n            this.captions.tracks = null;\n\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.htmlElement(this.elements.captions)) {\n            this.elements.captions = utils.createElement(\n                'div',\n                utils.getAttributesFromSelector(this.config.selectors.captions)\n            );\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Get tracks from HTML5\n        if (this.type === 'video') {\n            this.captions.tracks = this.media.textTracks;\n        }\n\n        // Set the class hook\n        utils.toggleClass(\n            this.elements.container,\n            this.config.classNames.captions.enabled,\n            !utils.is.empty(this.captions.tracks)\n        );\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Get a track\n        const setCurrentTrack = () => {\n            // Reset by default\n            this.captions.currentTrack = null;\n\n            // Filter doesn't seem to work for a TextTrackList :-(\n            Array.from(this.captions.tracks).forEach(track => {\n                if (track.language === this.captions.language.toLowerCase()) {\n                    this.captions.currentTrack = track;\n                }\n            });\n        };\n\n        // Get current track\n        setCurrentTrack();\n\n        // If we couldn't get the requested language, revert to default\n        if (!utils.is.track(this.captions.currentTrack)) {\n            const { language } = this.config.captions;\n\n            // Reset to default\n            // We don't update user storage as the selected language could become available\n            this.captions.language = language;\n\n            // Get fallback track\n            setCurrentTrack();\n\n            // If no match, disable captions\n            if (!utils.is.track(this.captions.currentTrack)) {\n                this.toggleCaptions(false);\n            }\n\n            controls.updateSetting.call(this, 'captions');\n        }\n\n        // Setup HTML5 track rendering\n        if (this.type === 'video') {\n            // Turn off native caption rendering to avoid double captions\n            Array.from(this.captions.tracks).forEach(track => {\n                // Remove previous bindings (if we've changed source or language)\n                utils.off(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Hide captions\n                track.mode = 'hidden';\n            });\n\n            // Check if suported kind\n            const supported =\n                this.captions.currentTrack && ['captions', 'subtitles'].includes(this.captions.currentTrack.kind);\n\n            if (utils.is.track(this.captions.currentTrack) && supported) {\n                utils.on(this.captions.currentTrack, 'cuechange', event => captions.setCue.call(this, event));\n\n                // If we change the active track while a cue is already displayed we need to update it\n                if (this.captions.currentTrack.activeCues && this.captions.currentTrack.activeCues.length > 0) {\n                    captions.setCue.call(this, this.captions.currentTrack);\n                }\n            }\n        } else if (this.type === 'vimeo' && this.captions.active) {\n            this.embed.enableTextTrack(this.captions.language);\n        }\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.set.call(this, active.getCueAsHTML());\n        } else {\n            captions.set.call(this);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    set(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.htmlElement(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.undefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.htmlElement(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = storage.get.call(this).captions;\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        const videoId = utils.parseYouTubeId(this.embedId);\n\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Setup API\n        if (utils.is.object(window.YT)) {\n            youtube.ready.call(this, videoId);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this, videoId);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready(videoId) {\n        const player = this;\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(player.media.id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: this.captions.active ? 1 : 0,\n                cc_lang_pref: this.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    utils.dispatchEvent.call(player, player.media, 'error', true, {\n                        code: event.data,\n                        embed: event.target,\n                    });\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n                    player.media.muted = instance.isMuted();\n                    player.media.currentTime = 0;\n\n                    // Seeking\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Volume\n                    let volume = instance.getVolume() / 100;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return instance.isMuted();\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : false;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Get available speeds\n                    if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n                        controls.setSpeedMenu.call(player, instance.getAvailablePlaybackRates());\n                    }\n\n                    // Set title\n                    player.config.title = instance.getVideoData().title;\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                                player.media.paused = true;\n                            }\n\n                            break;\n\n                        case 1:\n                            player.media.paused = false;\n\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n\n                            player.media.seeking = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'play');\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api);\n            // Wait for load\n            const vimeoTimer = window.setInterval(() => {\n                if (utils.is.object(window.Vimeo)) {\n                    window.clearInterval(vimeoTimer);\n                    vimeo.ready.call(this);\n                }\n            }, 50);\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const offset = (300 - padding) / 6;\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n        };\n        const params = utils.buildUrlParameters(options);\n        const id = utils.parseVimeoId(player.embedId);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        player.media.appendChild(iframe);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play();\n            player.media.paused = false;\n        };\n        player.media.pause = () => {\n            player.embed.pause();\n            player.media.paused = true;\n        };\n        player.media.stop = () => {\n            player.embed.stop();\n            player.media.paused = true;\n        };\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let { playbackRate } = player.media;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return playbackRate;\n            },\n            set(input) {\n                playbackRate = input;\n                player.embed.setPlaybackRate(input);\n                utils.dispatchEvent.call(player, player.media, 'ratechange');\n            },\n        });\n\n        // Volume\n        let { volume } = player.media;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                volume = input;\n                player.embed.setVolume(input);\n                utils.dispatchEvent.call(player, player.media, 'volumechange');\n            },\n        });\n\n        // Muted\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return volume === 0;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n                player.volume = toggle ? 0 : player.config.volume;\n            },\n        });\n\n        // Loop\n        let { loop } = player.media;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                loop = utils.is.boolean(input) ? input : player.config.loop.active;\n                player.embed.setLoop(loop);\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([player.embed.getVideoWidth(), player.embed.getVideoHeight()]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Get available speeds\n        if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(player);\n        }\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.captions.tracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.set.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.htmlElement(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'play');\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            if (parseInt(data.percent, 10) === 1) {\n                // Trigger event\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.pip.supported,\n                support.pip && this.type === 'video'\n            );\n\n            // Check for airplay support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.airplay.supported,\n                support.airplay && this.isHTML5\n            );\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (['video', 'youtube', 'vimeo'].includes(this.type)) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        // Embeds\n        if (this.isEmbed) {\n            switch (this.type) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        ui.setTitle.call(this);\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport types from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.htmlElement(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type\n                if ('type' in input) {\n                    this.type = input.type;\n\n                    // Get child type for video (it might be an embed)\n                    if (this.type === 'video') {\n                        const firstSource = input.sources[0];\n\n                        if ('type' in firstSource && types.embed.includes(firstSource.type)) {\n                            this.type = firstSource.type;\n                        }\n                    }\n                }\n\n                // Check for support\n                this.supported = support.check(this.type, this.config.inline);\n\n                // Create new markup\n                switch (this.type) {\n                    case 'video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube':\n                    case 'vimeo':\n                        this.media = utils.createElement('div');\n                        this.embedId = input.sources[0].src;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hooks\n                utils.toggleClass(\n                    this.elements.container,\n                    this.config.classNames.captions.active,\n                    this.supported.ui && this.captions.enabled\n                );\n\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true\n        );\n    },\n};\n\nexport default source;\n","﻿// ==========================================================================\n// Plyr\n// plyr.js v3.0.0\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './defaults';\nimport types from './types';\nimport support from './support';\nimport utils from './utils';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport media from './media';\nimport storage from './storage';\nimport source from './source';\nimport ui from './ui';\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        this.ready = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if (\n            (window.jQuery && this.media instanceof jQuery) ||\n            utils.is.nodeList(this.media) ||\n            utils.is.array(this.media)\n        ) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr'));\n                } catch (e) {\n                    return null;\n                }\n            })()\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            enabled: null,\n            tracks: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        this.log = () => {};\n        this.warn = () => {};\n        this.error = () => {};\n        if (this.config.debug && 'console' in window) {\n            this.log = console.log; // eslint-disable-line\n            this.warn = console.warn; // eslint-disable-line\n            this.error = console.error; // eslint-disable-line\n            this.log('Debugging enabled');\n        }\n\n        // Log config options and support\n        this.log('Config', this.config);\n        this.log('Support', support);\n\n        // We need an element to setup\n        if (this.media === null || utils.is.undefined(this.media) || !utils.is.htmlElement(this.media)) {\n            this.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Different setup based on type\n        switch (type) {\n            // TODO: Handle passing an iframe for true progressive enhancement\n            // case 'iframe':\n            case 'div':\n                this.type = this.media.getAttribute('data-type');\n                this.embedId = this.media.getAttribute('data-video-id');\n\n                if (utils.is.empty(this.type)) {\n                    this.error('Setup failed: embed type missing');\n                    return;\n                }\n\n                if (utils.is.empty(this.embedId)) {\n                    this.error('Setup failed: video id missing');\n                    return;\n                }\n\n                // Clean up\n                this.media.removeAttribute('data-type');\n                this.media.removeAttribute('data-video-id');\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Setup local storage for user settings\n        storage.setup.call(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        this.elements.container = utils.createElement('div');\n        utils.wrap(this.media, this.elements.container);\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Global listeners\n        listeners.global.call(this);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * If the player is HTML5\n     */\n    get isHTML5() {\n        return types.html5.includes(this.type);\n    }\n\n    /**\n     * If the player is an embed - e.g. YouTube or Vimeo\n     */\n    get isEmbed() {\n        return types.embed.includes(this.type);\n    }\n\n    /**\n     * Play the media\n     */\n    play() {\n        if ('play' in this.media) {\n            this.media.play();\n        }\n\n        // Allow chaining\n        return this;\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if ('pause' in this.media) {\n            this.media.pause();\n        }\n\n        // Allow chaining\n        return this;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} toggle\n     */\n    togglePlay(toggle) {\n        // True toggle if nothing passed\n        if ((!utils.is.boolean(toggle) && this.media.paused) || toggle) {\n            return this.play();\n        }\n\n        return this.pause();\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        return this.restart().pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n        return this;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            ({ volume } = storage.get.call(this));\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // Toggle muted state\n        if (volume === 0) {\n            this.muted = true;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    // Increase volume\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + utils.is.number(step) ? step : 1;\n        return this;\n    }\n\n    // Decrease volume\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - utils.is.number(step) ? step : 1;\n        return this;\n    }\n\n    // Toggle mute\n    set muted(mute) {\n        // If the method is called without parameter, toggle based on current value\n        const toggle = utils.is.boolean(mute) ? mute : !this.media.muted;\n\n        // Set button state\n        utils.toggleState(this.elements.buttons.mute, toggle);\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    get muted() {\n        return this.media.muted;\n    }\n\n    // Playback speed\n    set speed(input) {\n        // Load speed from storage or default value\n        let speed = utils.is.number(input)\n            ? input\n            : parseFloat(storage.get.call(this).speed || this.speed.selected || this.config.speed.default);\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    // Set playback quality\n    set quality(input) {\n        // Load speed from storage or default value\n        const quality = utils.is.string(input)\n            ? input\n            : parseFloat(storage.get.call(this).quality || this.config.quality.selected);\n\n        if (!this.config.quality.options.includes(quality)) {\n            this.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Set media speed\n        switch (this.type) {\n            case 'youtube':\n                this.utils.dispatchEvent.call(this, this.media, 'qualityrequested', false, {\n                    quality,\n                });\n\n                this.embed.setPlaybackQuality(quality);\n\n                break;\n\n            default:\n                this.warn('Quality options are only available for YouTube');\n                break;\n        }\n    }\n\n    get quality() {\n        // Set media speed\n        switch (this.type) {\n            case 'youtube':\n                return this.embed.getPlaybackQuality();\n\n            default:\n                this.warn('Quality options are only available for YouTube');\n                return null;\n        }\n    }\n\n    // Toggle loop\n    // TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    get loop() {\n        return this.media.loop;\n    }\n\n    // Media source\n    set src(input) {\n        source.change.call(this, input);\n    }\n\n    get src() {\n        return this.media.currentSrc;\n    }\n\n    // Poster image\n    set poster(input) {\n        if (this.type !== 'video') {\n            this.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    get poster() {\n        if (this.type !== 'video') {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    // Autoplay\n    get autoplay() {\n        return this.config.autoplay;\n    }\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    // Toggle captions\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.htmlElement(this.elements.buttons.captions)) {\n            return this;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input)\n            ? input\n            : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.enabled === show) {\n            return this;\n        }\n\n        // Set global\n        this.captions.enabled = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.enabled);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.enabled);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.enabled ? 'captionsenabled' : 'captionsdisabled');\n\n        // Allow chaining\n        return this;\n    }\n\n    // Caption language\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.captions.language === language) {\n            return;\n        }\n\n        // Reset UI\n        this.toggleCaptions(true);\n\n        // Update config\n        this.captions.language = language;\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'captionchange');\n\n        // Clear caption\n        captions.set.call(this);\n\n        // Re-run setup\n        captions.setup.call(this);\n    }\n\n    get language() {\n        return this.captions.language;\n    }\n\n    // Toggle fullscreen\n    // Requires user input event\n    toggleFullscreen(event) {\n        // Check for native support\n        if (fullscreen.enabled) {\n            // If it's a fullscreen change event, update the UI\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    // Request full screen\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    // Bail from fullscreen\n                    fullscreen.cancelFullScreen();\n                }\n\n                // Check if we're actually full screen (it could fail)\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n\n                return this;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.fullscreen.fallback,\n                this.fullscreen.active\n            );\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n\n        return this;\n    }\n\n    // Toggle picture-in-picture\n    // TODO: update player with state, support, enabled\n    // TODO: detect outside changes\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    // Trigger airplay\n    // TODO: update player with state, support, enabled\n    airplay() {\n        // Bail if no support\n        if (!support.airplay) {\n            return this;\n        }\n\n        // Show dialog\n        this.media.webkitShowPlaybackTargetPicker();\n\n        return this;\n    }\n\n    // Show the player controls in fullscreen mode\n    toggleControls(toggle) {\n        const player = this;\n\n        // We need controls of course...\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return player;\n        }\n\n        // Don't hide if config says not to, it's audio, or not ready or loading\n        if (!this.supported.ui || !this.config.hideControls || this.type === 'audio') {\n            return player;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n        const loading = utils.hasClass(this.elements.container, this.config.classNames.loading);\n\n        // Default to false if no boolean\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = ['mousemove', 'touchstart', 'mouseenter', 'focus'].includes(toggle.type);\n\n                // Delay hiding on move events\n                if (['mousemove', 'touchmove'].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focus') {\n                    delay = 3000;\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer every movement\n        window.clearTimeout(this.timers.hover);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.media.paused || loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.media.paused || loading) {\n                return player;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || !this.media.paused) {\n            this.timers.hover = window.setTimeout(() => {\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n\n        return this;\n    }\n\n    // Event listeners\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n\n        return this;\n    }\n\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n\n        return this;\n    }\n\n    // Check for support\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    // Destroy an instance\n    // Event listeners are removed when elements are removed\n    // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                utils.removeElement(this.elements.captions);\n                Array.from(this.elements.buttons.play).forEach(button => utils.removeElement(button));\n                utils.removeElement(this.elements.controls);\n                utils.removeElement(this.elements.wrapper);\n\n                // Clear for GC\n                this.elements.captions = null;\n                this.elements.controls = null;\n                this.elements.buttons.play = null;\n                this.elements.wrapper = null;\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                const parent = this.elements.container.parentNode;\n\n                if (utils.is.htmlElement(parent)) {\n                    parent.replaceChild(this.elements.original, this.elements.container);\n                }\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (this.type) {\n            case 'youtube':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                this.embed.destroy();\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                this.embed.unload().then(done);\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            case 'video':\n            case 'audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n\nexport default Plyr;\n"],"names":["get","store","window","localStorage","getItem","this","config","storage","key","utils","is","empty","JSON","parse","set","object","support","enabled","call","extend","setItem","stringify","defaults","navigator","language","split","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","undefined","Array","isArray","NodeList","HTMLElement","Event","instanceOf","TextTrackCue","VTTCue","TextTrack","kind","string","array","nodeList","length","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","querySelectorAll","tag","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","id","updateSprite","data","innerHTML","body","childNodes","hasId","container","setAttribute","cached","content","xhr","XMLHttpRequest","open","onload","responseText","send","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","sibling","nextSibling","appendChild","htmlElement","removeChild","target","type","attributes","text","setAttributes","textContent","lastChild","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","value","charAt","class","toggle","contains","classList","prototype","Element","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","querySelector","controls","getElement","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","warn","toggleNativeControls","focused","activeElement","tabbables","first","last","on","event","keyCode","_this","active","getFocusElement","shiftKey","focus","preventDefault","callback","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","properties","CustomEvent","assign","Plyr","dispatchEvent","state","newState","getAttribute","current","max","toFixed","objects","destination","shift","source","property","match","RegExp","$2","number","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","removeItem","function","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","canPlayType","supported","defineProperty","addEventListener","range","transitionEnd","matchMedia","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","log","toggleClass","toggleState","trapFocus","setup","parseFloat","listeners","getKeyCode","which","handleKey","code","pressed","held","editable","stopPropagation","togglePlay","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","keyboard","global","tabFocus","setTimeout","hideControls","toggleControls","eventType","timeUpdate","displayDuration","_this2","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","cursor","touch","paused","ended","disableContextMenu","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","_this3","defaultPrevented","airPlay","toggleMenu","form","showTab","toLowerCase","loop","isWebkit","updateRangeFill","updateSeekTooltip","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","uiSupported","isHTML5","removeAttribute","removeElement","inject","ready","updateTimeDisplay","label","i18n","title","playLarge","isEmbed","iframe","frameTitle","playing","stopped","setRange","loading","timers","nodeValue","getPercentage","buffered","end","setProgress","time","secs","parseInt","mins","hours","displayHours","slice","seeking","styleSheet","sheet","percentage","styles","rules","findIndex","rule","selectorText","deleteRule","insertRule","iconUrl","indexOf","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","hidden","badge","menu","buttonType","attr","button","iconDefault","iconToggled","labelKey","control","getAttributesFromSelector","createIcon","createLabel","suffix","played","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","hasClass","setting","tab","tabs","pane","panes","list","filter","toggleTab","emptyElement","getBadge","createBadge","item","radio","createTextNode","getLabel","getLanguage","default","checked","option","textTracks","tracks","none","currentTrack","disabled","track","toUpperCase","unshift","_this4","insertAdjacentHTML","show","isMenuItem","isButton","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","_this5","back","setSpeedMenu","loadSprite","seekTime","create","findElements","labels","_this6","setCaptionsMenu","insertAfter","setCurrentTrack","setCue","mode","activeCues","embed","enableTextTrack","cue","getCueAsHTML","caption","youtube","videoId","parseYouTubeId","embedId","containers","setAspectRatio","generateId","YT","loadScript","urls","onYouTubeReadyCallbacks","push","onYouTubeIframeAPIReady","paddingBottom","player","Player","autoplay","location","hostname","href","instance","getPlaybackQuality","playbackRate","getPlaybackRate","playVideo","pauseVideo","stop","stopVideo","getDuration","isMuted","getCurrentTime","seekTo","setPlaybackRate","getVolume","setVolume","getVideoUrl","getAvailablePlaybackRates","getVideoData","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","vimeo","Vimeo","vimeoTimer","padding","offset","transform","params","buildUrlParameters","parseVimeoId","setCurrentTime","setLoop","currentSrc","then","all","getVideoWidth","getVideoHeight","getAspectRatio","dimensions","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","setTitle","blankVideo","insertElement","attribute","sources","cancelRequests","destroy","firstSource","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","debug","console","plyr","original","tagName","hasAttribute","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","clearTimeout","mime","soft","done","replaceChild","unload","html5","targetTime","fauxDuration","realDuration","selected","setPlaybackQuality","change","states","webkitPresentationMode"],"mappings":"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"}