{"version":3,"file":"plyr.js","sources":["src/js/storage.js","src/js/defaults.js","src/js/types.js","src/js/utils.js","src/js/support.js","src/js/fullscreen.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\n// Save a value back to local storage\nfunction set(value) {\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return;\n    }\n\n    // Update the working copy of the values\n    utils.extend(this.storage, value);\n\n    // Update storage\n    window.localStorage.setItem(this.config.storage.key, JSON.stringify(this.storage));\n}\n\n// Setup localStorage\nfunction setup() {\n    let value = null;\n    let storage = {};\n\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return storage;\n    }\n\n    // Clean up old volume\n    // https://github.com/sampotts/plyr/issues/171\n    window.localStorage.removeItem('plyr-volume');\n\n    // load value from the current key\n    value = window.localStorage.getItem(this.config.storage.key);\n\n    if (!value) {\n        // Key wasn't set (or had been cleared), move along\n    } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n        // If value is a number, it's probably volume from an older\n        // version of this. See: https://github.com/sampotts/plyr/pull/313\n        // Update the key to be JSON\n        set({\n            volume: parseFloat(value),\n        });\n    } else {\n        // Assume it's JSON from this or a later version of plyr\n        storage = JSON.parse(value);\n    }\n\n    return storage;\n}\n\nexport default { setup, set };\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Display the media duration\n    displayDuration: true,\n\n    // Click video to play\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Pass a custom duration\n    duration: null,\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: ['hd2160', 'hd1440', 'hd1080', 'hd720', 'large', 'medium', 'small', 'tiny', 'default'],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        start: null,\n        end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        default: 1,\n        options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: ['captions', 'quality', 'speed', 'loop'],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        toggleMute: 'Toggle Mute',\n        toggleCaptions: 'Toggle Captions',\n        toggleFullscreen: 'Toggle Fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'captionchange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        muted: 'plyr--muted',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'tab-focus',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types\n// ==========================================================================\n\nconst types = {\n    embed: ['youtube', 'vimeo'],\n    html5: ['video', 'audio'],\n};\n\nexport default types;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.undefined(input) && Array.isArray(input);\n        },\n        nodeList(input) {\n            return !this.undefined(input) && input instanceof NodeList;\n        },\n        htmlElement(input) {\n            return !this.undefined(input) && input instanceof HTMLElement;\n        },\n        event(input) {\n            return !this.undefined(input) && input instanceof Event;\n        },\n        cue(input) {\n            return this.instanceOf(input, window.TextTrackCue) || this.instanceOf(input, window.VTTCue);\n        },\n        track(input) {\n            return (\n                !this.undefined(input) && (this.instanceOf(input, window.TextTrack) || typeof input.kind === 'string')\n            );\n        },\n        undefined(input) {\n            return input !== null && typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                input === null ||\n                typeof input === 'undefined' ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && input.length === 0) ||\n                (this.object(input) && Object.keys(input).length === 0)\n            );\n        },\n        getConstructor(input) {\n            if (input === null || typeof input === 'undefined') {\n                return null;\n            }\n\n            return input.constructor;\n        },\n        instanceOf(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url) {\n        // Check script is not already referenced\n        if (document.querySelectorAll(`script[src=\"${url}\"]`).length) {\n            return;\n        }\n\n        const tag = document.createElement('script');\n        tag.src = url;\n\n        const firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.htmlElement(element) || !utils.is.htmlElement(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.htmlElement(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.htmlElement(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches =\n            prototype.matches ||\n            prototype.webkitMatchesSelector ||\n            prototype.mozMatchesSelector ||\n            prototype.msMatchesSelector ||\n            match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.htmlElement(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(\n                    `.${this.config.classNames.tooltip}`\n                );\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const tabbables = utils.getElements.call(this, 'input:not([disabled]), button:not([disabled])');\n        const first = tabbables[0];\n        const last = tabbables[tabbables.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // If it is tab\n                if (event.which === 9 && this.fullscreen.active) {\n                    if (event.target === last && !event.shiftKey) {\n                        // Move focus to first element that can be tabbed if Shift isn't used\n                        event.preventDefault();\n                        first.focus();\n                    } else if (event.target === first && event.shiftKey) {\n                        // Move focus to last element that can be tabbed if Shift is used\n                        event.preventDefault();\n                        last.focus();\n                    }\n                }\n            },\n            false\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (elements === null || utils.is.undefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, properties) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, properties, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(target, state) {\n        // Bail if no target\n        if (!target) {\n            return null;\n        }\n\n        // Get state\n        const newState = utils.is.boolean(state) ? state : !target.getAttribute('aria-pressed');\n\n        // Set the attribute on target\n        target.setAttribute('aria-pressed', newState);\n\n        return newState;\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    extend(...objects) {\n        const { length } = objects;\n\n        // Bail if nothing to merge\n        if (!length) {\n            return null;\n        }\n\n        // Return first if specified but nothing to merge\n        if (length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        let destination = Array.prototype.shift.call(objects);\n        if (!utils.is.object(destination)) {\n            destination = {};\n        }\n\n        // Loop through all objects to merge\n        objects.forEach(source => {\n            if (!utils.is.object(source)) {\n                return;\n            }\n\n            Object.keys(source).forEach(property => {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    utils.extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            });\n        });\n\n        return destination;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert object to URL parameters\n    buildUrlParameters(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Load an SVG sprite\n    loadSprite(url, id) {\n        if (typeof url !== 'string') {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = typeof id === 'string';\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            container.setAttribute('hidden', '');\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                }\n            }\n\n            // ReSharper disable once InconsistentNaming\n            const xhr = new XMLHttpRequest();\n\n            // XHR for Chrome/Firefox/Opera/Safari\n            if ('withCredentials' in xhr) {\n                xhr.open('GET', url, true);\n            } else {\n                return;\n            }\n\n            // Once loaded, inject to container and body\n            xhr.onload = () => {\n                if (support.storage) {\n                    window.localStorage.setItem(\n                        prefix + id,\n                        JSON.stringify({\n                            content: xhr.responseText,\n                        })\n                    );\n                }\n\n                updateSprite.call(container, xhr.responseText);\n            };\n\n            xhr.send();\n        }\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (type) {\n            case 'video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Local storage\n    // We can't assume if local storage is present that we can use it\n    storage: (() => {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        const test = '___test';\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    })(),\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(player, type) {\n        const media = { player };\n\n        try {\n            // Bail if no checking function\n            if (!utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (player.type === 'video') {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n                    default:\n                        return false;\n                }\n            } else if (player.type === 'audio') {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        ['webkit', 'o', 'moz', 'ms', 'khtml'].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled:\n        document.fullscreenEnabled ||\n        document.webkitFullscreenEnabled ||\n        document.mozFullScreenEnabled ||\n        document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        return !prefix.length\n            ? target.requestFullScreen()\n            : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length\n            ? document.cancelFullScreen()\n            : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.type === 'audio' || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport storage from './storage';\nimport ui from './ui';\n\nconst listeners = {\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.displayDuration.call(this, event));\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.type === 'video' && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'waiting canplay seeked', event => ui.checkLoading.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && this.type !== 'audio') {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!wrapper) {\n                return;\n            }\n\n            // Set cursor\n            wrapper.style.cursor = 'pointer';\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.media.paused) {\n                    return;\n                }\n\n                if (this.media.paused) {\n                    this.play();\n                } else if (this.media.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save speed to localStorage\n            storage.set.call(this, {\n                speed: this.speed,\n            });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save speed to localStorage\n            storage.set.call(this, {\n                quality: this.quality,\n            });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'captionchange', () => {\n            // Save speed to localStorage\n            storage.set.call(this, {\n                language: this.captions.language,\n            });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save speed to localStorage\n            storage.set.call(this, {\n                captions: this.captions.enabled,\n            });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat(['keyup', 'keydown']).join(' '), event => {\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = this.browser.isIE ? 'change' : 'input';\n        let last = null;\n\n        // Click play/pause helper\n        const togglePlay = () => {\n            const play = this.togglePlay();\n\n            // Determine which buttons\n            const target = this.elements.buttons[play ? 'pause' : 'play'];\n\n            // Transfer focus\n            if (utils.is.htmlElement(target)) {\n                target.focus();\n            }\n        };\n\n        // Get the key code for an event\n        function getKeyCode(event) {\n            return event.keyCode ? event.keyCode : event.which;\n        }\n\n        function handleKey(event) {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const held = pressed && code === last;\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            function seekByKey() {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            }\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n                const checkFocus = [38, 40];\n\n                if (checkFocus.includes(code)) {\n                    const focused = utils.getFocusElement();\n\n                    if (utils.is.htmlElement(focused) && utils.getFocusElement().type === 'radio') {\n                        return;\n                    }\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!held) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!held) {\n                            togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!held) {\n                            this.toggleMute();\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!held) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        }\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.focused) {\n            // Handle global presses\n            if (this.config.keyboard.global) {\n                utils.on(\n                    window,\n                    'keydown keyup',\n                    event => {\n                        const code = getKeyCode(event);\n                        const focused = utils.getFocusElement();\n                        const allowed = [48, 49, 50, 51, 52, 53, 54, 56, 57, 75, 77, 70, 67, 73, 76, 79];\n\n                        // Only handle global key press if key is in the allowed keys\n                        // and if the focused element is not editable (e.g. text input)\n                        // and any that accept key input http://webaim.org/techniques/keyboard/\n                        if (\n                            allowed.includes(code) &&\n                            (!utils.is.htmlElement(focused) || !utils.matches(focused, this.config.selectors.editable))\n                        ) {\n                            handleKey(event);\n                        }\n                    },\n                    false\n                );\n            }\n\n            // Handle presses on focused\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handleKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Play\n        utils.on(this.elements.buttons.play, 'click', event => proxy(event, 'play', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.pause, 'click', event => proxy(event, 'pause', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.toggleMute();\n            })\n        );\n\n        // Captions\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.togglePictureInPicture();\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airPlay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            // Show tab in menu\n            controls.showTab.call(this, event);\n\n            // Settings menu items - use event delegation as items are added/removed\n            // Settings - Language\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.toggleCaptions(true);\n                    this.language = event.target.value.toLowerCase();\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                // Settings - Quality\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                // Settings - Speed\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else if (utils.matches(event.target, this.config.selectors.buttons.loop)) {\n                // Settings - Looping\n                // TODO: use toggle buttons\n                proxy(event, 'loop', () => {\n                    // TODO: This should be done in the method itself I think\n                    // var value = event.target.getAttribute('data-loop__value') || event.target.getAttribute('data-loop__type');\n\n                    this.warn('Set loop');\n                });\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (this.browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event =>\n            controls.updateSeekTooltip.call(this, event)\n        );\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(\n                this.elements.container,\n                'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen',\n                event => {\n                    this.toggleControls(event);\n                }\n            );\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = ['mousedown', 'touchstart'].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            // TODO: Check we need capture here\n            utils.on(\n                this.elements.controls,\n                'focus blur',\n                event => {\n                    this.toggleControls(event);\n                },\n                true\n            );\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport storage from './storage';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.warn(`Basic support only for ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Set volume\n        this.volume = null;\n        ui.updateVolume.call(this);\n\n        // Set playback speed\n        this.speed = null;\n\n        // Set loop\n        // this.setLoop();\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Autoplay\n        if (this.config.autoplay) {\n            this.play();\n        }\n    },\n\n    // Show the duration on metadataloaded\n    displayDuration() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's only one time display, display duration there\n        if (!this.elements.display.duration && this.config.displayDuration && this.media.paused) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.currentTime);\n        }\n\n        // If there's a duration element, update content\n        if (this.elements.display.duration) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (this.supported.ui) {\n            if (utils.is.htmlElement(this.elements.buttons.play)) {\n                this.elements.buttons.play.setAttribute('aria-label', label);\n            }\n            if (utils.is.htmlElement(this.elements.buttons.playLarge)) {\n                this.elements.buttons.playLarge.setAttribute('aria-label', label);\n            }\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.htmlElement(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, !this.media.paused);\n\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.media.paused);\n\n        this.toggleControls(this.media.paused);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        // Update the <input type=\"range\"> if present\n        if (this.supported.ui) {\n            const value = this.media.muted ? 0 : this.media.volume;\n\n            if (this.elements.inputs.volume) {\n                ui.setRange.call(this, this.elements.inputs.volume, value);\n            }\n        }\n\n        // Update the volume in storage\n        storage.set.call(this, {\n            volume: this.media.volume,\n        });\n\n        // Toggle class if muted\n        utils.toggleClass(this.elements.container, this.config.classNames.muted, this.media.muted);\n\n        // Update checkbox for mute state\n        if (this.supported.ui && this.elements.buttons.mute) {\n            utils.toggleState(this.elements.buttons.mute, this.media.muted);\n        }\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = event.type === 'waiting';\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value) {\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        // Default to 0\n        const value = !utils.is.undefined(input) ? input : 0;\n        const progress = !utils.is.undefined(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.htmlElement(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.htmlElement(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(value, element) {\n        // Bail if there's no duration display\n        if (!utils.is.htmlElement(element)) {\n            return null;\n        }\n\n        // Fallback to 0\n        const time = !Number.isNaN(value) ? value : 0;\n\n        let secs = parseInt(time % 60, 10);\n        let mins = parseInt((time / 60) % 60, 10);\n        const hours = parseInt((time / 60 / 60) % 60, 10);\n\n        // Do we need to display hours?\n        const displayHours = parseInt((this.duration / 60 / 60) % 60, 10) > 0;\n\n        // Ensure it's two digits. For example, 03 rather than 3.\n        secs = `0${secs}`.slice(-2);\n        mins = `0${mins}`.slice(-2);\n\n        // Generate display\n        const display = `${(displayHours ? `${hours}:` : '') + mins}:${secs}`;\n\n        // Render\n        element.textContent = display;\n\n        // Return for looping\n        return display;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Duration\n        ui.updateTimeDisplay.call(this, this.currentTime, this.elements.display.currentTime);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!this.browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.htmlElement(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Inject the stylesheet if needed\n        if (!utils.is.htmlElement(this.elements.styleSheet)) {\n            this.elements.styleSheet = utils.createElement('style');\n            this.elements.container.appendChild(this.elements.styleSheet);\n        }\n\n        const styleSheet = this.elements.styleSheet.sheet;\n        const percentage = range.value / range.max * 100;\n        const selector = `#${range.id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const index = Array.from(styleSheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (index !== -1) {\n            styleSheet.deleteRule(index);\n        }\n\n        // Insert new one\n        styleSheet.insertRule([selector, styles].join(' '));\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || this.browser.isIE,\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `${iconPath}-${type}`);\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type) {\n        let text = this.config.i18n[type];\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        return utils.createElement(\n            'span',\n            {\n                class: this.config.classNames.hidden,\n            },\n            text\n        );\n    },\n\n    // Create a badge\n    createBadge(text) {\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n        let iconDefault;\n        let iconToggled;\n        let labelKey;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.indexOf(this.config.classNames.control) === -1) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'mute':\n                labelKey = 'toggleMute';\n                iconDefault = 'volume';\n                iconToggled = 'muted';\n                break;\n\n            case 'captions':\n                labelKey = 'toggleCaptions';\n                iconDefault = 'captions-off';\n                iconToggled = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                labelKey = 'toggleFullscreen';\n                iconDefault = 'enter-fullscreen';\n                iconToggled = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class = 'plyr__play-large';\n                type = 'play';\n                labelKey = 'play';\n                iconDefault = 'play';\n                break;\n\n            default:\n                labelKey = type;\n                iconDefault = type;\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        // Add toggle icon if needed\n        if (utils.is.string(iconToggled)) {\n            button.appendChild(\n                controls.createIcon.call(this, iconToggled, {\n                    class: `icon--${iconToggled}`,\n                })\n            );\n        }\n\n        button.appendChild(controls.createIcon.call(this, iconDefault));\n        button.appendChild(controls.createLabel.call(this, labelKey));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('span', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(\n            utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00')\n        );\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.htmlElement(this.elements.inputs.seek) ||\n            !utils.is.htmlElement(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = this.elements.display.seekTooltip.style.left.replace('%', '');\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.duration / 100 * percent, this.elements.display.seekTooltip);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && ['mouseenter', 'mouseleave'].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        if (utils.is.htmlElement(tab)) {\n            if (toggle) {\n                tab.removeAttribute('hidden');\n            } else {\n                tab.setAttribute('hidden', '');\n            }\n        }\n\n        if (utils.is.htmlElement(pane)) {\n            if (toggle) {\n                pane.removeAttribute('hidden');\n            } else {\n                pane.setAttribute('hidden', '');\n            }\n        }\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.type === 'youtube';\n        controls.toggleTab.call(this, 'quality', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.quality), {\n                    type: 'radio',\n                    name: 'plyr-quality',\n                    value: quality,\n                })\n            );\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(controls.getLabel.call(this, 'quality', quality)));\n\n            const badge = getBadge(quality);\n            if (utils.is.htmlElement(badge)) {\n                label.appendChild(badge);\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'quality', list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.language;\n\n                if (!this.captions.enabled) {\n                    value = '';\n                }\n\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.htmlElement(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // Check it\n        target.checked = true;\n\n        // Find the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n    },\n\n    // Set the looping options\n    setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.loop.removeAttribute('hidden');\n        this.elements.settings.panes.loop.removeAttribute('hidden');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    },\n\n    // Get current selected caption language\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || utils.is.empty(this.captions.tracks)) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.enabled) {\n            return this.captions.currentTrack.label;\n        }\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.captions.tracks);\n        controls.toggleTab.call(this, 'captions', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = Array.from(this.captions.tracks).map(track => ({\n            language: track.language,\n            badge: true,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.language), {\n                    type: 'radio',\n                    name: 'plyr-language',\n                    value: track.language,\n                })\n            );\n\n            if (track.language.toLowerCase() === this.captions.language.toLowerCase()) {\n                radio.checked = true;\n            }\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(track.label || track.language));\n\n            if (track.badge) {\n                label.appendChild(controls.createBadge.call(this, track.language.toUpperCase()));\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'captions', list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.speed = options.filter(speed => this.config.speed.options.includes(speed));\n        } else {\n            this.options.speed = this.config.speed.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, 'speed', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.speed.removeAttribute('hidden');\n        this.elements.settings.panes.speed.removeAttribute('hidden');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.speed), {\n                    type: 'radio',\n                    name: 'plyr-speed',\n                    value: speed,\n                })\n            );\n\n            label.appendChild(radio);\n            label.insertAdjacentHTML('beforeend', controls.getLabel.call(this, 'speed', speed));\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'speed', list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : form && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = form && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (button) {\n            button.setAttribute('aria-expanded', show);\n        }\n        if (form) {\n            form.setAttribute('aria-hidden', !show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.htmlElement(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || !['width', 'height'].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement(\n            'div',\n            utils.getAttributesFromSelector(this.config.selectors.controls.wrapper)\n        );\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement(\n                'span',\n                utils.getAttributesFromSelector(this.config.selectors.progress)\n            );\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('span', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.buttons.playLarge = controls.createButton.call(this, 'play-large');\n            this.elements.container.appendChild(this.elements.buttons.playLarge);\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const iconUrl = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (iconUrl.absolute) {\n                this.log(`AJAX loading absolute SVG sprite ${this.browser.isIE ? '(due to IE)' : ''}`);\n                utils.loadSprite(iconUrl.url, 'sprite-plyr');\n            } else {\n                this.log('Sprite will be used as external resource directly');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: '-',\n                // TODO: Get current quality\n                quality: '-',\n                captions: controls.getLanguage.call(this),\n                // TODO: Get loop\n                loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.htmlElement(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.htmlElement(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.htmlElement(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        if (!utils.is.empty(this.storage.language)) {\n            this.captions.language = this.storage.language;\n        } else if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.enabled)) {\n            if (!utils.is.empty(this.storage.language)) {\n                this.captions.enabled = this.storage.captions;\n            } else {\n                this.captions.enabled = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!['video', 'vimeo'].includes(this.type) || (this.type === 'video' && !support.textTracks)) {\n            this.captions.tracks = null;\n\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.htmlElement(this.elements.captions)) {\n            this.elements.captions = utils.createElement(\n                'div',\n                utils.getAttributesFromSelector(this.config.selectors.captions)\n            );\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Get tracks from HTML5\n        if (this.type === 'video') {\n            this.captions.tracks = this.media.textTracks;\n        }\n\n        // Set the class hook\n        utils.toggleClass(\n            this.elements.container,\n            this.config.classNames.captions.enabled,\n            !utils.is.empty(this.captions.tracks)\n        );\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Get a track\n        const setCurrentTrack = () => {\n            // Reset by default\n            this.captions.currentTrack = null;\n\n            // Filter doesn't seem to work for a TextTrackList :-(\n            Array.from(this.captions.tracks).forEach(track => {\n                if (track.language === this.captions.language.toLowerCase()) {\n                    this.captions.currentTrack = track;\n                }\n            });\n        };\n\n        // Get current track\n        setCurrentTrack();\n\n        // If we couldn't get the requested language, revert to default\n        if (!utils.is.track(this.captions.currentTrack)) {\n            const { language } = this.config.captions;\n\n            // Reset to default\n            // We don't update user storage as the selected language could become available\n            this.captions.language = language;\n\n            // Get fallback track\n            setCurrentTrack();\n\n            // If no match, disable captions\n            if (!utils.is.track(this.captions.currentTrack)) {\n                this.toggleCaptions(false);\n            }\n\n            controls.updateSetting.call(this, 'captions');\n        }\n\n        // Setup HTML5 track rendering\n        if (this.type === 'video') {\n            // Turn off native caption rendering to avoid double captions\n            Array.from(this.captions.tracks).forEach(track => {\n                // Remove previous bindings (if we've changed source or language)\n                utils.off(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Hide captions\n                track.mode = 'hidden';\n            });\n\n            // Check if suported kind\n            const supported =\n                this.captions.currentTrack && ['captions', 'subtitles'].includes(this.captions.currentTrack.kind);\n\n            if (utils.is.track(this.captions.currentTrack) && supported) {\n                utils.on(this.captions.currentTrack, 'cuechange', event => captions.setCue.call(this, event));\n\n                // If we change the active track while a cue is already displayed we need to update it\n                if (this.captions.currentTrack.activeCues && this.captions.currentTrack.activeCues.length > 0) {\n                    controls.setCue.call(this, this.captions.currentTrack);\n                }\n            }\n        } else if (this.type === 'vimeo' && this.captions.active) {\n            this.embed.enableTextTrack(this.captions.language);\n        }\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.set.call(this, active.getCueAsHTML());\n        } else {\n            captions.set.call(this);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    set(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.htmlElement(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.undefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!this.elements.buttons.captions) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.captions;\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    // Setup YouTube\n    setup() {\n        const videoId = utils.parseYouTubeId(this.embedId);\n\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Setup API\n        if (utils.is.object(window.YT)) {\n            youtube.ready.call(this, videoId);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this, videoId);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Handle YouTube API ready\n    ready(videoId) {\n        const player = this;\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(player.media.id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions is flaky on YouTube\n                // cc_load_policy: (this.captions.active ? 1 : 0),\n                // cc_lang_pref: 'en',\n            },\n            events: {\n                onError(event) {\n                    utils.dispatchEvent.call(player, player.media, 'error', true, {\n                        code: event.data,\n                        embed: event.target,\n                    });\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n                    player.media.muted = instance.isMuted();\n                    player.media.currentTime = 0;\n\n                    // Seeking\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(speed) {\n                            instance.setPlaybackRate(speed);\n                        },\n                    });\n\n                    // Get available speeds\n                    if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n                        controls.setSpeedMenu.call(player, instance.getAvailablePlaybackRates());\n                    }\n\n                    // Set title\n                    player.config.title = instance.getVideoData().title;\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 0);\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.config.loop.active) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n\n                                break;\n                            }\n\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'ended');\n\n                            break;\n\n                        case 1:\n                            player.media.paused = false;\n\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n\n                            player.media.seeking = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'play');\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                // player.media.currentTime = instance.getCurrentTime();\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 100);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    // Setup YouTube\n    setup() {\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api);\n            // Wait for load\n            const vimeoTimer = window.setInterval(() => {\n                if (utils.is.object(window.Vimeo)) {\n                    window.clearInterval(vimeoTimer);\n                    vimeo.ready.call(this);\n                }\n            }, 50);\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: this.config.loop.active,\n            autoplay: this.config.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            transparent: 0,\n        };\n        const params = utils.buildUrlParameters(options);\n        const id = utils.parseVimeoId(this.embedId);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        player.media.appendChild(iframe);\n\n        // Setup instance\n        // https://github.com/vimeo/this.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play();\n            player.media.paused = false;\n        };\n        player.media.pause = () => {\n            player.embed.pause();\n            player.media.paused = true;\n        };\n        player.media.stop = () => {\n            player.embed.stop();\n            player.media.paused = true;\n        };\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n        let { currentTime } = player.media;\n\n        // Seeking\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                const { paused } = player.media;\n\n                player.warn('called');\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    this.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        // Not currently supported in Vimeo\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return null;\n            },\n            set() {},\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(this, this.media, 'timeupdate');\n        });\n\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.captions.tracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.set.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.htmlElement(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'play');\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        this.embed.on('timeupdate', data => {\n            this.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(this, this.media, 'timeupdate');\n        });\n\n        this.embed.on('progress', data => {\n            this.media.buffered = data.percent;\n            utils.dispatchEvent.call(this, this.media, 'progress');\n\n            if (parseInt(data.percent, 10) === 1) {\n                // Trigger event\n                utils.dispatchEvent.call(this, this.media, 'canplaythrough');\n            }\n        });\n\n        this.embed.on('seeked', () => {\n            this.media.seeking = false;\n            utils.dispatchEvent.call(this, this.media, 'seeked');\n            utils.dispatchEvent.call(this, this.media, 'play');\n        });\n\n        this.embed.on('ended', () => {\n            this.media.paused = true;\n            utils.dispatchEvent.call(this, this.media, 'ended');\n        });\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.pip.supported,\n                support.pip && this.type === 'video'\n            );\n\n            // Check for airplay support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.airplay.supported,\n                support.airplay && this.isHTML5\n            );\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, this.browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (['video', 'youtube', 'vimeo'].includes(this.type)) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        // Embeds\n        if (this.isEmbed) {\n            switch (this.type) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        ui.setTitle.call(this);\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport types from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.htmlElement(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type\n                if ('type' in input) {\n                    this.type = input.type;\n\n                    // Get child type for video (it might be an embed)\n                    if (this.type === 'video') {\n                        const firstSource = input.sources[0];\n\n                        if ('type' in firstSource && types.embed.includes(firstSource.type)) {\n                            this.type = firstSource.type;\n                        }\n                    }\n                }\n\n                // Check for support\n                this.supported = support.check(this.type, this.config.inline);\n\n                // Create new markup\n                switch (this.type) {\n                    case 'video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube':\n                    case 'vimeo':\n                        this.media = utils.createElement('div');\n                        this.embedId = input.sources[0].src;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hooks\n                utils.toggleClass(\n                    this.elements.container,\n                    this.config.classNames.captions.active,\n                    this.supported.ui && this.captions.enabled\n                );\n\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.0.0\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\n/* global jQuery */\n\nimport defaults from './defaults';\nimport types from './types';\nimport support from './support';\nimport utils from './utils';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport media from './media';\nimport storage from './storage';\nimport source from './source';\nimport ui from './ui';\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        this.ready = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if (\n            (window.jQuery && this.media instanceof jQuery) ||\n            utils.is.nodeList(this.media) ||\n            utils.is.array(this.media)\n        ) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr'));\n                } catch (e) {\n                    return null;\n                }\n            })()\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            enabled: null,\n            tracks: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        this.log = () => {};\n        this.warn = () => {};\n        this.error = () => {};\n        if (this.config.debug && 'console' in window) {\n            this.log = console.log; // eslint-disable-line\n            this.warn = console.warn; // eslint-disable-line\n            this.error = console.error; // eslint-disable-line\n            this.log('Debugging enabled');\n        }\n\n        // Log config options and support\n        this.log('Config', this.config);\n        this.log('Support', support);\n\n        // We need an element to setup\n        if (this.media === null || utils.is.undefined(this.media) || !utils.is.htmlElement(this.media)) {\n            this.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Different setup based on type\n        switch (type) {\n            // TODO: Handle passing an iframe for true progressive enhancement\n            // case 'iframe':\n            case 'div':\n                this.type = this.media.getAttribute('data-type');\n                this.embedId = this.media.getAttribute('data-video-id');\n\n                if (utils.is.empty(this.type)) {\n                    this.error('Setup failed: embed type missing');\n                    return;\n                }\n\n                if (utils.is.empty(this.embedId)) {\n                    this.error('Setup failed: video id missing');\n                    return;\n                }\n\n                // Clean up\n                this.media.removeAttribute('data-type');\n                this.media.removeAttribute('data-video-id');\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n\n                if (this.media.getAttribute('crossorigin') !== null) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.getAttribute('autoplay') !== null) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.getAttribute('playsinline') !== null) {\n                    this.config.inline = true;\n                }\n                if (this.media.getAttribute('muted') !== null) {\n                    this.config.muted = true;\n                }\n                if (this.media.getAttribute('loop') !== null) {\n                    this.config.loop.active = true;\n                }\n                break;\n\n            default:\n                this.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Sniff out the browser\n        this.browser = utils.getBrowser();\n\n        // Load saved settings from localStorage\n        this.storage = storage.setup.call(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        this.elements.container = utils.createElement('div');\n        utils.wrap(this.media, this.elements.container);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // API\n    // ---------------------------------------\n\n    get isHTML5() {\n        return types.html5.includes(this.type);\n    }\n    get isEmbed() {\n        return types.embed.includes(this.type);\n    }\n\n    // Play\n    play() {\n        if ('play' in this.media) {\n            this.media.play();\n        }\n\n        // Allow chaining\n        return this;\n    }\n\n    // Pause\n    pause() {\n        if ('pause' in this.media) {\n            this.media.pause();\n        }\n\n        // Allow chaining\n        return this;\n    }\n\n    // Toggle playback\n    togglePlay(toggle) {\n        // True toggle if nothing passed\n        if ((!utils.is.boolean(toggle) && this.media.paused) || toggle) {\n            return this.play();\n        }\n\n        return this.pause();\n    }\n\n    // Stop\n    stop() {\n        return this.restart().pause();\n    }\n\n    // Restart\n    restart() {\n        this.currentTime = 0;\n        return this;\n    }\n\n    // Rewind\n    rewind(seekTime) {\n        this.currentTime = Math.min(\n            this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime),\n            0\n        );\n        return this;\n    }\n\n    // Fast forward\n    forward(seekTime) {\n        this.currentTime = Math.max(\n            this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime),\n            this.duration\n        );\n        return this;\n    }\n\n    // Seek to time\n    // The input parameter can be an event or a number\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set the current time\n        // TODO: This should be included in the \"adapters\"\n        // Embeds\n        /* if (this.isEmbed) {\n            // Get current paused state\n            const { paused } = this.media;\n\n            switch (this.type) {\n                case 'youtube':\n                    this.embed.seekTo(targetTime);\n                    break;\n\n                case 'vimeo':\n                    this.embed.setCurrentTime(targetTime);\n                    break;\n\n                default:\n                    break;\n            }\n\n            // Restore pause (some will play on seek)\n            if (paused) {\n                this.pause();\n            }\n\n            // Set seeking flag\n            this.media.seeking = true;\n\n            // Trigger seeking\n            utils.dispatchEvent.call(this, this.media, 'seeking');\n        } else {\n\n        } */\n\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    // Get the duration (or custom if set)\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    // Set volume\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n        const isSet = !utils.is.undefined(volume);\n\n        if (utils.is.string(volume)) {\n            volume = parseFloat(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.storage);\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // Trigger volumechange for embeds\n        // TODO: Do in adapters\n        if (this.isEmbed) {\n            // Set media volume\n            switch (this.type) {\n                case 'youtube':\n                    this.embed.setVolume(this.media.volume * 100);\n                    break;\n\n                case 'vimeo':\n                    this.embed.setVolume(this.media.volume);\n                    break;\n\n                default:\n                    break;\n            }\n\n            utils.dispatchEvent.call(this, this.media, 'volumechange');\n        }\n\n        // Toggle muted state\n        if (volume === 0) {\n            this.toggleMute(true);\n        } else if (this.media.muted && isSet) {\n            this.toggleMute();\n        }\n\n        return this;\n    }\n\n    get volume() {\n        return this.media.volume;\n    }\n\n    // Increase volume\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.media.volume;\n\n        return this.setVolume(volume + utils.is.number(step) ? step : 1);\n    }\n\n    // Decrease volume\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.media.volume;\n\n        return this.setVolume(volume - utils.is.number(step) ? step : 1);\n    }\n\n    // Toggle mute\n    toggleMute(mute) {\n        // If the method is called without parameter, toggle based on current value\n        const toggle = utils.is.boolean(mute) ? mute : !this.media.muted;\n\n        // Set button state\n        utils.toggleState(this.elements.buttons.mute, toggle);\n\n        // Set mute on the player\n        this.media.muted = toggle;\n\n        // If volume is 0 after unmuting, restore default volume\n        if (!this.media.muted && this.media.volume === 0) {\n            this.setVolume(this.config.volume);\n        }\n\n        // Embeds\n        if (this.isEmbed) {\n            switch (this.type) {\n                case 'youtube':\n                    this.embed[this.media.muted ? 'mute' : 'unMute']();\n                    break;\n\n                case 'vimeo':\n                    this.embed.setVolume(this.media.muted ? 0 : this.config.volume);\n                    break;\n\n                default:\n                    break;\n            }\n\n            // Trigger volumechange for embeds\n            utils.dispatchEvent.call(this, this.media, 'volumechange');\n        }\n\n        return this;\n    }\n\n    // Playback speed\n    set speed(input) {\n        // Load speed from storage or default value\n        let speed = utils.is.number(input)\n            ? input\n            : parseFloat(this.storage.speed || this.speed.selected || this.config.speed.default);\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    // Set playback quality\n    set quality(input) {\n        // Load speed from storage or default value\n        const quality = utils.is.string(input)\n            ? input\n            : parseFloat(this.storage.quality || this.config.quality.selected);\n\n        if (!this.config.quality.options.includes(quality)) {\n            this.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Set media speed\n        switch (this.type) {\n            case 'youtube':\n                this.utils.dispatchEvent.call(this, this.media, 'qualityrequested', false, {\n                    quality,\n                });\n\n                this.embed.setPlaybackQuality(quality);\n\n                break;\n\n            default:\n                this.warn('Quality options are only available for YouTube');\n                break;\n        }\n    }\n\n    get quality() {\n        // Set media speed\n        switch (this.type) {\n            case 'youtube':\n                return this.embed.getPlaybackQuality();\n\n            default:\n                this.warn('Quality options are only available for YouTube');\n                return null;\n        }\n    }\n\n    // Toggle loop\n    // TODO: Finish logic\n    // TODO: Set the indicator on load as user may pass loop as config\n    /* loop(input) {\n        // Set default to be a true toggle\n        const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        }\n\n        // Allow chaining\n        return this;\n    } */\n\n    // Media source\n    set src(input) {\n        source.change.call(this, input);\n    }\n\n    get src() {\n        let url;\n\n        switch (this.type) {\n            case 'youtube':\n                url = this.embed.getVideoUrl();\n                break;\n\n            case 'vimeo':\n                this.embed.getVideoUrl.then(value => {\n                    url = value;\n                });\n                break;\n\n            default:\n                url = this.media.currentSrc;\n                break;\n        }\n\n        return url;\n    }\n\n    // Poster image\n    set poster(input) {\n        if (this.type !== 'video') {\n            this.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    get poster() {\n        if (this.type !== 'video') {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    // Toggle captions\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !this.elements.buttons.captions) {\n            return this;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input)\n            ? input\n            : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.enabled === show) {\n            return this;\n        }\n\n        // Set global\n        this.captions.enabled = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.enabled);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.enabled);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.enabled ? 'captionsenabled' : 'captionsdisabled');\n\n        // Allow chaining\n        return this;\n    }\n\n    // Caption language\n    set language(input) {\n        const player = this;\n\n        // Nothing specified\n        if (utils.is.empty(input)) {\n            this.toggleCaptions(false);\n            return player;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.captions.language === language) {\n            return player;\n        }\n\n        // Reset UI\n        this.toggleCaptions(true);\n\n        // Update config\n        this.captions.language = language;\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'captionchange');\n\n        // Clear caption\n        captions.setCaption.call(this);\n\n        // Re-run setup\n        captions.setup.call(this);\n\n        // Allow chaining\n        return this;\n    }\n\n    get language() {\n        return this.captions.language;\n    }\n\n    // Toggle fullscreen\n    // Requires user input event\n    toggleFullscreen(event) {\n        // Check for native support\n        if (fullscreen.enabled) {\n            // If it's a fullscreen change event, update the UI\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    // Request full screen\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    // Bail from fullscreen\n                    fullscreen.cancelFullScreen();\n                }\n\n                // Check if we're actually full screen (it could fail)\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n\n                return this;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.fullscreen.fallback,\n                this.fullscreen.active\n            );\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n\n        return this;\n    }\n\n    // Toggle picture-in-picture\n    // TODO: update player with state, support, enabled\n    // TODO: detect outside changes\n    togglePictureInPicture(input) {\n        const player = this;\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return player;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.media.webkitPresentationMode === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n\n        return this;\n    }\n\n    // Trigger airplay\n    // TODO: update player with state, support, enabled\n    airPlay() {\n        // Bail if no support\n        if (!support.airplay) {\n            return this;\n        }\n\n        // Show dialog\n        this.media.webkitShowPlaybackTargetPicker();\n\n        return this;\n    }\n\n    // Show the player controls in fullscreen mode\n    toggleControls(toggle) {\n        const player = this;\n\n        // We need controls of course...\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return player;\n        }\n\n        // Don't hide if config says not to, it's audio, or not ready or loading\n        if (!this.supported.ui || !this.config.hideControls || this.type === 'audio') {\n            return player;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n        const loading = utils.hasClass(this.elements.container, this.config.classNames.loading);\n\n        // Default to false if no boolean\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = ['mousemove', 'touchstart', 'mouseenter', 'focus'].includes(toggle.type);\n\n                // Delay hiding on move events\n                if (['mousemove', 'touchmove'].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focus') {\n                    delay = 3000;\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer every movement\n        window.clearTimeout(this.timers.hover);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.media.paused || loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.media.paused || loading) {\n                return player;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || !this.media.paused) {\n            this.timers.hover = window.setTimeout(() => {\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n\n        return this;\n    }\n\n    // Event listeners\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n\n        return this;\n    }\n\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n\n        return this;\n    }\n\n    // Check for support\n    supports(mimeType) {\n        return support.mime(this, mimeType);\n    }\n\n    // Destroy an instance\n    // Event listeners are removed when elements are removed\n    // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                utils.removeElement(this.elements.captions);\n                utils.removeElement(this.elements.controls);\n                utils.removeElement(this.elements.wrapper);\n\n                // Clear for GC\n                this.elements.captions = null;\n                this.elements.controls = null;\n                this.elements.wrapper = null;\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                const parent = this.elements.container.parentNode;\n\n                if (utils.is.htmlElement(parent)) {\n                    parent.replaceChild(this.elements.original, this.elements.container);\n                }\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (this.type) {\n            case 'youtube':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                this.embed.destroy();\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                this.embed.unload().then(done);\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            case 'video':\n            case 'audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n\nexport default Plyr;\n"],"names":["set","value","support","storage","this","config","enabled","extend","localStorage","setItem","key","JSON","stringify","defaults","window","navigator","language","split","types","utils","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","undefined","Array","isArray","NodeList","HTMLElement","Event","instanceOf","TextTrackCue","VTTCue","TextTrack","kind","string","array","nodeList","length","object","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","querySelectorAll","tag","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","sibling","nextSibling","appendChild","is","htmlElement","removeChild","target","type","attributes","text","setAttributes","textContent","childNodes","lastChild","setAttribute","sel","existingAttributes","empty","existing","selector","s","trim","className","replace","parts","charAt","class","id","toggle","contains","classList","prototype","Element","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","call","container","querySelector","controls","getElement","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","warn","toggleNativeControls","focused","activeElement","body","tabbables","first","last","on","event","which","_this","active","shiftKey","preventDefault","focus","callback","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","properties","CustomEvent","assign","Plyr","dispatchEvent","state","newState","getAttribute","current","max","toFixed","objects","destination","shift","source","property","match","RegExp","$2","number","map","encodeURIComponent","join","fragment","createDocumentFragment","innerHTML","firstChild","innerText","updateSprite","data","hasId","cached","getItem","parse","content","xhr","XMLHttpRequest","open","onload","responseText","send","find","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","removeItem","function","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","player","media","canPlayType","supported","defineProperty","addEventListener","range","transitionEnd","matchMedia","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","log","toggleClass","toggleState","trapFocus","setup","parseFloat","listeners","timeUpdate","displayDuration","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","cursor","hideControls","touch","paused","ended","disableContextMenu","updateSetting","speed","quality","concat","getKeyCode","keyCode","handleKey","code","pressed","held","getFocusElement","stopPropagation","increaseVolume","decreaseVolume","toggleMute","toggleFullscreen","toggleCaptions","setLoop","inputEvent","isIE","togglePlay","_this2","keyboard","global","editable","tabFocus","setTimeout","proxy","handlerKey","defaultHandler","customHandler","defaultPrevented","togglePictureInPicture","airPlay","toggleMenu","form","showTab","toLowerCase","loop","isWebkit","updateRangeFill","updateSeekTooltip","toggleControls","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","eventType","uiSupported","isHTML5","removeAttribute","removeElement","inject","ready","autoplay","updateTimeDisplay","label","i18n","title","playLarge","isEmbed","iframe","frameTitle","playing","stopped","muted","setRange","loading","timers","nodeValue","getPercentage","buffered","end","setProgress","time","secs","parseInt","mins","hours","displayHours","slice","seeking","styleSheet","sheet","percentage","styles","rules","findIndex","rule","selectorText","deleteRule","insertRule","iconUrl","indexOf","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","setAttributeNS","hidden","badge","menu","buttonType","attr","button","iconDefault","iconToggled","labelKey","control","getAttributesFromSelector","createIcon","createLabel","suffix","played","tooltips","percent","clientRect","getBoundingClientRect","visible","width","pageX","left","hasClass","setting","tab","tabs","pane","panes","list","filter","toggleTab","emptyElement","getBadge","createBadge","item","radio","createTextNode","getLabel","getLanguage","default","checked","option","textTracks","tracks","none","currentTrack","disabled","track","toUpperCase","unshift","_this3","_this4","insertAdjacentHTML","show","isMenuItem","isButton","clone","position","opacity","name","scrollWidth","height","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","_this5","back","setSpeedMenu","loadSprite","seekTime","create","findElements","labels","_this6","setCaptionsMenu","insertAfter","setCurrentTrack","setCue","mode","activeCues","embed","enableTextTrack","cue","getCueAsHTML","caption","youtube","videoId","parseYouTubeId","embedId","containers","generateId","YT","loadScript","urls","onYouTubeReadyCallbacks","push","onYouTubeIframeAPIReady","Player","location","hostname","href","instance","getPlaybackQuality","playbackRate","getPlaybackRate","playVideo","pauseVideo","stop","stopVideo","getDuration","isMuted","getCurrentTime","seekTo","setPlaybackRate","getAvailablePlaybackRates","getVideoData","build","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","setQualityMenu","getAvailableQualityLevels","vimeo","Vimeo","vimeoTimer","params","buildUrlParameters","parseVimeoId","setCurrentTime","then","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","setTitle","blankVideo","insertElement","attribute","sources","cancelRequests","destroy","firstSource","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","debug","console","plyr","original","tagName","min","step","setVolume","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","states","webkitPresentationMode","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","clearTimeout","mimeType","mime","soft","done","replaceChild","unload","html5","targetTime","fauxDuration","realDuration","isSet","selected","setPlaybackQuality","change","getVideoUrl","currentSrc","setCaption"],"mappings":"uLAQA,SAASA,EAAIC,GAEJC,EAAQC,SAAYC,KAAKC,OAAOF,QAAQG,YAKvCC,OAAOH,KAAKD,QAASF,UAGpBO,aAAaC,QAAQL,KAAKC,OAAOF,QAAQO,IAAKC,KAAKC,UAAUR,KAAKD,WCjB7E,IAAMU,YAEO,QAGF,UAGA,YAGG,WAGA,UAGF,SACD,mBAGU,eAGJ,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,iDAGG,gDAGF,sBAIG,mBACC,SAAU,SAAU,SAAU,QAAS,QAAS,SAAU,QAAS,OAAQ,0BAK7E,QACD,SACF,qBAKI,WACC,GAAK,IAAM,EAAG,KAAM,IAAK,KAAM,uBAKhC,UACD,uBAKE,QACJ,qBAKE,WACEC,OAAOC,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,qBAKD,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAEO,WAAY,UAAW,QAAS,sBAI9B,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,oBACI,6BACI,mCACE,+BACN,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,6BAMD,uDAGA,uDAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,gBACA,iBACA,gBACA,sBAIA,gBACA,wCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,+BACC,kCACH,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,4BACE,qBACH,oBACG,wBACA,sBACF,sBACE,sBACF,sBACE,uBACD,6BACM,4BACP,uBACE,6BACI,4BAEF,0BACA,i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"}