{"version":3,"file":"plyr.js","sources":["src/js/storage.js","src/js/defaults.js","src/js/types.js","src/js/utils.js","src/js/support.js","src/js/fullscreen.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\n// Get contents of local storage\nfunction get() {\n    const store = window.localStorage.getItem(this.config.storage.key);\n\n    if (utils.is.empty(store)) {\n        return {};\n    }\n\n    return JSON.parse(store);\n}\n\n// Save a value back to local storage\nfunction set(object) {\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return;\n    }\n\n    // Can only store objectst\n    if (!utils.is.object(object)) {\n        return;\n    }\n\n    // Get current storage\n    const storage = get.call(this);\n\n    // Update the working copy of the values\n    utils.extend(storage, object);\n\n    // Update storage\n    window.localStorage.setItem(this.config.storage.key, JSON.stringify(storage));\n}\n\n// Setup localStorage\nfunction setup() {\n    let value = null;\n    let storage = {};\n\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return storage;\n    }\n\n    // Clean up old volume\n    // https://github.com/sampotts/plyr/issues/171\n    window.localStorage.removeItem('plyr-volume');\n\n    // load value from the current key\n    value = window.localStorage.getItem(this.config.storage.key);\n\n    if (!value) {\n        // Key wasn't set (or had been cleared), move along\n    } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n        // If value is a number, it's probably volume from an older\n        // version of this. See: https://github.com/sampotts/plyr/pull/313\n        // Update the key to be JSON\n        set({\n            volume: parseFloat(value),\n        });\n    } else {\n        // Assume it's JSON from this or a later version of plyr\n        storage = JSON.parse(value);\n    }\n\n    return storage;\n}\n\nexport default { setup, set, get };\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration\n    displayDuration: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video to play\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: ['hd2160', 'hd1440', 'hd1080', 'hd720', 'large', 'medium', 'small', 'tiny', 'default'],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: ['captions', 'quality', 'speed', 'loop'],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        toggleMute: 'Toggle Mute',\n        toggleCaptions: 'Toggle Captions',\n        toggleFullscreen: 'Toggle Fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types\n// ==========================================================================\n\nconst types = {\n    embed: ['youtube', 'vimeo'],\n    html5: ['video', 'audio'],\n};\n\nexport default types;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.undefined(input) && Array.isArray(input);\n        },\n        nodeList(input) {\n            return !this.undefined(input) && input instanceof NodeList;\n        },\n        htmlElement(input) {\n            return !this.undefined(input) && input instanceof HTMLElement;\n        },\n        event(input) {\n            return !this.undefined(input) && input instanceof Event;\n        },\n        cue(input) {\n            return this.instanceOf(input, window.TextTrackCue) || this.instanceOf(input, window.VTTCue);\n        },\n        track(input) {\n            return (\n                !this.undefined(input) && (this.instanceOf(input, window.TextTrack) || typeof input.kind === 'string')\n            );\n        },\n        undefined(input) {\n            return input !== null && typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                input === null ||\n                typeof input === 'undefined' ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && input.length === 0) ||\n                (this.object(input) && Object.keys(input).length === 0)\n            );\n        },\n        getConstructor(input) {\n            if (input === null || typeof input === 'undefined') {\n                return null;\n            }\n\n            return input.constructor;\n        },\n        instanceOf(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url, callback) {\n        // Check script is not already referenced\n        if (document.querySelectorAll(`script[src=\"${url}\"]`).length) {\n            return;\n        }\n\n        // Build the element\n        const element = document.createElement('script');\n        element.src = url;\n\n        // Find first script\n        const first = document.getElementsByTagName('script')[0];\n\n        // Bind callback\n        if (utils.is.function(callback)) {\n            element.addEventListener('load', event => callback.call(null, event), false);\n        }\n\n        // Inject\n        first.parentNode.insertBefore(element, first);\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            container.setAttribute('hidden', '');\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            fetch(url)\n                .then(response => response.text())\n                .then(text => {\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: text,\n                            })\n                        );\n                    }\n\n                    updateSprite.call(container, text);\n                });\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.htmlElement(element) || !utils.is.htmlElement(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.htmlElement(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.htmlElement(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches =\n            prototype.matches ||\n            prototype.webkitMatchesSelector ||\n            prototype.mozMatchesSelector ||\n            prototype.msMatchesSelector ||\n            match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.htmlElement(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(\n                    `.${this.config.classNames.tooltip}`\n                );\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.console.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const tabbables = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = tabbables[0];\n        const last = tabbables[tabbables.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // Bail if not tab key or not fullscreen\n                if (event.key !== 'Tab' || event.keyCode !== 9 || !this.fullscreen.active) {\n                    return;\n                }\n\n                // Get the current focused element\n                const focused = utils.getFocusElement();\n\n                if (focused === last && !event.shiftKey) {\n                    // Move focus to first element that can be tabbed if Shift isn't used\n                    first.focus();\n                    event.preventDefault();\n                } else if (focused === first && event.shiftKey) {\n                    // Move focus to last element that can be tabbed if Shift is used\n                    last.focus();\n                    event.preventDefault();\n                }\n            },\n            false\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (elements === null || utils.is.undefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // Bail if no target\n        if (!utils.is.htmlElement(element)) {\n            return;\n        }\n\n        // Get state\n        const state = utils.is.boolean(input) ? input : !element.getAttribute('aria-pressed');\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    extend(...objects) {\n        const { length } = objects;\n\n        // Bail if nothing to merge\n        if (!length) {\n            return null;\n        }\n\n        // Return first if specified but nothing to merge\n        if (length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        let destination = Array.prototype.shift.call(objects);\n        if (!utils.is.object(destination)) {\n            destination = {};\n        }\n\n        // Loop through all objects to merge\n        objects.forEach(source => {\n            if (!utils.is.object(source)) {\n                return;\n            }\n\n            Object.keys(source).forEach(property => {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    utils.extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            });\n        });\n\n        return destination;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert object to URL parameters\n    buildUrlParameters(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (type) {\n            case 'video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Local storage\n    // We can't assume if local storage is present that we can use it\n    storage: (() => {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        const test = '___test';\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    })(),\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.type === 'video') {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.type === 'audio') {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        ['webkit', 'o', 'moz', 'ms', 'khtml'].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled:\n        document.fullscreenEnabled ||\n        document.webkitFullscreenEnabled ||\n        document.mozFullScreenEnabled ||\n        document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        return !prefix.length\n            ? target.requestFullScreen()\n            : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length\n            ? document.cancelFullScreen()\n            : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.type === 'audio' || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.console.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.console.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport storage from './storage';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst listeners = {\n    // Global listeners\n    global() {\n        let last = null;\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const held = pressed && code === last;\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.htmlElement(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!held) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!held) {\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!held) {\n                            this.muted = !this.muted;\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!held) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 76:\n                        // L key\n                        this.loop = !this.loop;\n                        break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(\n                this.elements.container,\n                'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen',\n                event => {\n                    this.toggleControls(event);\n                }\n            );\n        }\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.displayDuration.call(this, event));\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.type === 'video' && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'waiting canplay seeked', event => ui.checkLoading.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && this.type !== 'audio') {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!wrapper) {\n                return;\n            }\n\n            // Set cursor\n            wrapper.style.cursor = 'pointer';\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.media.paused) {\n                    return;\n                }\n\n                if (this.media.paused) {\n                    this.play();\n                } else if (this.media.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save to storage\n            storage.set.call(this, { speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save to storage\n            storage.set.call(this, { quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'languagechange', () => {\n            // Save to storage\n            storage.set.call(this, { language: this.language });\n        });\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save to storage\n            storage.set.call(this, { volume: this.volume, muted: this.muted });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            storage.set.call(this, { captions: this.captions.enabled });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat(['keyup', 'keydown']).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.media.error;\n            }\n\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true, detail);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Click play/pause helper\n        const togglePlay = () => {\n            const play = this.togglePlay();\n\n            // Determine which buttons\n            const target = this.elements.buttons[play ? 'pause' : 'play'];\n\n            // Transfer focus\n            if (utils.is.htmlElement(target)) {\n                target.focus();\n            }\n        };\n\n        // Play\n        utils.on(this.elements.buttons.play, 'click', event => proxy(event, 'play', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.pause, 'click', event => proxy(event, 'pause', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = !this.muted;\n            })\n        );\n\n        // Captions\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airPlay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            // Show tab in menu\n            controls.showTab.call(this, event);\n\n            // Settings menu items - use event delegation as items are added/removed\n            // Settings - Language\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.toggleCaptions(true);\n                    this.language = event.target.value.toLowerCase();\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                // Settings - Quality\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                // Settings - Speed\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else if (utils.matches(event.target, this.config.selectors.buttons.loop)) {\n                // Settings - Looping\n                // TODO: use toggle buttons\n                proxy(event, 'loop', () => {\n                    // TODO: This should be done in the method itself I think\n                    // var value = event.target.getAttribute('data-loop__value') || event.target.getAttribute('data-loop__type');\n\n                    this.console.warn('Set loop');\n                });\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event =>\n            controls.updateSeekTooltip.call(this, event)\n        );\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = ['mousedown', 'touchstart'].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            // TODO: Check we need capture here\n            utils.on(\n                this.elements.controls,\n                'focus blur',\n                event => {\n                    this.toggleControls(event);\n                },\n                true\n            );\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.console.warn(`Basic support only for ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Show the duration on metadataloaded\n    displayDuration() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's only one time display, display duration there\n        if (!this.elements.display.duration && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.currentTime);\n        }\n\n        // If there's a duration element, update content\n        if (this.elements.display.duration) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.htmlElement(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, !this.paused);\n\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        this.toggleControls(this.paused);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.htmlElement(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update checkbox for mute state\n        if (utils.is.htmlElement(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = event.type === 'waiting';\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value) {\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        // Default to 0\n        const value = !utils.is.undefined(input) ? input : 0;\n        const progress = !utils.is.undefined(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.htmlElement(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.htmlElement(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(value, element) {\n        // Bail if there's no duration display\n        if (!utils.is.htmlElement(element)) {\n            return null;\n        }\n\n        // Fallback to 0\n        const time = !Number.isNaN(value) ? value : 0;\n\n        let secs = parseInt(time % 60, 10);\n        let mins = parseInt((time / 60) % 60, 10);\n        const hours = parseInt((time / 60 / 60) % 60, 10);\n\n        // Do we need to display hours?\n        const displayHours = parseInt((this.duration / 60 / 60) % 60, 10) > 0;\n\n        // Ensure it's two digits. For example, 03 rather than 3.\n        secs = `0${secs}`.slice(-2);\n        mins = `0${mins}`.slice(-2);\n\n        // Generate display\n        const display = `${(displayHours ? `${hours}:` : '') + mins}:${secs}`;\n\n        // Render\n        // eslint-disable-next-line\n        element.textContent = display;\n\n        // Return for looping\n        return display;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Duration\n        ui.updateTimeDisplay.call(this, this.currentTime, this.elements.display.currentTime);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.htmlElement(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Inject the stylesheet if needed\n        if (!utils.is.htmlElement(this.elements.styleSheet)) {\n            this.elements.styleSheet = utils.createElement('style');\n            this.elements.container.appendChild(this.elements.styleSheet);\n        }\n\n        const styleSheet = this.elements.styleSheet.sheet;\n        const percentage = range.value / range.max * 100;\n        const selector = `#${range.id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const index = Array.from(styleSheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (index !== -1) {\n            styleSheet.deleteRule(index);\n        }\n\n        // Insert new one\n        styleSheet.insertRule([selector, styles].join(' '));\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type) {\n        let text = this.config.i18n[type];\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        return utils.createElement(\n            'span',\n            {\n                class: this.config.classNames.hidden,\n            },\n            text\n        );\n    },\n\n    // Create a badge\n    createBadge(text) {\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n        let iconDefault;\n        let iconToggled;\n        let labelKey;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.indexOf(this.config.classNames.control) === -1) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'mute':\n                labelKey = 'toggleMute';\n                iconDefault = 'volume';\n                iconToggled = 'muted';\n                break;\n\n            case 'captions':\n                labelKey = 'toggleCaptions';\n                iconDefault = 'captions-off';\n                iconToggled = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                labelKey = 'toggleFullscreen';\n                iconDefault = 'enter-fullscreen';\n                iconToggled = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class = 'plyr__play-large';\n                type = 'play';\n                labelKey = 'play';\n                iconDefault = 'play';\n                break;\n\n            default:\n                labelKey = type;\n                iconDefault = type;\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        // Add toggle icon if needed\n        if (utils.is.string(iconToggled)) {\n            button.appendChild(\n                controls.createIcon.call(this, iconToggled, {\n                    class: 'icon--pressed',\n                })\n            );\n            button.appendChild(\n                controls.createIcon.call(this, iconDefault, {\n                    class: 'icon--not-pressed',\n                })\n            );\n        } else {\n            button.appendChild(controls.createIcon.call(this, iconDefault));\n        }\n\n        button.appendChild(controls.createLabel.call(this, labelKey));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('span', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(\n            utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00')\n        );\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.htmlElement(this.elements.inputs.seek) ||\n            !utils.is.htmlElement(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = this.elements.display.seekTooltip.style.left.replace('%', '');\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.duration / 100 * percent, this.elements.display.seekTooltip);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && ['mouseenter', 'mouseleave'].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        if (utils.is.htmlElement(tab)) {\n            if (toggle) {\n                tab.removeAttribute('hidden');\n            } else {\n                tab.setAttribute('hidden', '');\n            }\n        }\n\n        if (utils.is.htmlElement(pane)) {\n            if (toggle) {\n                pane.removeAttribute('hidden');\n            } else {\n                pane.setAttribute('hidden', '');\n            }\n        }\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.type === 'youtube';\n        controls.toggleTab.call(this, 'quality', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.quality), {\n                    type: 'radio',\n                    name: 'plyr-quality',\n                    value: quality,\n                })\n            );\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(controls.getLabel.call(this, 'quality', quality)));\n\n            const badge = getBadge(quality);\n            if (utils.is.htmlElement(badge)) {\n                label.appendChild(badge);\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'quality', list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.language;\n\n                if (!this.captions.enabled) {\n                    value = '';\n                }\n\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.console.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.console.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.htmlElement(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // Check it\n        target.checked = true;\n\n        // Find the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n    },\n\n    // Set the looping options\n    setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.loop.removeAttribute('hidden');\n        this.elements.settings.panes.loop.removeAttribute('hidden');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    },\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || utils.is.empty(this.captions.tracks)) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.enabled) {\n            return this.captions.currentTrack.label;\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.captions.tracks);\n        controls.toggleTab.call(this, 'captions', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = Array.from(this.captions.tracks).map(track => ({\n            language: track.language,\n            badge: true,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.language), {\n                    type: 'radio',\n                    name: 'plyr-language',\n                    value: track.language,\n                })\n            );\n\n            if (track.language.toLowerCase() === this.captions.language.toLowerCase()) {\n                radio.checked = true;\n            }\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(track.label || track.language));\n\n            if (track.badge) {\n                label.appendChild(controls.createBadge.call(this, track.language.toUpperCase()));\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'captions', list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.speed = options.filter(speed => this.config.speed.options.includes(speed));\n        } else {\n            this.options.speed = this.config.speed.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, 'speed', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.speed.removeAttribute('hidden');\n        this.elements.settings.panes.speed.removeAttribute('hidden');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.speed), {\n                    type: 'radio',\n                    name: 'plyr-speed',\n                    value: speed,\n                })\n            );\n\n            label.appendChild(radio);\n            label.insertAdjacentHTML('beforeend', controls.getLabel.call(this, 'speed', speed));\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'speed', list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : form && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = form && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (button) {\n            button.setAttribute('aria-expanded', show);\n        }\n        if (form) {\n            form.setAttribute('aria-hidden', !show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.htmlElement(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || !['width', 'height'].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement(\n            'div',\n            utils.getAttributesFromSelector(this.config.selectors.controls.wrapper)\n        );\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement(\n                'span',\n                utils.getAttributesFromSelector(this.config.selectors.progress)\n            );\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('span', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.htmlElement(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.htmlElement(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.htmlElement(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport storage from './storage';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        if (!utils.is.empty(storage.get.call(this).language)) {\n            this.captions.language = storage.get.call(this).language;\n        } else if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.enabled)) {\n            if (!utils.is.empty(storage.get.call(this).language)) {\n                this.captions.enabled = storage.get.call(this).captions;\n            } else {\n                this.captions.enabled = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!['video', 'vimeo'].includes(this.type) || (this.type === 'video' && !support.textTracks)) {\n            this.captions.tracks = null;\n\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.htmlElement(this.elements.captions)) {\n            this.elements.captions = utils.createElement(\n                'div',\n                utils.getAttributesFromSelector(this.config.selectors.captions)\n            );\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Get tracks from HTML5\n        if (this.type === 'video') {\n            this.captions.tracks = this.media.textTracks;\n        }\n\n        // Set the class hook\n        utils.toggleClass(\n            this.elements.container,\n            this.config.classNames.captions.enabled,\n            !utils.is.empty(this.captions.tracks)\n        );\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Get a track\n        const setCurrentTrack = () => {\n            // Reset by default\n            this.captions.currentTrack = null;\n\n            // Filter doesn't seem to work for a TextTrackList :-(\n            Array.from(this.captions.tracks).forEach(track => {\n                if (track.language === this.captions.language.toLowerCase()) {\n                    this.captions.currentTrack = track;\n                }\n            });\n        };\n\n        // Get current track\n        setCurrentTrack();\n\n        // If we couldn't get the requested language, revert to default\n        if (!utils.is.track(this.captions.currentTrack)) {\n            const { language } = this.config.captions;\n\n            // Reset to default\n            // We don't update user storage as the selected language could become available\n            this.captions.language = language;\n\n            // Get fallback track\n            setCurrentTrack();\n\n            // If no match, disable captions\n            if (!utils.is.track(this.captions.currentTrack)) {\n                this.toggleCaptions(false);\n            }\n\n            controls.updateSetting.call(this, 'captions');\n        }\n\n        // Setup HTML5 track rendering\n        if (this.type === 'video') {\n            // Turn off native caption rendering to avoid double captions\n            Array.from(this.captions.tracks).forEach(track => {\n                // Remove previous bindings (if we've changed source or language)\n                utils.off(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Hide captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Check if suported kind\n            const supported =\n                this.captions.currentTrack && ['captions', 'subtitles'].includes(this.captions.currentTrack.kind);\n\n            if (utils.is.track(this.captions.currentTrack) && supported) {\n                utils.on(this.captions.currentTrack, 'cuechange', event => captions.setCue.call(this, event));\n\n                // If we change the active track while a cue is already displayed we need to update it\n                if (this.captions.currentTrack.activeCues && this.captions.currentTrack.activeCues.length > 0) {\n                    captions.setCue.call(this, this.captions.currentTrack);\n                }\n            }\n        } else if (this.type === 'vimeo' && this.captions.active) {\n            this.embed.enableTextTrack(this.captions.language);\n        }\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.set.call(this, active.getCueAsHTML());\n        } else {\n            captions.set.call(this);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    set(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.htmlElement(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.undefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.console.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.htmlElement(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = storage.get.call(this).captions;\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        const videoId = utils.parseYouTubeId(this.embedId);\n\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Get the title\n        const key = 'AIzaSyDrNwtN3nLH_8rjCmu5Wq3ZCm4MNAVdc0c';\n        const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&fields=items(snippet(title))&part=snippet&key=${key}`;\n\n        fetch(url)\n            .then(response => response.json())\n            .then(obj => {\n                if (utils.is.object(obj)) {\n                    this.config.title = obj.items[0].snippet.title;\n                    ui.setTitle.call(this);\n                }\n            })\n            .catch(() => {});\n\n        // Setup API\n        if (utils.is.object(window.YT)) {\n            youtube.ready.call(this, videoId);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this, videoId);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready(videoId) {\n        const player = this;\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(player.media.id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: this.captions.active ? 1 : 0,\n                cc_lang_pref: this.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message =\n                                'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Get available speeds\n                    if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n                        controls.setSpeedMenu.call(player, instance.getAvailablePlaybackRates());\n                    }\n\n                    // Set title\n                    if (utils.is.function(instance.getVideoData)) {\n                        player.config.title = instance.getVideoData().title;\n                    }\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                                player.media.paused = true;\n                            }\n\n                            break;\n\n                        case 1:\n                            player.media.paused = false;\n\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n\n                            player.media.seeking = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'play');\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api, () => {\n                vimeo.ready.call(this);\n            });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 200;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParameters(options);\n        const id = utils.parseVimeoId(player.embedId);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        player.media.appendChild(iframe);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n        player.media.stop = () => {\n            player.embed.stop().then(() => {\n                player.media.paused = true;\n                player.currentTime = 0;\n            });\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([player.embed.getVideoWidth(), player.embed.getVideoHeight()]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Get available speeds\n        if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(player);\n        }\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.captions.tracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.set.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.htmlElement(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'play');\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            if (parseInt(data.percent, 10) === 1) {\n                // Trigger event\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.console.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.pip.supported,\n                support.pip && this.type === 'video'\n            );\n\n            // Check for airplay support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.airplay.supported,\n                support.airplay && this.isHTML5\n            );\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (['video', 'youtube', 'vimeo'].includes(this.type)) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.type) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.console.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport types from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.console.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.htmlElement(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type\n                if ('type' in input) {\n                    this.type = input.type;\n\n                    // Get child type for video (it might be an embed)\n                    if (this.type === 'video') {\n                        const firstSource = input.sources[0];\n\n                        if ('type' in firstSource && types.embed.includes(firstSource.type)) {\n                            this.type = firstSource.type;\n                        }\n                    }\n                }\n\n                // Check for support\n                this.supported = support.check(this.type, this.config.inline);\n\n                // Create new markup\n                switch (this.type) {\n                    case 'video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube':\n                    case 'vimeo':\n                        this.media = utils.createElement('div');\n                        this.embedId = input.sources[0].src;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hooks\n                utils.toggleClass(\n                    this.elements.container,\n                    this.config.classNames.captions.active,\n                    this.supported.ui && this.captions.enabled\n                );\n\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true\n        );\n    },\n};\n\nexport default source;\n","﻿// ==========================================================================\n// Plyr\n// plyr.js v3.0.0\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './defaults';\nimport types from './types';\nimport support from './support';\nimport utils from './utils';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport media from './media';\nimport storage from './storage';\nimport source from './source';\nimport ui from './ui';\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        this.ready = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if (\n            (window.jQuery && this.media instanceof jQuery) ||\n            utils.is.nodeList(this.media) ||\n            utils.is.array(this.media)\n        ) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr'));\n                } catch (e) {\n                    return null;\n                }\n            })()\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            enabled: null,\n            tracks: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        this.console = {\n            log() {},\n            warn() {},\n            error() {},\n        };\n        if (this.config.debug && 'console' in window) {\n            this.console = {\n                log: console.log, // eslint-disable-line\n                warn: console.warn, // eslint-disable-line\n                error: console.error, // eslint-disable-line\n            };\n            this.console.log('Debugging enabled');\n        }\n\n        // Log config options and support\n        this.console.log('Config', this.config);\n        this.console.log('Support', support);\n\n        // We need an element to setup\n        if (this.media === null || utils.is.undefined(this.media) || !utils.is.htmlElement(this.media)) {\n            this.console.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.console.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.console.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.console.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Different setup based on type\n        switch (type) {\n            // TODO: Handle passing an iframe for true progressive enhancement\n            // case 'iframe':\n            case 'div':\n                this.type = this.media.getAttribute('data-type');\n                this.embedId = this.media.getAttribute('data-video-id');\n\n                if (utils.is.empty(this.type)) {\n                    this.console.error('Setup failed: embed type missing');\n                    return;\n                }\n\n                if (utils.is.empty(this.embedId)) {\n                    this.console.error('Setup failed: video id missing');\n                    return;\n                }\n\n                // Clean up\n                this.media.removeAttribute('data-type');\n                this.media.removeAttribute('data-video-id');\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.console.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Setup local storage for user settings\n        storage.setup.call(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.console.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        this.elements.container = utils.createElement('div');\n        utils.wrap(this.media, this.elements.container);\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Global listeners\n        listeners.global.call(this);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.console.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * If the player is HTML5\n     */\n    get isHTML5() {\n        return types.html5.includes(this.type);\n    }\n\n    /**\n     * If the player is an embed - e.g. YouTube or Vimeo\n     */\n    get isEmbed() {\n        return types.embed.includes(this.type);\n    }\n\n    /**\n     * Play the media\n     */\n    play() {\n        if ('play' in this.media) {\n            this.media.play();\n        }\n        return this;\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if ('pause' in this.media) {\n            this.media.pause();\n        }\n        return this;\n    }\n\n    get paused() {\n        return this.media.paused;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} toggle\n     */\n    togglePlay(toggle) {\n        // True toggle if nothing passed\n        if ((!utils.is.boolean(toggle) && this.media.paused) || toggle) {\n            return this.play();\n        }\n\n        return this.pause();\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        return this.restart().pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n        return this;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.console.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    get seeking() {\n        return this.media.seeking;\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            ({ volume } = storage.get.call(this));\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    // Increase volume\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + utils.is.number(step) ? step : 1;\n        return this;\n    }\n\n    // Decrease volume\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - utils.is.number(step) ? step : 1;\n        return this;\n    }\n\n    // Toggle mute\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = storage.get.call(this).muted;\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    get muted() {\n        return this.media.muted;\n    }\n\n    // Playback speed\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        } else if (utils.is.number(storage.get.call(this).speed)) {\n            ({ speed } = storage.get.call(this));\n        } else {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.console.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    // Set playback quality\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        } else if (utils.is.number(storage.get.call(this).speed)) {\n            ({ quality } = storage.get.call(this));\n        } else {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.console.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    get quality() {\n        return this.media.quality;\n    }\n\n    // Toggle loop\n    // TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    get loop() {\n        return this.media.loop;\n    }\n\n    // Media source\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    // Poster image\n    set poster(input) {\n        if (this.type !== 'video') {\n            this.console.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    get poster() {\n        if (this.type !== 'video') {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    // Autoplay\n    get autoplay() {\n        return this.config.autoplay;\n    }\n\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    // Toggle captions\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.htmlElement(this.elements.buttons.captions)) {\n            return this;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input)\n            ? input\n            : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.enabled === show) {\n            return this;\n        }\n\n        // Set global\n        this.captions.enabled = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.enabled);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.enabled);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.enabled ? 'captionsenabled' : 'captionsdisabled');\n\n        // Allow chaining\n        return this;\n    }\n\n    // Caption language\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.captions.language === language) {\n            return;\n        }\n\n        // Reset UI\n        this.toggleCaptions(true);\n\n        // Update config\n        this.captions.language = language;\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n\n        // Clear caption\n        captions.set.call(this);\n\n        // Re-run setup\n        captions.setup.call(this);\n    }\n\n    get language() {\n        return this.captions.language;\n    }\n\n    // Toggle fullscreen\n    // Requires user input event\n    toggleFullscreen(event) {\n        // Check for native support\n        if (fullscreen.enabled) {\n            // If it's a fullscreen change event, update the UI\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    // Request full screen\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    // Bail from fullscreen\n                    fullscreen.cancelFullScreen();\n                }\n\n                // Check if we're actually full screen (it could fail)\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n\n                return this;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.fullscreen.fallback,\n                this.fullscreen.active\n            );\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n\n        return this;\n    }\n\n    // Toggle picture-in-picture\n    // TODO: update player with state, support, enabled\n    // TODO: detect outside changes\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    // Trigger airplay\n    // TODO: update player with state, support, enabled\n    airplay() {\n        // Bail if no support\n        if (!support.airplay) {\n            return this;\n        }\n\n        // Show dialog\n        this.media.webkitShowPlaybackTargetPicker();\n\n        return this;\n    }\n\n    // Show the player controls in fullscreen mode\n    toggleControls(toggle) {\n        const player = this;\n\n        // We need controls of course...\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return player;\n        }\n\n        // Don't hide if config says not to, it's audio, or not ready or loading\n        if (!this.supported.ui || !this.config.hideControls || this.type === 'audio') {\n            return player;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n        const loading = utils.hasClass(this.elements.container, this.config.classNames.loading);\n\n        // Default to false if no boolean\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = ['mousemove', 'touchstart', 'mouseenter', 'focus'].includes(toggle.type);\n\n                // Delay hiding on move events\n                if (['mousemove', 'touchmove'].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focus') {\n                    delay = 3000;\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer every movement\n        window.clearTimeout(this.timers.hover);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.media.paused || loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.media.paused || loading) {\n                return player;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || !this.media.paused) {\n            this.timers.hover = window.setTimeout(() => {\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n\n        return this;\n    }\n\n    // Event listeners\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n        return this;\n    }\n\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n        return this;\n    }\n\n    // Check for support\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    // Destroy an instance\n    // Event listeners are removed when elements are removed\n    // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n            this.embedId = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove buttons\n                    if (this.elements.buttons && this.elements.buttons.play) {\n                        Array.from(this.elements.buttons.play).forEach(button => utils.removeElement(button));\n                    }\n\n                    // Remove others\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                const parent = this.elements.container.parentNode;\n\n                if (utils.is.htmlElement(parent)) {\n                    parent.replaceChild(this.elements.original, this.elements.container);\n                }\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (this.type) {\n            case 'youtube':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                this.embed.destroy();\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                this.embed.unload().then(done);\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            case 'video':\n            case 'audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n\nexport default Plyr;\n"],"names":["get","store","window","localStorage","getItem","this","config","storage","key","utils","is","empty","JSON","parse","set","object","support","enabled","call","extend","setItem","stringify","defaults","navigator","language","split","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","undefined","Array","isArray","NodeList","HTMLElement","Event","instanceOf","TextTrackCue","VTTCue","TextTrack","kind","string","array","nodeList","length","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","callback","querySelectorAll","element","createElement","src","first","getElementsByTagName","function","addEventListener","event","parentNode","insertBefore","id","updateSprite","data","innerHTML","body","childNodes","hasId","container","setAttribute","cached","content","then","response","text","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","forEach","index","child","cloneNode","parent","sibling","nextSibling","appendChild","htmlElement","removeChild","target","type","attributes","setAttributes","textContent","lastChild","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","value","charAt","class","toggle","contains","classList","prototype","Element","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","querySelector","controls","getElement","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","console","warn","toggleNativeControls","focused","activeElement","tabbables","last","on","keyCode","_this","active","getFocusElement","shiftKey","focus","preventDefault","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","Plyr","dispatchEvent","state","getAttribute","current","max","toFixed","objects","destination","shift","source","property","match","RegExp","$2","number","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","removeItem","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","canPlayType","supported","defineProperty","range","transitionEnd","matchMedia","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","log","toggleClass","toggleState","trapFocus","setup","parseFloat","listeners","getKeyCode","which","handleKey","code","pressed","held","editable","stopPropagation","togglePlay","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","loop","keyboard","global","tabFocus","setTimeout","hideControls","toggleControls","eventType","timeUpdate","displayDuration","_this2","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","cursor","touch","paused","ended","disableContextMenu","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","_this3","defaultPrevented","airPlay","toggleMenu","form","showTab","toLowerCase","isWebkit","updateRangeFill","updateSeekTooltip","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","uiSupported","isHTML5","removeAttribute","removeElement","inject","ready","setTitle","updateTimeDisplay","label","i18n","title","isEmbed","iframe","frameTitle","playing","stopped","setRange","loading","timers","nodeValue","getPercentage","buffered","end","setProgress","time","secs","parseInt","mins","hours","displayHours","slice","seeking","styleSheet","sheet","percentage","styles","rules","findIndex","rule","selectorText","deleteRule","insertRule","iconUrl","indexOf","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","hidden","badge","menu","buttonType","attr","button","iconDefault","iconToggled","labelKey","control","getAttributesFromSelector","createIcon","createLabel","suffix","played","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","hasClass","setting","tab","tabs","pane","panes","list","filter","toggleTab","emptyElement","getBadge","createBadge","item","radio","createTextNode","getLabel","getLanguage","default","checked","option","textTracks","tracks","none","currentTrack","disabled","track","toUpperCase","unshift","_this4","insertAdjacentHTML","show","isMenuItem","isButton","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","_this5","back","setSpeedMenu","loadSprite","seekTime","create","findElements","labels","_this6","setCaptionsMenu","insertAfter","setCurrentTrack","setCue","mode","activeCues","embed","enableTextTrack","cue","getCueAsHTML","caption","youtube","videoId","parseYouTubeId","embedId","containers","setAspectRatio","generateId","json","obj","items","snippet","catch","YT","loadScript","urls","onYouTubeReadyCallbacks","push","onYouTubeIframeAPIReady","paddingBottom","player","Player","autoplay","location","hostname","href","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","setVolume","getVideoUrl","getAvailablePlaybackRates","getVideoData","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","vimeo","Vimeo","padding","offset","transform","params","buildUrlParameters","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","getAspectRatio","dimensions","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","blankVideo","insertElement","attribute","sources","cancelRequests","destroy","firstSource","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","debug","plyr","original","tagName","hasAttribute","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","clearTimeout","mime","soft","done","replaceChild","unload","html5","targetTime","fauxDuration","realDuration","change","states","webkitPresentationMode"],"mappings":"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"}