{"version":3,"sources":["support.js","../../node_modules/loadjs/dist/loadjs.umd.js","storage.js","types.js","utils.js","html5.js","i18n.js","controls.js","captions.js","console.js","defaults.js","fullscreen.js","ui.js","listeners.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","plyr.js"],"names":["range","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFile","path","callbackFn","numTries","isCss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","replace","test","createElement","rel","href","src","undefined","onload","onerror","onbeforeload","ev","result","type","sheet","cssText","x","defaultPrevented","head","appendChild","loadjs","paths","arg1","arg2","trim","fn","i","numWaiting","push","loadFiles","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","module","exports","Storage","player","enabled","config","storage","key","supported","this","store","window","localStorage","getItem","utils","is","empty","json","JSON","parse","string","object","get","extend","setItem","stringify","removeItem","providers","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","instanceof","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","kind","array","nodeList","keys","constructor","documentMode","documentElement","style","navigator","userAgent","platform","url","responseType","arguments","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","responseText","response","Error","statusText","open","send","minWidth","image","Image","handler","naturalWidth","assign","id","hasId","exists","getElementById","update","container","data","innerHTML","body","insertAdjacentElement","useStorage","toggleHidden","setAttribute","cached","prefix","content","fetch","then","catch","Math","floor","random","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","parentNode","sibling","nextSibling","insertBefore","attributes","text","setAttributes","innerText","target","removeElement","removeChild","childNodes","lastChild","newChild","oldChild","replaceChild","entries","_ref","_ref2","value","sel","existingAttributes","existing","split","s","selector","className","parts","charAt","class","hidden","hide","boolean","hasAttribute","removeAttribute","force","method","classList","contains","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","querySelectorAll","includes","querySelector","focused","activeElement","toggle","focusable","getElements","first","last","trap","event","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","function","Node","toggleListener","events","options","support","passiveListeners","bubbles","detail","CustomEvent","dispatchEvent","_len","_key","toString","match","current","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","find","RegExp","toUpperCase","substr","toLowerCase","replaceAll","toTitleCase","toPascalCase","sources","_len2","_key2","source","shift","defineProperty","apply","concat","toConsumableArray","filter","item","indexOf","reduce","obj","prev","curr","abs","youtube","vimeo","$2","parser","search","startsWith","parseUrl","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","width","height","ratio","getRatio","w","h","offsetHeight","provider","playsinline","api","ui","browser","getBrowser","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","removeEventListener","transitionEndEvent","matchMedia","html5","getSources","sizes","getAttribute","dedupe","mime","currentTime","playing","onLoadedMetaData","load","play","blankVideo","debug","log","i18n","getDeep","seekTime","title","controls","cors","URL","iconUrl","location","host","isIE","svg4everybody","getElement","selectors","buttons","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","seekTooltip","classNames","tooltip","warn","toggleNativeControls","getIconUrl","iconPath","iconPrefix","icon","createElementNS","use","setAttributeNS","attr","badge","menu","buttonType","button","toCamelCase","label","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","controlPressed","hasClass","pressed","toggleClass","updateRangeFill","suffix","list","_ref$badge","checked","_ref$checked","radio","faux","insertAdjacentHTML","forceHours","setRange","muted","getPercentage","_this","getElementsByTagName","nodeValue","buffered","percent","isWebkit","setProperty","tooltips","clientRect","getBoundingClientRect","visible","_toggle","_this2","touch","pageX","left","parseFloat","updateTimeDisplay","invert","invertTime","seeking","updateProgress","hasDuration","displayDuration","paused","updateSeekTooltip","setting","tabs","panes","quality","_this3","toggleTab","checkMenu","emptyElement","sort","a","b","sorting","createMenuItem","getLabel","createBadge","getBadge","updateSetting","pane","currentTrack","default","tracks","getTracks","track","_this4","active","language","unshift","bind","speed","isVimeo","_this5","values","some","tab","form","show","isMenuItem","isButton","stopPropagation","clone","position","opacity","name","scrollWidth","scrollHeight","transitions","reducedMotion","size","getTabSize","restore","propertyName","createButton","createRange","createProgress","createTime","inner","home","_this6","back","setQualityMenu","getQualityOptions","setSpeedMenu","loadSprite","props","create","_ref3","findElements","repaint","labels","_this7","isYouTube","textTracks","setCaptionsMenu","insertAfter","hostname","protocol","blob","createObjectURL","userLanguage","setLanguage","trackEvents","_captions","meta","set","mode","updateCues","trackRemoved","currentTrackNode","firstMatch","getCurrentTrack","embed","enableTextTrack","toggleCaptions","has","fromLanguage","sortIsDefault","sorted","cues","activeCues","cue","getCueAsHTML","getHTML","cueText","caption","noop","Console","console","defaults","onChange","isIos","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","uiSupported","listeners","inject","setup","loop","updateVolume","timeUpdate","checkPlaying","isTouch","setTitle","poster","backgroundImage","setPoster","durationUpdate","isEmbed","iframe","enable","posterEnabled","loadPromise","loadImage","togglePoster","stopped","toggleControls","loading","timers","setTimeout","hideControls","hover","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","keyboard","global","tabFocus","delay","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","_event$detail","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","currentTarget","eventType","seekTo","toggleInvert","_player","noTransition","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","assurePlaybackState","hasPlayed","setAspectRatio","Vimeo","loadScript","urls","sdk","padding","paddingBottom","offset","transform","autoplay","buildUrlParams","parseVimeoId","embedContainer","replaceElement","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","restorePause","setVolume","setCurrentTime","selected","setPlaybackRate","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","state","getVideoTitle","getCurrentTime","getDuration","getTextTracks","strippedCues","_ref$cues","stripHTML","getPaused","seconds","build","mapQualityUnit","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","parseYouTubeId","generateId","posterSrc","backgroundSize","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","unMute","wrap","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","_this11","Date","now","base","insertElement","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Plyr","failed","jQuery","plyr","original","tagName","getProviderByUrl","getUrlParams","truthy","step","webkitShowPlaybackTargetPicker","isHidden","hiding","eventName","soft","clear","unload","inputIsValid","min","end","fauxDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","closest","change","states","webkitPresentationMode","inline","t","cloneDeep"],"mappings":"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AKL,+BAMA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,0BACF,aACC,oBACM,2BACP,iBACK,qCACH,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,oBACA,iCACH,eACC,iBACC,eACH,aACC,YACF,UACA,YACE,iBACG,mBACD,wBACM,wBAEL,UACA,UACA,SACD,SACA,SACA,wBAOA,gDACG,6CACH,wDAGA,yCACA,wHAGA,uEAMH,UACA,WACC,aACE,YACD,iBACK,UACP,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,mCACK,kCACP,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,+BACF,+BACE,mCAEF,2BACA,0BACD,+BAEI,mDAMP,qBACI,kBACH,4BACA,mCACS,sCACR,6BACO,2BACV,oBACI,+BACO,iCACP,uBACD,uBACC,wBACA,sBACF,sBACE,qBACH,oBACE,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,mBACD,qCAGG,gCACD,6CAGC,oCACC,4CAGC,6BACH,uCAGG,iCACH,iCAEF,+CAMI,wBACN,oCAMA,oBAMC,cACI,KCjZf9O,EAAU5P,EAAM6P,aAEtB,SAAS8O,OACAhf,KAAKL,aAKJqV,EAAShV,KAAKN,OAAOoG,SAASgN,QAAQU,WACxCnT,EAAMC,GAAG8F,QAAQ4O,OACVW,QAAU3V,KAAK4Z,UAIpBvO,cAAcpP,KAAK+D,KAAKN,OAAQM,KAAKiH,OAAQjH,KAAK4Z,OAAS,kBAAoB,kBAAkB,GAGlG3J,EAAQgP,SACHC,UAAUjjB,KAAK+D,KAAKN,OAAQM,KAAKiH,OAAQjH,KAAK4Z,SAI5D,SAASuF,QAAezV,EAAgBrG,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,IAAAA,UAAA,GAEhCqG,OACK0V,kBACElf,OAAOmf,SAAW,IAClBnf,OAAOof,SAAW,UAGlBC,SAASvf,KAAKof,eAAenhB,EAAG+B,KAAKof,eAAeI,YAItDxa,KAAKjC,MAAM0c,SAAW/V,EAAS,SAAW,KAG7CkM,YAAY5V,KAAKiH,OAAQjH,KAAKN,OAAOE,OAAOqU,WAAWT,WAAWkM,SAAUhW,KAGzEzN,KAAK+D,UAGZ2f,EAAAA,sBACUjgB,6BAEHA,OAASA,OAGT4F,OAASqa,EAAWra,YACpBsa,SAAWD,EAAWC,cAGtBR,gBAAmBnhB,EAAG,EAAGuhB,EAAG,KAI3BlV,GAAG3N,SAA0B,OAAhBqD,KAAKsF,OAAkB,qBAA0BtF,KAAKsF,OAAtD,mBAAgF,aAEtFrJ,KAAKya,OAIZpM,GAAGtK,KAAKN,OAAOoG,SAASjB,UAAW,WAAY,SAAAmF,GAE7C3J,EAAMC,GAAG8F,QAAQsQ,EAAKhX,OAAOoG,SAASsM,WAAasE,EAAKhX,OAAOoG,SAASsM,SAASrJ,SAASiB,EAAM/C,WAI/FyC,gBAIJ9E,oDAwED5E,KAAKL,aACAD,OAAOoS,MAAMC,KAAO4N,EAAWE,OAAS,SAAW,YAAxD,4BAEKngB,OAAOoS,MAAMC,IAAI,oDAIpB6D,YAAY5V,KAAKN,OAAOoG,SAASjB,UAAW7E,KAAKN,OAAOE,OAAOqU,WAAWT,WAAW7T,QAASK,KAAKL,yCAKpGK,KAAKL,UAKNsQ,EAAQgP,OAASjf,KAAKN,OAAOE,OAAO4T,WAAWsM,UAC3C9f,KAAKN,OAAO+R,cACPxK,OAAO8Y,wBAERJ,EAAWE,OAEX7f,KAAKsF,OAELjF,EAAMC,GAAGC,MAAMP,KAAKsF,cACvB2B,OAAUjH,KAAKsF,OAApB,UAAoCtF,KAAK4f,iBAFpC3Y,OAAO+Y,sBAFG/jB,KAAK+D,MAAM,sCAUzBA,KAAKL,WAKNsQ,EAAQgP,OAASjf,KAAKN,OAAOE,OAAO4T,WAAWsM,eAC1C7Y,OAAOgZ,4BACPvgB,OAAOkS,YACT,GAAK+N,EAAWE,OAEhB,GAAK7f,KAAKsF,QAEV,IAAKjF,EAAMC,GAAGC,MAAMP,KAAKsF,QAAS,KAC/B4a,EAAyB,QAAhBlgB,KAAKsF,OAAmB,SAAW,mBACtCtF,KAAKsF,OAAS4a,EAASlgB,KAAK4f,kBAHvCjjB,SAASwjB,kBAAoBxjB,SAASyjB,gBAAgBnkB,KAAKU,iBAF7CV,KAAK+D,MAAM,oCAWzBA,KAAK4Z,YAGDyG,YAFAC,+CAnFJX,EAAWE,QAAU7f,KAAKN,OAAOE,OAAO4T,WAAWkM,WACpD1f,KAAKN,OAAOE,OAAO4T,WAAW7T,SAC9BK,KAAKN,OAAOK,UAAUiQ,IACtBhQ,KAAKN,OAAOmR,+CAMX7Q,KAAKL,UAKLggB,EAAWE,QAIC7f,KAAKsF,OAAsC3I,SAAAA,GAAYqD,KAAKsF,OAAStF,KAAK4f,SAA/B,WAA7BjjB,SAAS4jB,qBAErBvgB,KAAKiH,OALb5G,EAAMqV,SAAS1V,KAAKiH,OAAQjH,KAAKN,OAAOE,OAAOqU,WAAWT,WAAWkM,iDAUzEzP,EAAQgP,OAASjf,KAAKN,OAAOE,OAAO4T,WAAWsM,UAAY9f,KAAKN,OAAOgR,MAAQ1Q,KAAKN,OAAOoG,SAASjB,oDA9DjGlI,SAAS6jB,mBAAqB7jB,SAAS8jB,yBAA2B9jB,SAAS+jB,sBAAwB/jB,SAASgkB,uDAMlHtgB,EAAMC,GAAGqK,SAAShO,SAASyjB,sBACpB,OAIPxY,EAAQ,UAER,SACA,MACA,MAGKwS,KAAK,SAAAwG,YACNvgB,EAAMC,GAAGqK,SAAShO,SAAYikB,EAAZ,qBAAqCvgB,EAAMC,GAAGqK,SAAShO,SAAYikB,EAAZ,0BACjEA,GACD,KAMRhZ,yCAIgB,QAAhB5H,KAAKsF,OAAmB,aAAe,mBAlEhDqa,GCvCA1P,EAAU5P,EAAM6P,aAEhBF,gBAAK,aAEG4F,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOiT,UAAUhO,UAAU3H,QAAQ,IAAK,KAAK,KACvF0Y,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAW4M,YAAa7gB,KAAKD,UAAUiQ,0BAH3F,WAO8B3M,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,IAAAA,UAAA,IACnBrD,KAAK2Q,aACVD,MAAMtL,aAAa,WAAY,SAE/BsL,MAAM/H,gBAAgB,mBAX5B,8BAmBEmY,UAAUpQ,SAGV1Q,KAAKD,UAAUiQ,eACX8B,MAAMqC,KAAX,0BAA0CnU,KAAK6P,SAA/C,IAA2D7P,KAAKlC,aAG7DsW,qBAAqBnY,KAAK+D,MAAM,GAOlCK,EAAMC,GAAG8F,QAAQpG,KAAK8F,SAASsM,cAEvB2O,OAAO9kB,KAAK+D,WAGhB8gB,UAAU1O,cAIhBgC,qBAAqBnY,KAAK+D,MAGzBA,KAAK2Q,WACIqQ,MAAM/kB,KAAK+D,WAInB4T,OAAS,UAGT4C,MAAQ,UAGRwD,MAAQ,UAGRiH,KAAO,UAGP1I,QAAU,OAGN2I,aAAajlB,KAAK+D,QAGlBmhB,WAAWllB,KAAK+D,QAGtBohB,aAAanlB,KAAK+D,QAGf4V,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWb,IAAIrT,UAAWiL,EAAQoI,KAAOpT,KAAK2Q,SAAW3Q,KAAK6Q,WAG/G+E,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWZ,QAAQtT,UAAWiL,EAAQqI,SAAWrT,KAAK2Q,WAGvGiF,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWgL,MAAOhP,EAAQgP,SAG3ErJ,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWoN,QAASrhB,KAAKuX,YAG3ExY,OAAQ,aAGF,aACDsM,cAAcpP,KAAKya,EAAMA,EAAKhG,MAAO,UAC5C,KAGA4Q,SAASrlB,KAAK+D,MAGbA,KAAKuhB,QAAUvhB,KAAK8F,SAASyb,SAAWvhB,KAAK8F,SAASyb,OAAOxe,MAAMye,mBAChEC,UAAUxlB,KAAK+D,KAAMA,KAAKuhB,QAK7BvhB,KAAKJ,OAAOmU,YACH2N,eAAezlB,KAAK+D,gBAxG9B,eA+GCkV,EAAQlD,EAAS,OAAQhS,KAAKJ,WAG9BS,EAAMC,GAAGK,OAAOX,KAAKJ,OAAOuS,SAAW9R,EAAMC,GAAGC,MAAMP,KAAKJ,OAAOuS,iBACpDnS,KAAKJ,OAAOuS,OAI1B9R,EAAMC,GAAGoC,SAAS1C,KAAK8F,SAASgN,QAAQlB,aAClC3L,KAAKjG,KAAK8F,SAASgN,QAAQlB,MAAMzL,QAAQ,SAAA6O,KACpC5P,aAAa,aAAc8P,KAMtClV,KAAK2hB,QAAS,KACRC,EAASvhB,EAAMuS,WAAW3W,KAAK+D,KAAM,cAEtCK,EAAMC,GAAG8F,QAAQwb,cAKhBzP,EAAS9R,EAAMC,GAAGC,MAAMP,KAAKJ,OAAOuS,OAA6B,QAApBnS,KAAKJ,OAAOuS,MACzDhG,EAAS6F,EAAS,aAAchS,KAAKJ,UAEpCwF,aAAa,QAAS+G,EAAOjP,QAAQ,UAAWiV,mBA1IxD,SA+IM0P,KACHjM,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAW6N,cAAeD,cAhJ9E,SAoJGN,sBAED7Q,MAAMtL,aAAa,SAAUmc,IAG7BlhB,EAAMC,GAAG8F,QAAQpG,KAAK8F,SAASyb,eACzBje,QAAQE,aAIbue,EAAc1hB,EAAM2hB,UAAUT,GAAQ9b,KAAK,oBACxCK,SAASyb,OAAOxe,MAAMye,gBAA3B,QAAqDD,EAArD,YACOhd,OAAO+S,EAAKxR,SAASyb,OAAOxe,+BACNwe,EAAzB,oBAEgB,OAEjBU,aAAahmB,KAAKqb,GAAM,GACpBiK,aAIC7b,MAAM,kBAAMsK,EAAGiS,aAAahmB,KAAKqb,GAAM,KAG5CyK,gBA7KJ,SAiLM/X,gBAEH4L,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWxC,QAASzR,KAAKyR,WAC1EmE,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWiE,OAAQlY,KAAKkY,UACzEtC,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWiO,QAASliB,KAAKkiB,eAG1Ejc,KAAKjG,KAAK8F,SAASgN,QAAQlB,MAAMzL,QAAQ,SAAAc,KACpC0O,QAAU6C,EAAK/G,UAItBpR,EAAMC,GAAG0J,MAAMA,IAAyB,eAAfA,EAAMlM,QAKhCqkB,eAAelmB,KAAK+D,oBAlMpB,SAsMMgK,mBACJoY,SACD,UACA,WACF9Y,SAASU,EAAMlM,mBAGJkC,KAAKqiB,OAAOD,cAGpBC,OAAOD,QAAUE,WAAW,aAEvB1M,YAAY+D,EAAK7T,SAASjB,UAAW8U,EAAK/Z,OAAOqU,WAAWmO,QAASzI,EAAKyI,WAG7ED,eAAelmB,KAAK0d,IACxB3Z,KAAKoiB,QAAU,IAAM,mBAtNrB,SA0NQxZ,OACHwJ,EAAapS,KAAK8F,SAAlBsM,SAEJA,GAAYpS,KAAKJ,OAAO2iB,mBAEnBJ,eAAezgB,QAAQkH,GAAS5I,KAAKoiB,SAAWpiB,KAAKkY,QAAU9F,EAASuD,SAAWvD,EAASoQ,UCnOvGvS,EAAU5P,EAAM6P,aAEhBuS,EAAAA,sBACU/iB,kBACHA,OAASA,OACTgjB,QAAU,UAEVC,UAAY3iB,KAAK2iB,UAAU5I,KAAK/Z,WAChC4iB,WAAa5iB,KAAK4iB,WAAW7I,KAAK/Z,WAClC6iB,WAAa7iB,KAAK6iB,WAAW9I,KAAK/Z,kDAIjCgK,cACA8Y,EAAO9Y,EAAMC,QAAUD,EAAMC,QAAUD,EAAM+Y,MAC7CpN,EAAyB,YAAf3L,EAAMlM,KAChBklB,EAASrN,GAAWmN,IAAS9iB,KAAK0iB,aAGpC1Y,EAAMiZ,QAAUjZ,EAAMkZ,SAAWlZ,EAAMmZ,SAAWnZ,EAAMG,WAMvD9J,EAAMC,GAAG2L,OAAO6W,OAYjBnN,EAAS,KA6BHnM,EAAUnJ,EAAM6J,qBAClB7J,EAAMC,GAAG8F,QAAQoD,IACjBA,IAAYxJ,KAAKN,OAAOoG,SAAS4N,OAAOC,MACxCtT,EAAM4I,QAAQO,EAASxJ,KAAKN,OAAOE,OAAOiT,UAAUuQ,yBA7BpD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAee9Z,SAASwZ,OAClBzY,mBACAqQ,mBAGFoI,QACC,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,GAEIE,MA5DRtjB,OAAO8R,YAAckF,EAAKhX,OAAOqU,SAAW,IAAM+O,EAAO,gBAiErD,QACA,GAEIE,QACItjB,OAAO2jB,wBAIf,QAEI3jB,OAAO4jB,eAAe,eAG1B,QAEI5jB,OAAO6jB,eAAe,eAG1B,GAEIP,SACItjB,OAAO8W,OAASxW,KAAKN,OAAO8W,kBAIpC,QAEI9W,OAAO8jB,qBAGX,QAEI9jB,OAAOuT,oBAGX,QAEIvT,OAAO8T,WAAW9J,oBAGtB,GAEIsZ,QACItjB,OAAOse,4BAIf,QAEIte,OAAOuhB,MAAQjhB,KAAKN,OAAOuhB,MAqBnCjhB,KAAKN,OAAO8T,WAAW7T,SAAWK,KAAKN,OAAO8T,WAAWoG,QAAmB,KAATkJ,QAC/DpjB,OAAO8T,WAAW9J,cAItBgZ,QAAUI,YAEVJ,QAAU,yCAKZ1Y,KACE4Y,WAAW3mB,KAAK+D,KAAKN,OAAQsK,6CAKjCtK,OAAO6X,OAAQ,IAGd3B,YAAY5V,KAAKN,OAAOoG,SAASjB,UAAW7E,KAAKN,OAAOE,OAAOqU,WAAWoN,SAAS,KAGnF9W,IAAI5N,SAASqI,KAAM,aAAchF,KAAK6iB,iDAIzCnZ,IAAerG,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,KAAAA,UAAA,GAEdrD,KAAKN,OAAOE,OAAO6jB,SAASC,UACtB7Y,eAAe3K,OAAQ,gBAAiBF,KAAK2iB,UAAWjZ,GAAQ,KAIpEmB,eAAelO,SAASqI,KAAM,QAAShF,KAAK4iB,WAAYlZ,KAGxDY,GAAG3N,SAASqI,KAAM,aAAchF,KAAK6iB,4DAMtC7iB,KAAKN,OAAOE,OAAO6jB,SAASC,QAAU1jB,KAAKN,OAAOE,OAAO6jB,SAASja,WAC7Dc,GAAGtK,KAAKN,OAAOoG,SAASjB,UAAW,gBAAiB7E,KAAK2iB,WAAW,KAKxErY,GAAGtK,KAAKN,OAAOoG,SAASjB,UAAW,WAAY,SAAAmF,KAC3C4L,YAAY5L,EAAM/C,OAAQqQ,EAAK5X,OAAOE,OAAOqU,WAAW0P,UAAU,OAItErZ,GAAGtK,KAAKN,OAAOoG,SAASjB,UAAW,UAAW,SAAAmF,GAC1B,IAAlBA,EAAMC,oBAMC,aACD2L,YAAYvV,EAAM6J,kBAAmBoN,EAAK5X,OAAOE,OAAOqU,WAAW0P,UAAU,IACpF,OAIDrZ,GAAGtK,KAAKN,OAAOoG,SAASjB,UAAW,2EAA4E,SAAAmF,OACzGoI,EAAakF,EAAK5X,OAAOoG,SAAzBsM,SAGW,oBAAfpI,EAAMlM,SACG6X,SAAU,IACV6M,OAAQ,OAUjBoB,EAAQ,GALR,aACA,YACA,aACFta,SAASU,EAAMlM,UAKVqkB,eAAelmB,KAAKqb,EAAK5X,QAAQ,KAE5B4X,EAAK5X,OAAO6X,MAAQ,IAAO,kBAI1BD,EAAK5X,OAAO2iB,OAAOjQ,YAE3B1S,OAAO2iB,OAAOjQ,SAAWkQ,WAAW,kBAAMtS,EAAGmS,eAAelmB,KAAKqb,EAAK5X,QAAQ,IAAQkkB,qDAOzFtZ,GAAGtK,KAAKN,OAAOgR,MAAO,4BAA6B,SAAA1G,UAASoI,EAAS+O,WAAWllB,KAAKuc,EAAK9Y,OAAQsK,OAGlGM,GAAGtK,KAAKN,OAAOgR,MAAO,2CAA4C,SAAA1G,UAASoI,EAASsP,eAAezlB,KAAKuc,EAAK9Y,OAAQsK,OAIrHM,GAAGtK,KAAKN,OAAOgR,MAAO,aAAc,aAChCvL,aAAaqT,EAAK9Y,OAAOoG,SAAS8N,QAAS4E,EAAK9Y,OAAOmkB,YACvD1e,aAAaqT,EAAK9Y,OAAOoG,SAASgN,QAAQK,MAAOqF,EAAK9Y,OAAOmkB,cAIjEvZ,GAAGtK,KAAKN,OAAOgR,MAAO,QAAS,WAE7B8H,EAAK9Y,OAAOiR,SAAW6H,EAAK9Y,OAAOmR,SAAW2H,EAAK9Y,OAAOE,OAAOkkB,cAE5DpkB,OAAOsT,cAKd1I,GAAGtK,KAAKN,OAAOgR,MAAO,kCAAmC,SAAA1G,UAASoI,EAAS2F,eAAe9b,KAAKuc,EAAK9Y,OAAQsK,OAG5GM,GAAGtK,KAAKN,OAAOgR,MAAO,eAAgB,SAAA1G,UAASoI,EAAS8O,aAAajlB,KAAKuc,EAAK9Y,OAAQsK,OAGvFM,GAAGtK,KAAKN,OAAOgR,MAAO,8CAA+C,SAAA1G,UAASgG,EAAGoR,aAAanlB,KAAKuc,EAAK9Y,OAAQsK,OAGhHM,GAAGtK,KAAKN,OAAOgR,MAAO,iCAAkC,SAAA1G,UAASgG,EAAG+T,aAAa9nB,KAAKuc,EAAK9Y,OAAQsK,OAInGM,GAAGtK,KAAKN,OAAOgR,MAAO,UAAW,WAC9B8H,EAAK9Y,OAAOskB,KAKbxL,EAAK9Y,OAAOskB,IAAIrkB,UAAY6Y,EAAK9Y,OAAOskB,IAAIC,eAEvCvkB,OAAOskB,IAAIE,eAAeze,KAAK,kBAAM+S,EAAK9Y,OAAOskB,IAAIpS,SAAQlM,MAAM,kBAAM8S,EAAK9Y,OAAOkS,WAK9F5R,KAAKN,OAAOK,UAAUiQ,IAAMhQ,KAAKN,OAAOE,OAAOukB,cAAgBnkB,KAAKN,OAAOoR,QAAS,KAE9E/K,EAAU1F,EAAMuS,WAAW3W,KAAK+D,KAAKN,OAA3B,IAAuCM,KAAKN,OAAOE,OAAOqU,WAAW5D,WAGhFhQ,EAAMC,GAAG8F,QAAQL,YAKhBuE,GAAGvE,EAAS,QAAS,WAEnByS,EAAK9Y,OAAOE,OAAO2iB,cAAgB/J,EAAK9Y,OAAO6X,QAAUiB,EAAK9Y,OAAOwY,SAIrEM,EAAK9Y,OAAOwY,SACPxY,OAAOkS,OACL4G,EAAK9Y,OAAO0kB,SACd1kB,OAAOsT,YACPtT,OAAOkS,UAEPlS,OAAOqT,WAMpB/S,KAAKN,OAAOK,UAAUiQ,IAAMhQ,KAAKN,OAAOE,OAAOykB,sBACzC/Z,GACFtK,KAAKN,OAAOoG,SAASC,QACrB,cACA,SAAAiE,KACUK,mBAEV,KAKFC,GAAGtK,KAAKN,OAAOgR,MAAO,eAAgB,aAEnChR,OAAOG,QAAQ0d,KAAM3J,OAAQ4E,EAAK9Y,OAAOkU,OAAQ4C,MAAOgC,EAAK9Y,OAAO8W,YAIvElM,GAAGtK,KAAKN,OAAOgR,MAAO,aAAc,aAE7B0I,cAAcnd,KAAKuc,EAAK9Y,OAAQ,WAGpCA,OAAOG,QAAQ0d,KAAMvD,MAAOxB,EAAK9Y,OAAOsa,YAI3C1P,GAAGtK,KAAKN,OAAOgR,MAAO,mBAAoB,SAAA1G,KAEvCtK,OAAOG,QAAQ0d,KAAMhF,QAASvO,EAAMmB,OAAOoN,cAI9CjO,GAAGtK,KAAKN,OAAOgR,MAAO,gBAAiB,SAAA1G,KAEhCoP,cAAcnd,KAAKuc,EAAK9Y,OAAQ,UAAW,KAAMsK,EAAMmB,OAAOoN,aAIrEjO,GAAGtK,KAAKN,OAAOgR,MAAO,iBAAkB,aAEjC0I,cAAcnd,KAAKuc,EAAK9Y,OAAQ,cAGpCA,OAAOG,QAAQ0d,KAAM1D,SAAUrB,EAAK9Y,OAAOma,eAI9CvP,GAAGtK,KAAKN,OAAOgR,MAAO,mCAAoC,aAEnD0I,cAAcnd,KAAKuc,EAAK9Y,OAAQ,cAGpCA,OAAOG,QAAQ0d,KAAMhK,SAAUiF,EAAK9Y,OAAO6T,SAASqG,aAKvDtP,GAAGtK,KAAKN,OAAOgR,MAAO1Q,KAAKN,OAAOE,OAAOkL,OAAO4C,QAClD,QACA,YACDwB,KAAK,KAAM,SAAAlF,SACUA,EAAfmB,OAAAA,OADc3N,IAAA8mB,KAAAA,EAIA,UAAfta,EAAMlM,SACG0a,EAAK9Y,OAAOgR,MAAMvU,SAGzBkP,cAAcpP,KAAKuc,EAAK9Y,OAAQ8Y,EAAK9Y,OAAOoG,SAASjB,UAAWmF,EAAMlM,MAAM,EAAMqN,mDAOtFoZ,EAAatU,EAAQyC,KAAO,SAAW,QAGvC8R,EAAQ,SAACxa,EAAOya,EAAgBC,OAC5BC,EAAgBhL,EAAKja,OAAOE,OAAOkhB,UAAU4D,GAE/CE,GAAW,EADUvkB,EAAMC,GAAGqK,SAASga,OAK5BA,EAAc1oB,KAAK0d,EAAKja,OAAQsK,IAI3C4a,GAAYvkB,EAAMC,GAAGqK,SAAS8Z,MACfxoB,KAAK0d,EAAKja,OAAQsK,IAKnCM,EAAK,SAAClE,EAAStI,EAAM2mB,EAAgBC,OAAkBja,IAAmBpH,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,KAAAA,UAAA,GACtEshB,EAAgBhL,EAAKja,OAAOE,OAAOkhB,UAAU4D,GAC7CG,EAAmBxkB,EAAMC,GAAGqK,SAASga,KAErCra,GAAGlE,EAAStI,EAAM,SAAAkM,UAASwa,EAAMxa,EAAOya,EAAgBC,IAAmBja,IAAYoa,MAI9F7kB,KAAKN,OAAOoG,SAASgN,QAAQlB,KAAM,QAAS5R,KAAKN,OAAO2jB,WAAY,UAGpErjB,KAAKN,OAAOoG,SAASgN,QAAQE,QAAS,QAAShT,KAAKN,OAAOsT,QAAS,aAGpEhT,KAAKN,OAAOoG,SAASgN,QAAQG,OAAQ,QAASjT,KAAKN,OAAOuT,OAAQ,YAGlEjT,KAAKN,OAAOoG,SAASgN,QAAQI,YAAa,QAASlT,KAAKN,OAAO8jB,QAAS,iBAIvExjB,KAAKN,OAAOoG,SAASgN,QAAQK,KAC7B,QACA,aACSzT,OAAO8W,OAASmD,EAAKja,OAAO8W,OAErC,UAIDxW,KAAKN,OAAOoG,SAASgN,QAAQS,SAAU,QAASvT,KAAKN,OAAOse,kBAI3Dhe,KAAKN,OAAOoG,SAASgN,QAAQU,WAC7B,QACA,aACS9T,OAAO8T,WAAW9J,UAE3B,gBAKA1J,KAAKN,OAAOoG,SAASgN,QAAQM,IAC7B,QACA,aACS1T,OAAO0T,IAAM,UAEtB,SAIDpT,KAAKN,OAAOoG,SAASgN,QAAQO,QAAS,QAASrT,KAAKN,OAAO2T,QAAS,aAGpErT,KAAKN,OAAOoG,SAASgN,QAAQQ,SAAU,QAAS,SAAAtJ,KACtC4Y,WAAW3mB,KAAK0d,EAAKja,OAAQsK,OAIvChK,KAAKN,OAAOoG,SAASwN,SAASgH,KAAM,QAAS,SAAAtQ,KACtC0Q,sBAGAoK,EAAc,eACVtgB,EAAAA,iBAAsBmV,EAAKja,OAAO8E,GAAlC,UACGugB,QAAQ9oB,KAAK0d,EAAKja,OAAQ8E,OAInCnE,EAAM4I,QAAQe,EAAM/C,OAAQ0S,EAAKja,OAAOE,OAAOiT,UAAUa,OAAOmG,YAE5D7P,EACA,aACStK,OAAO4Z,aAAe/X,OAAOyI,EAAM/C,OAAOW,YAGnD,iBAED,GAAIvH,EAAM4I,QAAQe,EAAM/C,OAAQ0S,EAAKja,OAAOE,OAAOiT,UAAUa,OAAO6E,WAEnEvO,EACA,aACStK,OAAO6Y,QAAUvO,EAAM/C,OAAOW,WAGvC,gBAED,GAAIvH,EAAM4I,QAAQe,EAAM/C,OAAQ0S,EAAKja,OAAOE,OAAOiT,UAAUa,OAAOsG,SAEnEhQ,EACA,aACStK,OAAOsa,MAAQtC,WAAW1N,EAAM/C,OAAOW,YAGhD,aAED,KACGyS,EAAMrQ,EAAM/C,SACT8d,QAAQ9oB,KAAK0d,EAAKja,OAAQ2a,EAAIhJ,aAAa,uBAKzDrR,KAAKN,OAAOoG,SAAS4N,OAAOC,KAAM,sBAAuB,SAAA3J,OAClDkN,EAAayC,EAAKja,OAAOoG,SAAS2N,SAAS0D,wBAC3CL,EAAU,IAAMI,EAAW5H,OAAStF,EAAMwN,MAAQN,EAAWO,QAC7DuN,cAAc5f,aAAa,aAAc0R,OAIhD9W,KAAKN,OAAOoG,SAAS4N,OAAOC,KAAM,sDAAuD,SAAA3J,OAClF2J,EAAO3J,EAAMgb,cAEblC,EAAO9Y,EAAMC,QAAUD,EAAMC,QAAUD,EAAM+Y,MAC7CkC,EAAYjb,EAAMlM,QAEL,YAAdmnB,GAAyC,UAAdA,GAAoC,KAATnC,GAAwB,KAATA,OAIpElR,EAAO+B,EAAKjL,aAAa,kBAGzBtJ,GACF,UACA,WACA,SACFkK,SAASU,EAAMlM,MAGb8T,GAAQxS,KACHuJ,gBAAgB,oBAChBjJ,OAAOkS,SACJxS,GAAQua,EAAKja,OAAO+R,YACvBrM,aAAa,iBAAkB,MAC/B1F,OAAOqT,cAMhB/S,KAAKN,OAAOoG,SAAS4N,OAAOC,KAC5B4Q,EACA,SAAAva,OACU2J,EAAO3J,EAAMgb,cAGfE,EAASvR,EAAKtC,aAAa,cAE3BhR,EAAMC,GAAGC,MAAM2kB,OACNvR,EAAK/L,SAGbe,gBAAgB,gBAEhBjJ,OAAO8R,YAAc0T,EAASvR,EAAKhI,IAAMgO,EAAKja,OAAOqU,UAE9D,QAKA/T,KAAKN,OAAOE,OAAOulB,eAAiB9kB,EAAMC,GAAG8F,QAAQpG,KAAKN,OAAOoG,SAAS+N,QAAQE,aAC/E/T,KAAKN,OAAOoG,SAAS+N,QAAQrC,YAAa,QAAS,WAElB,IAA5BmI,EAAKja,OAAO8R,gBAIX9R,OAAOE,OAAOiY,YAAc8B,EAAKja,OAAOE,OAAOiY,aAE3CsJ,WAAWllB,KAAK0d,EAAKja,aAMlCM,KAAKN,OAAOoG,SAAS4N,OAAOE,OAC5B2Q,EACA,SAAAva,KACStK,OAAOkU,OAAS5J,EAAM/C,OAAOW,OAEtC,UAIAqI,EAAQ8G,YACL1W,EAAMuJ,YAAY3N,KAAK+D,KAAKN,OAAQ,uBAAwB,QAAS,SAAAsK,KAC3D6L,gBAAgB5Z,KAAK0d,EAAKja,OAAQsK,EAAM/C,YAKtDjH,KAAKN,OAAOoG,SAAS2N,SAAU,kCAAmC,SAAAzJ,UAASoI,EAAS+F,kBAAkBlc,KAAK0d,EAAKja,OAAQsK,OAGxHhK,KAAKN,OAAOoG,SAASsM,SAAU,wBAAyB,SAAApI,KAClDtK,OAAOoG,SAASsM,SAASoQ,OAAS7I,EAAKja,OAAO6X,OAAwB,eAAfvN,EAAMlM,SAInEkC,KAAKN,OAAOoG,SAASsM,SAAU,oDAAqD,SAAApI,KAC9EtK,OAAOoG,SAASsM,SAASuD,SAC1B,YACA,cACFrM,SAASU,EAAMlM,UAIlBkC,KAAKN,OAAOoG,SAASsM,SAAU,mBAAoB,SAAApI,SACb2P,EAAKja,OAAlCE,EADmDwlB,EACnDxlB,OAAQkG,EAD2Csf,EAC3Ctf,SAAUuc,EADiC+C,EACjC/C,YAGpBzM,YAAY9P,EAASsM,SAAUxS,EAAOqU,WAAWoR,aAA6B,YAAfrb,EAAMlM,QAGxEqkB,eAAelmB,KAAK0d,EAAKja,OAAuB,YAAfsK,EAAMlM,MAGvB,YAAfkM,EAAMlM,KAAoB,YAEf,aACD8X,YAAY9P,EAASsM,SAAUxS,EAAOqU,WAAWoR,cAAc,IACtE,OAGGzB,EAAQjK,EAAKpC,MAAQ,IAAO,iBAGrB8K,EAAOjQ,YAEbA,SAAWkQ,WAAW,kBAAMtS,EAAGmS,eAAelmB,KAAK0d,EAAKja,QAAQ,IAAQkkB,QAMnF5jB,KAAKN,OAAOoG,SAAS4N,OAAOE,OAC5B,QACA,SAAA5J,OAGUgC,EAAWhC,EAAMsb,kCAEnBC,EAAY,GAGZvb,EAAMwb,OAAS,GAAKxb,EAAMyb,OAAS,KAC/BzZ,KACKtM,OAAO6jB,eANP,QAOQ,MAER7jB,OAAO4jB,eATP,OAUO,KAKhBtZ,EAAMwb,OAAS,GAAKxb,EAAMyb,OAAS,KAC/BzZ,KACKtM,OAAO4jB,eAjBP,OAkBO,MAEP5jB,OAAO6jB,eApBP,QAqBQ,KAKF,IAAdgC,GAAmB5L,EAAKja,OAAOgR,MAAMkD,OAAS,IAAsB,IAAf2R,GAAoB5L,EAAKja,OAAOgR,MAAMkD,OAAS,MAC/FvJ,kBAGd,UACA,wCAMCqZ,QAAO,SAjtBdjB,GCDN,SAASiD,EAAoB9T,GACrBA,IAAS5R,KAAK8d,MAAM6H,iBACf7H,MAAM6H,WAAY,GAEvB3lB,KAAK0Q,MAAMwH,SAAWtG,SACjBlB,MAAMwH,QAAUtG,IACfvG,cAAcpP,KAAK+D,KAAMA,KAAK0Q,MAAOkB,EAAO,OAAS,UAInE,IAAMvD,SAAQ,wBAGAuH,YAAY5V,KAAK8F,SAASC,QAAS/F,KAAKJ,OAAOqU,WAAW6J,OAAO,KAGjE8H,eAAe3pB,KAAK+D,MAGrBK,EAAMC,GAAGM,OAAOV,OAAO2lB,SAUlB9mB,MAAM9C,KAAK+D,QARZ8lB,WAAW9lB,KAAKJ,OAAOmmB,KAAK1X,MAAM2X,KAClCvgB,KAAK,aACI1G,MAAM9C,KAAKya,KAEpBhR,MAAM,SAAAvJ,KACE2V,MAAMqC,KAAK,2BAA4BhY,qBAhBlD,SAyBKiF,OACLoO,EAAQnP,EAAMC,GAAGK,OAAOS,GAASA,EAAM4G,MAAM,KAAOhI,KAAKJ,OAAO4P,MAAMxH,MAAM,KAC5Eie,EAAU,IAAMzW,EAAM,GAAKA,EAAM,WAClC1J,SAASC,QAAQhD,MAAMmjB,cAAmBD,EAA/C,IAEIjmB,KAAKD,UAAUiQ,GAAI,KAEbmW,GADS,IACUF,GAAV,SAEVvV,MAAM3N,MAAMqjB,UAAjB,eAA4CD,EAA5C,aAlCE,sBAwCAzmB,EAASM,KAGT+K,QACIrL,EAAOE,OAAOqhB,KAAKrH,gBACfla,EAAO2mB,iBAET,YACE,SACH,SACA,cACM,UACJ,qBACKrmB,KAAKJ,OAAO4T,WAAWsM,WAEnCnR,EAAStO,EAAMimB,eAAevb,GAGhCuC,EAAS5N,EAAOgR,MAAMW,aAAa,OAGnChR,EAAMC,GAAGC,MAAM+M,OACN5N,EAAOgR,MAAMW,aAAa3R,EAAOE,OAAOiH,WAAWiX,MAAMtZ,SAGhEA,EAAKnE,EAAMkmB,aAAajZ,GAGxBsU,EAASvhB,EAAMjD,cAAc,UAC7BG,EAAM8C,EAAM8L,OAAOzM,EAAOE,OAAOmmB,KAAK1X,MAAMuT,OAAQpd,EAAImK,KACvDvJ,aAAa,MAAO7H,KACpB6H,aAAa,kBAAmB,MAChCA,aAAa,oBAAqB,MAClCA,aAAa,QAAS,gBAGvBW,EAAU1F,EAAMjD,cAAc,OAASkL,MAAO5I,EAAOE,OAAOqU,WAAWuS,mBACrEpoB,YAAYwjB,KACblR,MAAQrQ,EAAMomB,eAAe1gB,EAASrG,EAAOgR,SAG9ClL,MAAMnF,EAAM8L,OAAOzM,EAAOE,OAAOmmB,KAAK1X,MAAM0B,IAAKvL,GAAK,QAAQiB,KAAK,SAAA5B,OACjExD,EAAMC,GAAGC,MAAMsD,QAKbV,EAAM,IAAImP,IAAIzO,EAAS,GAAG6iB,mBAG5BC,SAAcxjB,EAAIwjB,SAAS3e,MAAM,KAAK,GAA1C,SAGGyZ,UAAUxlB,KAAKyD,EAAQyD,EAAI7F,WAK3BwgB,MAAQ,IAAI5d,OAAO2lB,MAAMe,OAAOhF,aACxBliB,EAAOE,OAAOinB,gBAClBnnB,EAAO8W,UAGX9F,MAAMwH,QAAS,IACfxH,MAAMc,YAAc,EAGvB9R,EAAOK,UAAUiQ,MACV8N,MAAMgJ,qBAIVpW,MAAMkB,KAAO,oBACI3V,KAAKyD,GAAQ,GAC1BA,EAAOoe,MAAMlM,UAGjBlB,MAAMqC,MAAQ,oBACG9W,KAAKyD,GAAQ,GAC1BA,EAAOoe,MAAM/K,WAGjBrC,MAAMqW,KAAO,aACThU,UACAvB,YAAc,OAInBA,EAAgB9R,EAAOgR,MAAvBc,mBACChE,eAAe9N,EAAOgR,MAAO,mBAAe,kBAEpCc,OAFoC,SAI3C1F,OAIQgS,EAAiCpe,EAAjCoe,MAAOpN,EAA0BhR,EAA1BgR,MAAOwH,EAAmBxY,EAAnBwY,OAAQtE,EAAWlU,EAAXkU,OACxBoT,EAAe9O,IAAW4F,EAAM6H,YAGhC7N,SAAU,IACVzM,cAAcpP,KAAKyD,EAAQgR,EAAO,mBAGhCnN,QAAQyjB,GAAgBlJ,EAAMmJ,UAAU,IAE3CxhB,KAAK,kBAAMqY,EAAMoJ,eAAepb,KAEhCrG,KAAK,kBAAMuhB,GAAgBlJ,EAAM/K,UAEjCtN,KAAK,kBAAMuhB,GAAgBlJ,EAAMmJ,UAAUrT,KAC3ClO,MAAM,qBAOfsU,EAAQta,EAAOE,OAAOoa,MAAMmN,gBACzB3Z,eAAe9N,EAAOgR,MAAO,oBAAgB,kBAErCsJ,OAFqC,SAI5C5Y,KACO0c,MACFsJ,gBAAgBhmB,GAChBqE,KAAK,aACMrE,IACFiK,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,gBAElDhL,MAAM,SAAAvJ,GAEgB,UAAfA,EAAM2e,QACGmB,aAAahgB,KAAKyD,eAOzCkU,EAAWlU,EAAOE,OAAlBgU,cACCpG,eAAe9N,EAAOgR,MAAO,cAAU,kBAE/BkD,OAF+B,SAItCxS,KACO0c,MAAMmJ,UAAU7lB,GAAOqE,KAAK,aACtBrE,IACHiK,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,yBAMrD8F,EAAU9W,EAAOE,OAAjB4W,aACChJ,eAAe9N,EAAOgR,MAAO,aAAS,kBAE9B8F,OAF8B,SAIrCpV,OACMsI,IAASrJ,EAAMC,GAAGmI,QAAQrH,IAASA,IAElC0c,MAAMmJ,UAAUvd,EAAS,EAAIhK,EAAOE,OAAOgU,QAAQnO,KAAK,aACnDiE,IACF2B,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,yBAMrDuQ,EAASvhB,EAAOE,OAAhBqhB,YACCzT,eAAe9N,EAAOgR,MAAO,YAAQ,kBAE7BuQ,OAF6B,SAIpC7f,OACMsI,EAASrJ,EAAMC,GAAGmI,QAAQrH,GAASA,EAAQ1B,EAAOE,OAAOqhB,KAAKrH,SAE7DkE,MAAMuJ,QAAQ3d,GAAQjE,KAAK,aACvBiE,WAMf4d,OAAAA,IACGxJ,MACFyJ,cACA9hB,KAAK,SAAAmC,KACWA,IAEhBlC,MAAM,SAAAvJ,KACE2V,MAAMqC,KAAKhY,YAGjBqR,eAAe9N,EAAOgR,MAAO,kBAAc,kBAEnC4W,YAKR9Z,eAAe9N,EAAOgR,MAAO,aAAS,kBAE9BhR,EAAO8R,cAAgB9R,EAAOqU,oBAKrCyT,KACJ9nB,EAAOoe,MAAM2J,gBACb/nB,EAAOoe,MAAM4J,mBACdjiB,KAAK,SAAAkiB,OACEnY,EAAQnP,EAAMunB,eAAeD,EAAW,GAAIA,EAAW,MACvD/B,eAAe3pB,KAAKqb,EAAM9H,OAI7BsO,MAAM+J,aAAanoB,EAAOE,OAAOinB,WAAWphB,KAAK,SAAAqiB,KAC7CloB,OAAOinB,UAAYiB,MAIvBhK,MAAMiK,gBAAgBtiB,KAAK,SAAA0M,KACvBvS,OAAOuS,MAAQA,IACnBmP,SAASrlB,KAAKqb,OAIdwG,MAAMkK,iBAAiBviB,KAAK,SAAAmC,KACjBA,IACRyD,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,kBAI5CoN,MAAMmK,cAAcxiB,KAAK,SAAAmC,KACrB8I,MAAMqD,SAAWnM,IAClByD,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,sBAI5CoN,MAAMoK,gBAAgBziB,KAAK,SAAA+T,KACvB9I,MAAMiM,WAAanD,IACjBwH,MAAM/kB,KAAKyD,OAGjBoe,MAAMxT,GAAG,YAAa,SAAA5C,WAAG2W,KACtB8J,QADsC3qB,IAAA4qB,KAAAA,GAClBpZ,IAAI,SAAAuP,UAAOle,EAAMgoB,UAAU9J,EAAIzX,UAChD2W,WAAWxhB,KAAKyD,EAAQyoB,OAG9BrK,MAAMxT,GAAG,SAAU,cAEfwT,MAAMwK,YAAY7iB,KAAK,SAAAyS,KACNjc,KAAKyD,GAASwY,GAC7BA,KACK7M,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,aAInDrQ,EAAMC,GAAG8F,QAAQ1G,EAAOoe,MAAM1X,UAAY1G,EAAOK,UAAUiQ,KAC7CtQ,EAAOoe,MAAM1X,QAIrBhB,aAAa,YAAa,OAIjC0Y,MAAMxT,GAAG,OAAQ,aACArO,KAAKyD,GAAQ,KAC3B2L,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,eAG5CoN,MAAMxT,GAAG,QAAS,aACDrO,KAAKyD,GAAQ,OAG9Boe,MAAMxT,GAAG,aAAc,SAAAxF,KACnB4L,MAAMoH,SAAU,IACThT,EAAKyjB,UACbld,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,kBAG5CoN,MAAMxT,GAAG,WAAY,SAAAxF,KACjB4L,MAAMmG,SAAW/R,EAAKgS,UACvBzL,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,YAGZ,IAA/B7E,SAAS/G,EAAKgS,QAAS,OACjBzL,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,oBAK5CoN,MAAMmK,cAAcxiB,KAAK,SAAAmC,GACxBA,IAAUlI,EAAOgR,MAAMqD,aAChBrD,MAAMqD,SAAWnM,IAClByD,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,yBAKpDoN,MAAMxT,GAAG,SAAU,aACfoG,MAAMoH,SAAU,IACjBzM,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,cAG5CoN,MAAMxT,GAAG,QAAS,aACdoG,MAAMwH,QAAS,IAChB7M,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,aAG5CoN,MAAMxT,GAAG,QAAS,SAAAa,KACduF,MAAMvU,MAAQgP,IACfE,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,sBAIxC,kBAAMV,EAAGwY,MAAMvsB,KAAKyD,IAAS,KCnXhD,SAAS+oB,EAAernB,UACZA,OACC,gBACM,UAEN,WACM,aAEN,gBACM,UAEN,WACM,aAEN,gBACM,UAEN,WACM,aAEN,eACM,SAEN,UACM,YAEN,eACM,SAEN,UACM,YAEN,gBACM,SAEN,UACM,aAEN,eACM,SAEN,UACM,sBAGA,WAanB,SAASskB,EAAoB9T,GACrBA,IAAS5R,KAAK8d,MAAM6H,iBACf7H,MAAM6H,WAAY,GAEvB3lB,KAAK0Q,MAAMwH,SAAWtG,SACjBlB,MAAMwH,QAAUtG,IACfvG,cAAcpP,KAAK+D,KAAMA,KAAK0Q,MAAOkB,EAAO,OAAS,UAInE,IAAMxD,SAAU,wBAGFwH,YAAY5V,KAAK8F,SAASC,QAAS/F,KAAKJ,OAAOqU,WAAW6J,OAAO,KAG/D8H,eAAe3pB,KAAK+D,MAGxBK,EAAMC,GAAGM,OAAOV,OAAOwoB,KAAOroB,EAAMC,GAAGqK,SAASzK,OAAOwoB,GAAG9B,UAClD7nB,MAAM9C,KAAK+D,SAGb8lB,WAAW9lB,KAAKJ,OAAOmmB,KAAK3X,QAAQ4X,KAAKtgB,MAAM,SAAAvJ,KAC5C2V,MAAMqC,KAAK,6BAA8BhY,YAK3CwsB,wBAA0BzoB,OAAOyoB,mCAGjCA,wBAAwB9pB,KAAK,aACxBE,MAAM9C,KAAKya,YAIhBkS,wBAA0B,kBACtBD,wBAAwBxiB,QAAQ,SAAAqE,qBA5BvC,SAoCHqe,iBAIDxoB,EAAMC,GAAGqK,SAAS3K,KAAK8d,MAAMgL,cAAe,KACpC3W,EAAUnS,KAAK8d,MAAMgL,eAArB3W,SAEJ9R,EAAMC,GAAGC,MAAM4R,eACVvS,OAAOuS,MAAQA,SACjBmP,SAASrlB,KAAK+D,UAMnBF,EAAME,KAAKJ,OAAO+C,KAAKomB,UACzB1oB,EAAMC,GAAGK,OAAOb,KAASO,EAAMC,GAAGC,MAAMT,GAAM,KACxCqD,EAAM9C,EAAM8L,OAAOnM,KAAKJ,OAAOmmB,KAAK3X,QAAQ2B,IAAK8Y,EAAS/oB,KAG3D0F,MAAMrC,GACNsC,KAAK,SAAA5H,GACEwC,EAAMC,GAAGM,OAAO/C,OACX+B,OAAOuS,MAAQtU,EAAOmrB,MAAM,GAAGC,QAAQ9W,QACzCmP,SAASrlB,KAAKqb,MAGxB5R,MAAM,+BA/DP,eAqEF8J,EAAQxP,KAAKJ,OAAO4P,MAAMxH,MAAM,UACjClC,SAASC,QAAQhD,MAAMmjB,cAAmB,IAAM1W,EAAM,GAAKA,EAAM,GAAtE,WAtEQ,eA2EF9P,EAASM,KAGTkpB,EAAYxpB,EAAOgR,MAAMW,aAAa,SACvChR,EAAMC,GAAGC,MAAM2oB,KAAcA,EAAUza,WAAW,iBAKnDnB,EAAS5N,EAAOgR,MAAMW,aAAa,OAGnChR,EAAMC,GAAGC,MAAM+M,OACN5N,EAAOgR,MAAMW,aAAarR,KAAKJ,OAAOiH,WAAWiX,MAAMtZ,SAI9DqkB,EAAUxoB,EAAM8oB,eAAe7b,GAC/B9I,EAAKnE,EAAM+oB,WAAW1pB,EAAOmQ,UAC7BhL,EAAYxE,EAAMjD,cAAc,OAASoH,GAAAA,MACxCkM,MAAQrQ,EAAMomB,eAAe5hB,EAAWnF,EAAOgR,WAGhD2Y,EAAY,SAAAld,uCAAwC0c,EAAxC,IAAmD1c,EAAnD,iBAGZ6V,UAAUqH,EAAU,UAAW,KAChC3jB,MAAM,kBAAMrF,EAAM2hB,UAAUqH,EAAU,MAAO,OAC7C3jB,MAAM,kBAAMrF,EAAM2hB,UAAUqH,EAAU,SACtC5jB,KAAK,SAAAtB,UAAS6L,EAAGyR,UAAUxlB,KAAKyD,EAAQyE,EAAM5G,OAC9CkI,KAAK,SAAA4jB,GAEGA,EAAU/f,SAAS,cACbxD,SAASyb,OAAOxe,MAAMumB,eAAiB,aAMnDxL,MAAQ,IAAI5d,OAAOwoB,GAAG9B,OAAOpiB,kCAGlB9E,EAAOE,OAAOymB,SAAW,EAAI,WAC7B3mB,EAAOK,UAAUiQ,GAAK,EAAI,MAC/B,WACK,iBACM,iBACA,YACL,cACE,kBAII9P,OAASA,OAAOsS,SAASlV,KAAO,oBAGjCoC,EAAO6T,SAASqG,OAAS,EAAI,eAC/Bla,EAAOE,OAAO2T,SAASsG,0BAEjC,SACI7P,OAGA3J,EAAMC,GAAGM,OAAOlB,EAAOgR,MAAMvU,YAI3BgP,QACInB,EAAMlF,aAIRkF,EAAMlF,WACL,IACMykB,QACH,kPAGH,IACMA,QACH,kIAGH,MACMA,QACH,gJAGH,SACA,MACMA,QAAU,uGAIVA,QAAU,6BAIlB7Y,MAAMvU,MAAQgP,IAEfE,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,mCAzC/C,aA4CMrF,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,iBAAiB,WACnDhR,EAAOgR,MAAM6H,gCA7C1B,SAgDiBvO,OAEXwf,EAAWxf,EAAM/C,SAGhByJ,MAAM+Y,aAAeD,EAASE,oBAE/Bre,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,uBAvD/C,SAyDI1G,OAEEwf,EAAWxf,EAAM/C,SAGf0iB,SAAS1tB,KAAKyD,EAAQmpB,KAGvBnY,MAAMkB,KAAO,aACI3V,KAAKyD,GAAQ,KACxBkqB,eAGNlZ,MAAMqC,MAAQ,aACG9W,KAAKyD,GAAQ,KACxBmqB,gBAGNnZ,MAAMqW,KAAO,aACP+C,eAGNpZ,MAAMqD,SAAWyV,EAASvB,gBAC1BvX,MAAMwH,QAAS,IAGfxH,MAAMc,YAAc,SACpBhE,eAAe9N,EAAOgR,MAAO,mBAAe,kBAEpCnP,OAAOioB,EAASxB,uBAFoB,SAI3Clc,GAEIpM,EAAOwY,UACA4F,MAAM3K,SAIVzC,MAAMoH,SAAU,IACjBzM,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,aAGtCwU,OAAOpZ,aAKjB0B,eAAe9N,EAAOgR,MAAO,oBAAgB,kBAErC8Y,EAASE,uBAF4B,SAI5CtoB,KACSgmB,gBAAgBhmB,aAK1BoM,eAAe9N,EAAOgR,MAAO,eAAW,kBAEhC+X,EAAee,EAASO,2BAFQ,SAIvC3oB,OACMmX,EAAUnX,IAGP4oB,mBAAmBvB,EAAelQ,MAGrClN,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,oBAAoB,sBAOrEkD,EAAWlU,EAAOE,OAAlBgU,cACCpG,eAAe9N,EAAOgR,MAAO,cAAU,kBAE/BkD,OAF+B,SAItCxS,KACSA,IACA6lB,UAAmB,IAATrT,KACbvI,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,uBAKjD8F,EAAU9W,EAAOE,OAAjB4W,aACChJ,eAAe9N,EAAOgR,MAAO,aAAS,kBAE9B8F,OAF8B,SAIrCpV,OACMsI,EAASrJ,EAAMC,GAAGmI,QAAQrH,GAASA,EAAQoV,IACzC9M,IACCA,EAAS,OAAS,cACrB2B,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,0BAKhDlD,eAAe9N,EAAOgR,MAAO,kBAAc,kBAEnC8Y,EAASjC,wBAKjB/Z,eAAe9N,EAAOgR,MAAO,aAAS,kBAE9BhR,EAAO8R,cAAgB9R,EAAOqU,cAKtChJ,QAAQiP,MAAQwP,EAASS,4BAG5BvqB,EAAOK,UAAUiQ,MACVU,MAAMtL,aAAa,YAAa,KAGrCiG,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,gBACzCrF,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,gCAGjChR,EAAO2iB,OAAO6H,aAGrB7H,OAAO6H,UAAYC,YAAY,aAE3BzZ,MAAMmG,SAAW2S,EAASY,0BAGC,OAA9B1qB,EAAOgR,MAAM2Z,cAAyB3qB,EAAOgR,MAAM2Z,aAAe3qB,EAAOgR,MAAMmG,aACzExL,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,cAI5CA,MAAM2Z,aAAe3qB,EAAOgR,MAAMmG,SAGX,IAA1BnX,EAAOgR,MAAMmG,yBACCnX,EAAO2iB,OAAO6H,aAGtB7e,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,oBAEpD,gBAGQ,kBAAMV,EAAGwY,MAAMvsB,KAAKyD,IAAS,mBAjNxC,SAmNUsK,OA5WLsgB,EA8WCd,EAAWxf,EAAM/C,4BAGTvH,EAAO2iB,OAAO5Q,SAEb/R,EAAOgR,MAAMoH,UACxB,EACA,GACFxO,SAASU,EAAMlF,UAIN4L,MAAMoH,SAAU,IACjBzM,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,WAU3C1G,EAAMlF,WACJ,IAEIuG,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,gBAGxCA,MAAMmG,SAAW2S,EAASY,2BAC3B/e,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,uBAI9C,IACmBzU,KAAKyD,GAAQ,GAG7BA,EAAOgR,MAAMuQ,QAEJ6I,cACAF,eAEHve,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,oBAKlD,EAEGhR,EAAOgR,MAAMwH,SAAWxY,EAAOoe,MAAM6H,YAC9BjV,MAAMqC,WAEO9W,KAAKyD,GAAQ,KAE3B2L,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,aAGxC2R,OAAO5Q,QAAU0Y,YAAY,aAC1B9e,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,eAChD,IAKChR,EAAOgR,MAAMqD,WAAayV,EAASvB,kBAC5BvX,MAAMqD,SAAWyV,EAASvB,gBAC3B5c,cAAcpP,KAAKyD,EAAQA,EAAOgR,MAAO,qBAI1CqL,eAAe9f,KAAKyD,GArbpC4qB,EAqb4Dd,EAASe,4BApbtFlqB,EAAMC,GAAGC,MAAM+pB,GACRA,EAGJjqB,EAAMiR,OAAOgZ,EAAOtb,IAAI,SAAAwb,UAAS/B,EAAe+B,oBAqb9B,EAEI9qB,EAAO8W,SACDsH,MAAM2M,WAEGxuB,KAAKyD,GAAQ,KAQnC2L,cAAcpP,KAAKyD,EAAQA,EAAOoG,SAASjB,UAAW,eAAe,QACjEmF,EAAMlF,cCzf9B4L,SAAQ,cAID1Q,KAAK0Q,WAMJkF,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWnW,KAAKZ,QAAQ,MAAO8C,KAAKlC,OAAO,KAG5F8X,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWpE,SAAS3S,QAAQ,MAAO8C,KAAK6P,WAAW,GAItG7P,KAAK2hB,WACC/L,YAAY5V,KAAK8F,SAASjB,UAAW7E,KAAKJ,OAAOqU,WAAWnW,KAAKZ,QAAQ,MAAO,UAAU,GAIhG8C,KAAK6Q,eAEA/K,SAASC,QAAU1F,EAAMjD,cAAc,aACjC4C,KAAKJ,OAAOqU,WAAW5D,UAI5Bqa,KAAK1qB,KAAK0Q,MAAO1Q,KAAK8F,SAASC,cAGhCD,SAASyb,OAASlhB,EAAMjD,cAAc,aAChC4C,KAAKJ,OAAOqU,WAAWsN,cAG7Bzb,SAASC,QAAQ3H,YAAY4B,KAAK8F,SAASyb,SAGhDvhB,KAAK2hB,eACG3hB,KAAK6P,cACJ,YACOmR,MAAM/kB,KAAK+D,gBAGlB,UACKghB,MAAM/kB,KAAK+D,WAMlBA,KAAK2Q,WACN7P,OAAO7E,KAAK+D,gBAhDb8R,MAAMqC,KAAK,6BCHtBwW,EAAAA,sBAMUjrB,6BACHA,OAASA,OACTkrB,YAAclrB,EAAOE,OAAOokB,IAAI4G,iBAChCnZ,SAAU,OACVwS,aAAc,OACdne,oBACU,sBACO,WAEjB+kB,QAAU,UACVC,OAAS,UACTC,UAAY,UACZjgB,eACAkgB,YAAc,UACdC,eAAiB,UAGjB/G,eAAiB,IAAI5gB,QAAQ,SAACC,EAASC,KAEnC8G,GAAG,SAAU/G,KAGb+G,GAAG,QAAS9G,UAGhBmO,2DAWD3R,KAAKL,UAEAU,EAAMC,GAAGM,OAAOV,OAAO6oB,SAAY1oB,EAAMC,GAAGM,OAAOV,OAAO6oB,OAAOmC,UAW7DnsB,UATA+mB,WAAW9lB,KAAKN,OAAOE,OAAOmmB,KAAKoF,UAAUnF,KAC7CvgB,KAAK,aACG1G,UAER2G,MAAM,aAEE0lB,QAAQ,QAAS,IAAItnB,MAAM,qFAc3CunB,iBAAiB,KAAO,gBAGxBnH,eAAeze,KAAK,aAChB6lB,iBAAiB,+BAIrBxK,iBAGAyK,mDA8BAzlB,SAASjB,UAAYxE,EAAMjD,cAAc,aACnC4C,KAAKN,OAAOE,OAAOqU,WAAW+P,WAEpCtkB,OAAOoG,SAASjB,UAAUzG,YAAY4B,KAAK8F,SAASjB,kBAGlDqmB,IAAI5X,SAASkY,aAAazC,OAAOmC,IAAIO,eAAeC,UAAUC,gBAG9DT,IAAI5X,SAASsY,UAAU5rB,KAAKN,OAAOE,OAAOokB,IAAInK,eAIhD/T,SAAS+lB,iBAAmB,IAAI9C,OAAOmC,IAAIY,mBAAmB9rB,KAAK8F,SAASjB,gBAG5EknB,6DAOGlnB,EAAc7E,KAAKN,OAAOoG,SAA1BjB,mBAICimB,OAAS,IAAI/B,OAAOmC,IAAIc,UAAUhsB,KAAK8F,SAAS+lB,uBAGhDf,OAAOnnB,iBAAiBolB,OAAOmC,IAAIe,sBAAsBC,KAAKC,mBAAoB,SAAAniB,UAAS2P,EAAKyS,mBAAmBpiB,KAAQ,QAC3H8gB,OAAOnnB,iBAAiBolB,OAAOmC,IAAImB,aAAaH,KAAKI,SAAU,SAAAnwB,UAASwd,EAAK4S,UAAUpwB,KAAQ,OAG9FsH,EAAU,IAAIslB,OAAOmC,IAAIsB,aACvBC,SAAWzsB,KAAK0sB,SAIhBC,kBAAoB9nB,EAAU+nB,cAC9BC,mBAAqBhoB,EAAU+K,eAC/Bkd,qBAAuBjoB,EAAU+nB,cACjCG,sBAAwBloB,EAAU+K,eAGlCod,wBAAyB,IAGzBC,oBAAoBjtB,KAAKN,OAAO8W,YAEnCsU,OAAOiB,WAAWtoB,GACzB,MAAOhH,QACA8vB,UAAU9vB,4DAQM4G,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,IAAAA,UAAA,yBAEPrD,KAAKirB,0BACdnlB,SAASjB,UAAU8D,gBAAgB,wBAUvCsiB,eAAiBd,YANP,eACLre,EAAOzL,EAAM6L,WAAWvG,KAAKgG,IAAIuO,EAAK2Q,QAAQqC,mBAAoB,IAClEhY,EAAWlD,EAAS,gBAAiBkI,EAAKxa,OAAOE,QAAjD,MAA8DkM,IAC/DhG,SAASjB,UAAUO,aAAa,kBAAmB8P,IAGlB,gDAO3BlL,cAETsJ,EAAW,IAAIyV,OAAOmC,IAAIiC,uBAGvBC,6CAA8C,IAC9CC,kBAAmB,OAIvBxC,QAAU7gB,EAAMsjB,cAActtB,KAAKN,OAAQ4T,QAG3CyX,UAAY/qB,KAAK6qB,QAAQ0C,eAGzBltB,EAAMC,GAAGC,MAAMP,KAAK+qB,iBAChBA,UAAU5kB,QAAQ,SAAAqnB,MACF,IAAbA,IAAgC,IAAdA,GAAmBA,EAAW3R,EAAKnc,OAAOqU,SAAU,KAChE0Z,EAAc5R,EAAKnc,OAAOoG,SAAS2N,YAErCpT,EAAMC,GAAG8F,QAAQqnB,GAAc,KACzBC,EAAgB,IAAM7R,EAAKnc,OAAOqU,SAAWyZ,EAC7CjP,EAAMle,EAAMjD,cAAc,cACrBye,EAAKnc,OAAOE,OAAOqU,WAAWoK,SAGrCtb,MAAM0U,KAAUiW,EAAcliB,WAAlC,MACYpN,YAAYmgB,YAWnCsM,QAAQ5D,UAAUjnB,KAAKN,OAAOkU,aAI9BiX,QAAQlnB,iBAAiBolB,OAAOmC,IAAImB,aAAaH,KAAKI,SAAU,SAAAnwB,UAAS0f,EAAK0Q,UAAUpwB,YAGtFwG,KAAKomB,OAAOmC,IAAIyC,QAAQzB,MAAM/lB,QAAQ,SAAArI,KACpC+sB,QAAQlnB,iBAAiBolB,OAAOmC,IAAIyC,QAAQzB,KAAKpuB,GAAO,SAAAkM,UAAS6R,EAAK+R,UAAU5jB,YAIpFohB,QAAQ,4CASPphB,cACEnF,EAAc7E,KAAKN,OAAOoG,SAA1BjB,UAIFgpB,EAAK7jB,EAAM8jB,QAGXziB,EAAgB,SAAAvN,OACZkM,EAAAA,MAAclM,EAAKZ,QAAQ,KAAM,IAAI6P,gBACrC1B,cAAcpP,KAAKwgB,EAAK/c,OAAQ+c,EAAK/c,OAAOgR,MAAO1G,WAGrDA,EAAMlM,WACLirB,OAAOmC,IAAIyC,QAAQzB,KAAK6B,YAGpB3C,QAAQ,YAGCphB,EAAMlM,WAGfkwB,eAAc,GAEdH,EAAGI,eAED3e,MAAQzK,EAAU+nB,cAClBrd,OAAS1K,EAAU+K,yBAOzBmZ,OAAOmC,IAAIyC,QAAQzB,KAAKgC,oBAKXlkB,EAAMlM,WAyBfqwB,qBAGJpF,OAAOmC,IAAIyC,QAAQzB,KAAKkC,0BAKXpkB,EAAMlM,WAEfuwB,0BAIJtF,OAAOmC,IAAIyC,QAAQzB,KAAKoC,2BAMXtkB,EAAMlM,WAEfkwB,qBAEAO,2BAIJxF,OAAOmC,IAAIyC,QAAQzB,KAAKsC,aACxBzF,OAAOmC,IAAIyC,QAAQzB,KAAKuC,cACxB1F,OAAOmC,IAAIyC,QAAQzB,KAAKwC,cACxB3F,OAAOmC,IAAIyC,QAAQzB,KAAKyC,gBACxB5F,OAAOmC,IAAIyC,QAAQzB,KAAK0C,QACX5kB,EAAMlM,yCAYtBkM,QACD6kB,cACAnvB,OAAOoS,MAAMqC,KAAK,YAAanK,kDAS5BnF,EAAc7E,KAAKN,OAAOoG,SAA1BjB,UACJiH,OAAAA,OAGCpM,OAAO4K,GAAG,QAAS,aACfwgB,OAAOgE,yBAGXpvB,OAAO4K,GAAG,UAAW,oBACfykB,EAAKrvB,OAAO8R,mBAIlB9R,OAAO4K,GAAG,SAAU,eACf0kB,EAAaD,EAAKrvB,OAAO8R,YAE3BnR,EAAMC,GAAGC,MAAMwuB,EAAKhE,cAInBA,UAAU5kB,QAAQ,SAACqnB,EAAUnnB,GAC1ByF,EAAO0hB,GAAYA,EAAWwB,MACzBnE,QAAQoE,mBACRlE,UAAUlvB,OAAOwK,EAAO,eAOlC1C,iBAAiB,SAAU,WAC1BorB,EAAKlE,WACAA,QAAQqE,OAAOrqB,EAAU+nB,YAAa/nB,EAAU+K,aAAcmZ,OAAOmC,IAAIiE,SAASC,oDASvFvqB,EAAc7E,KAAKN,OAAOoG,SAA1BjB,UAEH7E,KAAKkkB,qBACDqK,qBAIJrK,eACAze,KAAK,aAEGK,SAAS+lB,iBAAiBwD,iBAGtBC,EAAKrL,gBAED4G,QAAQ0E,KAAK1qB,EAAU+nB,YAAa/nB,EAAU+K,aAAcmZ,OAAOmC,IAAIiE,SAASC,UAIhFvE,QAAQ2E,WAGZvL,aAAc,EACrB,MAAOwL,KAGAlD,UAAUkD,MAGtB/pB,MAAM,2DAQNI,SAASjB,UAAU9B,MAAM2sB,OAAS,QAGlCje,SAAU,EAGXzR,KAAKN,OAAO8R,YAAcxR,KAAKN,OAAOqU,eACjCrU,OAAOkS,mDASX9L,SAASjB,UAAU9B,MAAM2sB,OAAS,OAGlCje,SAAU,OAGV/R,OAAOqT,yCAWR/S,KAAKikB,kBACAsK,qBAIJnD,QAAQ,cAGR+C,4DAQAjK,eACAze,KAAK,WAEEkqB,EAAK9E,WACAA,QAAQ+E,YAIZ1L,eAAiB,IAAI5gB,QAAQ,SAAAC,KACzB+G,GAAG,SAAU/G,KACb7D,OAAOoS,MAAMC,IAAI4d,EAAK9E,aAI1BkB,eAERrmB,MAAM,8CAOPsE,qCAAUjO,EAAM8F,MAAAyJ,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,MAAAA,EAAA,GAAAlI,UAAAkI,OACdskB,EAAW7vB,KAAK8K,OAAOd,GAEzB3J,EAAMC,GAAGmC,MAAMotB,MACN1pB,QAAQ,SAAA9B,GACThE,EAAMC,GAAGqK,SAAStG,MACVoJ,MAAMqiB,EAAM/zB,gCAYjCiO,EAAOQ,UACDnK,EAAMC,GAAGmC,MAAMzC,KAAK8K,OAAOd,WACvBc,OAAOd,YAGXc,OAAOd,GAAOnL,KAAK2L,GAEjBxK,8CAWM8L,EAAM7F,mBACdvG,OAAOoS,MAAMC,IAAlB,8BAAoD9L,QAE/C+kB,YAAc1I,WAAW,aACrBuM,WACAvD,iBAAiB,uBACvBxf,4CAOU7F,GACR5F,EAAMC,GAAGsB,gBAAgB5B,KAAKgrB,oBAC1BtrB,OAAOoS,MAAMC,IAAlB,8BAAoD9L,gBAEvCjG,KAAKgrB,kBACbA,YAAc,6CAzhBhBhrB,KAAKN,OAAOmR,SAAW7Q,KAAKN,OAAOE,OAAOokB,IAAIrkB,UAAYU,EAAMC,GAAGC,MAAMP,KAAK4qB,gDA+C/Ejc,kBACc,wCACF,kCACN6D,SAASsK,YACbiT,KAAKC,eACC,cACC,aACDhwB,KAAK4qB,mBAKTqF,8CAAQ5vB,EAAMimB,eAAe3X,SA9FzCgc,GCAArd,kBAAS,SAEIxP,EAAM+I,cACbxG,EAAMC,GAAGK,OAAOkG,KACVqpB,cAAcpyB,EAAMkC,KAAK0Q,WACtB7J,IAEFxG,EAAMC,GAAGmC,MAAMoE,MACXV,QAAQ,SAAAgqB,KACTD,cAAcpyB,EAAM4Y,EAAKhG,MAAOyf,aATvC,SAgBJ/uB,cACEf,EAAMC,GAAGM,OAAOQ,IAAY,YAAaA,GAAWA,EAAM+L,QAAQvR,UAMjEw0B,eAAen0B,KAAK+D,WAGrB4vB,QAAQ3zB,KACT+D,KACA,oBAES+K,QAAQwN,aAGPrR,cAAcoQ,EAAK5G,SACpBA,MAAQ,KAGTrQ,EAAMC,GAAG8F,QAAQkR,EAAKxR,SAASjB,cAC1BiB,SAASjB,UAAU8D,gBAAgB,WAIvC7K,KAAOsD,EAAMtD,OACb+R,SAAYxP,EAAMC,GAAGC,MAAMa,EAAM+L,QAAQ,GAAG0C,UAAwC3O,EAAUgQ,MAAtC9P,EAAM+L,QAAQ,GAAG0C,WAGzE9P,UAAYiL,EAAQqlB,MAAM/Y,EAAKxZ,KAAMwZ,EAAKzH,SAAUyH,EAAK1X,OAAOkQ,aAG1DwH,EAAKzH,SAAhB,IAA4ByH,EAAKxZ,UACxB,gBACI4S,MAAQrQ,EAAMjD,cAAc,mBAGhC,gBACIsT,MAAQrQ,EAAMjD,cAAc,mBAGhC,oBACA,gBACIsT,MAAQrQ,EAAMjD,cAAc,WACxBgE,EAAM+L,QAAQ,GAAG5P,QAS7BuI,SAASjB,UAAUzG,YAAYkZ,EAAK5G,OAGrCrQ,EAAMC,GAAGmI,QAAQrH,EAAMilB,cAClBzmB,OAAOymB,SAAWjlB,EAAMilB,UAI7B/O,EAAK3G,UACD2G,EAAK1X,OAAO0wB,eACP5f,MAAMtL,aAAa,cAAe,IAEvCkS,EAAK1X,OAAOymB,YACP3V,MAAMtL,aAAa,WAAY,IAEnC/E,EAAMC,GAAGC,MAAMa,EAAMmgB,YACjBA,OAASngB,EAAMmgB,QAEpBjK,EAAK1X,OAAOqhB,KAAKrH,UACZlJ,MAAMtL,aAAa,OAAQ,IAEhCkS,EAAK1X,OAAO4W,SACP9F,MAAMtL,aAAa,QAAS,IAEjCkS,EAAK1X,OAAOkQ,eACPY,MAAMtL,aAAa,cAAe,OAK5CmrB,aAAat0B,KAAKqb,GAGjBA,EAAK3G,WACE6f,eAAev0B,KAAKqb,EAAM,SAAUlW,EAAM+L,WAIhDvN,OAAOuS,MAAQ/Q,EAAM+Q,QAGpB6O,MAAM/kB,KAAKqb,GAGbA,EAAK3G,UAED,WAAYvP,KACLovB,eAAev0B,KAAKqb,EAAM,QAASlW,EAAMoY,UAI/C9I,MAAMiB,SAIX2F,EAAK3G,SAAY2G,EAAKqK,UAAYrK,EAAKvX,UAAUiQ,OAE9CwY,MAAMvsB,KAAKqb,KAIb9D,WAAW5O,WAEpB,SAnHKkN,MAAMqC,KAAK,2BCF5Bsc,EAAAA,sBACAxpB,EAAA8D,gCACAsX,eAGAtjB,OAAA,OACAqjB,SAAA,OACAsO,QAAA,OAGAnZ,MAAAvM,EAAAuM,WAGA7G,MAAAzJ,EAGA5G,EAAAC,GAAAK,OAAAX,KAAA0Q,cACAA,MAAA/T,SAAA0M,iBAAArJ,KAAA0Q,SAIAxQ,OAAAywB,QAAA3wB,KAAA0Q,iBAAAigB,QAAAtwB,EAAAC,GAAAoC,SAAA1C,KAAA0Q,QAAArQ,EAAAC,GAAAmC,MAAAzC,KAAA0Q,eAEAA,MAAA1Q,KAAA0Q,MAAA,SAIA9Q,OAAAS,EAAAS,UAEAie,EACA0R,EAAA1R,SACAhU,MACA,sBAEAtK,KAAAC,MAAAgW,EAAAhG,MAAAW,aAAA,qBACA,MAAA5U,aAHA,SAUAqJ,oBACA,gEAMA,gCAIA,WAIAyN,iBACA,mBACA,OACA,IAAAvR,cAIAwR,oBACA,QAIAzI,mCAOA+G,MAAA,IAAA+M,EAAA7e,KAAAJ,OAAAkS,YAGAA,MAAAC,IAAA,SAAA/R,KAAAJ,aACAkS,MAAAC,IAAA,UAAA/G,IAGA3K,EAAAC,GAAAsB,gBAAA5B,KAAA0Q,QAAArQ,EAAAC,GAAA8F,QAAApG,KAAA0Q,UAMA1Q,KAAA0Q,MAAAkgB,UACA9e,MAAAqC,KAAA,gCAKAnU,KAAAJ,OAAAD,WAOAqL,EAAAqlB,QAAAtgB,SAMA4K,EAAA3a,KAAA0Q,MAAAnK,WAAA,KACA8f,UAAA,OACAvgB,SAAA+qB,SAAAlW,MAIA7c,EAAAkC,KAAA0Q,MAAAogB,QAAA/jB,cAGA6U,EAAA,KACAze,EAAA,KACAwL,EAAA,YAGA7Q,OACA,WAEAkC,KAAA0Q,MAAAnH,cAAA,UAGAlJ,EAAAC,GAAA8F,QAAAwb,SAEAA,EAAAvQ,aAAA,YACAxB,SAAAxP,EAAA0wB,iBAAA5tB,QAGA2C,SAAAjB,UAAA7E,KAAA0Q,WACAA,MAAAkR,OAGA9b,SAAAjB,UAAAsD,UAAA,KAGA9H,EAAA2wB,aAAA7tB,IACA9C,EAAAC,GAAAC,MAAAoO,GAAA,KACAsiB,GACA,IACA,QAGAA,EAAA3nB,SAAAqF,EAAA0X,iBACAzmB,OAAAymB,UAAA,GAEA4K,EAAA3nB,SAAAqF,EAAAsS,aACArhB,OAAAqhB,KAAArH,QAAA,GAKA5Z,KAAA0c,eACA9c,OAAAkQ,YAAAmhB,EAAA3nB,SAAAqF,EAAAmB,kBAEAlQ,OAAAkQ,aAAA,aAKAD,SAAA7P,KAAA0Q,MAAAW,aAAArR,KAAAJ,OAAAiH,WAAAiX,MAAAjO,eAGAa,MAAA/H,gBAAA3I,KAAAJ,OAAAiH,WAAAiX,MAAAjO,aAIAxP,EAAAC,GAAAC,MAAAP,KAAA6P,YAAAvO,OAAAqB,KAAAzB,GAAAoI,SAAAtJ,KAAA6P,2BACAiC,MAAA3V,MAAA,uCAKA2B,KAAAqD,EAAAkP,gBAIA,YACA,aACAvS,KAAAA,OACA+R,SAAA3O,EAAAgQ,MAGAlR,KAAA0Q,MAAAhI,aAAA,sBACA9I,OAAA0wB,aAAA,GAEAtwB,KAAA0Q,MAAAhI,aAAA,mBACA9I,OAAAymB,UAAA,GAEArmB,KAAA0Q,MAAAhI,aAAA,sBACA9I,OAAAkQ,aAAA,GAEA9P,KAAA0Q,MAAAhI,aAAA,gBACA9I,OAAA4W,OAAA,GAEAxW,KAAA0Q,MAAAhI,aAAA,eACA9I,OAAAqhB,KAAArH,QAAA,kCAMA9H,MAAA3V,MAAA,uCAKA4D,UAAAiL,EAAAqlB,MAAArwB,KAAAlC,KAAAkC,KAAA6P,SAAA7P,KAAAJ,OAAAkQ,aAGA9P,KAAAD,UAAAgQ,UAMA+Q,UAAA,IAAA2B,EAAAziB,WAGAH,QAAA,IAAAJ,EAAAO,WAGA0Q,MAAAkgB,KAAA5wB,KAGAK,EAAAC,GAAA8F,QAAApG,KAAA8F,SAAAjB,kBACAiB,SAAAjB,UAAAxE,EAAAjD,cAAA,SACAstB,KAAA1qB,KAAA0Q,MAAA1Q,KAAA8F,SAAAjB,cAIA0rB,aAAAt0B,KAAA+D,QAGAghB,MAAA/kB,KAAA+D,MAGAA,KAAAJ,OAAAkS,SACAxH,GAAAtK,KAAA8F,SAAAjB,UAAA7E,KAAAJ,OAAAkL,OAAAoE,KAAA,KAAA,SAAAlF,KACA8H,MAAAC,IAAA,UAAA/H,EAAAlM,SAMAkC,KAAA2Q,SAAA3Q,KAAA2hB,UAAA3hB,KAAAD,UAAAiQ,OACAwY,MAAAvsB,KAAA+D,WAIA8gB,UAAAjc,iBAGAic,UAAA4C,cAGAlQ,WAAA,IAAAmM,EAAA3f,WAGAgkB,IAAA,IAAA2G,EAAA3qB,MAGAA,KAAAJ,OAAAymB,elBVAzU,akBzCAE,MAAA3V,MAAA,sCAjHA2V,MAAA3V,MAAA,sCAPA2V,MAAA3V,MAAA,8CAZA2V,MAAA3V,MAAA,4FA0NAkE,EAAAC,GAAAqK,SAAA3K,KAAA0Q,MAAAkB,MAKA5R,KAAA0Q,MAAAkB,OAJA,qCAWA5R,KAAAyR,SAAApR,EAAAC,GAAAqK,SAAA3K,KAAA0Q,MAAAqC,aAIArC,MAAAqC,2CAmCA3R,IAEAf,EAAAC,GAAAmI,QAAArH,GAAAA,GAAApB,KAAAyR,cAGAG,YAEAmB,uCAQA/S,KAAA2Q,cACAoC,aACAC,WACA3S,EAAAC,GAAAqK,SAAA3K,KAAA0Q,MAAAqW,YACArW,MAAAqW,8CAQAvV,YAAA,iCAOAU,QACAV,YAAAxR,KAAAwR,aAAAnR,EAAAC,GAAA2L,OAAAiG,GAAAA,EAAAlS,KAAAJ,OAAAsS,0CAOAA,QACAV,YAAAxR,KAAAwR,aAAAnR,EAAAC,GAAA2L,OAAAiG,GAAAA,EAAAlS,KAAAJ,OAAAsS,iDA+HAgf,OACAtd,EAAA5T,KAAA0Q,MAAA8F,MAAA,EAAAxW,KAAA4T,YACAA,OAAAA,GAAAvT,EAAAC,GAAA2L,OAAAilB,GAAAA,EAAA,0CAOAA,OACAtd,EAAA5T,KAAA0Q,MAAA8F,MAAA,EAAAxW,KAAA4T,YACAA,OAAAA,GAAAvT,EAAAC,GAAA2L,OAAAilB,GAAAA,EAAA,0CA6QA9vB,MAEApB,KAAAD,UAAAiQ,QAKA4J,EAAAvZ,EAAAC,GAAAmI,QAAArH,GAAAA,GAAApB,KAAA8F,SAAAjB,UAAAiE,UAAAC,SAAA/I,KAAAJ,OAAAqU,WAAAV,SAAAqG,aAGA9T,SAAAgN,QAAAS,SAAAoC,QAAAiE,IAGAhE,YAAA5V,KAAA8F,SAAAjB,UAAA7E,KAAAJ,OAAAqU,WAAAV,SAAAqG,OAAAA,GAGAA,IAAA5Z,KAAAuT,SAAAqG,cACArG,SAAAqG,OAAAA,IACAvO,cAAApP,KAAA+D,KAAAA,KAAA0Q,MAAA1Q,KAAAuT,SAAAqG,OAAA,kBAAA,wDA4EA5O,EAAAqI,cACA3C,MAAAygB,wEAQAznB,MAEA1J,KAAAD,UAAAiQ,KAAAhQ,KAAA8Q,QAAA,KAEAsgB,EAAA/wB,EAAAqV,SAAA1V,KAAA8F,SAAAjB,UAAA7E,KAAAJ,OAAAqU,WAAAsO,cAGA3Z,OAAA,IAAAc,OAAAlM,GAAAkM,EAGA2nB,EAAAhxB,EAAAuV,YAAA5V,KAAA8F,SAAAjB,UAAA7E,KAAAJ,OAAAqU,WAAAsO,aAAA3Z,MAGAyoB,GAAArxB,KAAAJ,OAAAwS,SAAA9I,SAAA,cAAAjJ,EAAAC,GAAAC,MAAAP,KAAAJ,OAAA0T,aACAsP,WAAA3mB,KAAA+D,MAAA,GAGAqxB,IAAAD,EAAA,KACAE,EAAAD,EAAA,iBAAA,kBACAhmB,cAAApP,KAAA+D,KAAAA,KAAA0Q,MAAA4gB,UAEAD,SAEA,6BAQArnB,EAAAQ,KACAF,GAAAtK,KAAA8F,SAAAjB,UAAAmF,EAAAQ,+BAQAR,EAAAQ,KACAD,IAAAvK,KAAA8F,SAAAjB,UAAAmF,EAAAQ,mCAUAA,cAAA+mB,EAAAluB,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,IAAAA,UAAA,MACArD,KAAAjB,WAIAK,EAAA,oBAEA4F,KAAAjC,MAAA0c,SAAA,KAGA3B,MAAA,KAGAyT,GACAjwB,OAAAqB,KAAA2U,EAAAxR,UAAAlK,WAEAsL,cAAAoQ,EAAAxR,SAAAgN,QAAAlB,QACA1K,cAAAoQ,EAAAxR,SAAAyN,YACArM,cAAAoQ,EAAAxR,SAAAsM,YACAlL,cAAAoQ,EAAAxR,SAAAC,WAGAD,SAAAgN,QAAAlB,KAAA,OACA9L,SAAAyN,SAAA,OACAzN,SAAAsM,SAAA,OACAtM,SAAAC,QAAA,MAIA1F,EAAAC,GAAAqK,SAAAH,YAKAsW,UAAA0Q,UAGA/K,eAAAnP,EAAAxR,SAAA+qB,SAAAvZ,EAAAxR,SAAAjB,aAGAwG,cAAApP,KAAAqb,EAAAA,EAAAxR,SAAA+qB,SAAA,aAAA,GAGAxwB,EAAAC,GAAAqK,SAAAH,MACAvO,KAAAqb,EAAAxR,SAAA+qB,YAIA9xB,OAAA,aAGA,aACA+G,SAAA,OACA4K,MAAA,MACA,mBAKAqW,OAGA/mB,KAAA6P,SAAA,IAAA7P,KAAAlC,UACA,kBACA,2BAEAkC,KAAAqiB,OAAAD,WAGAhO,qBAAAnY,KAAA+D,MAAA,iBAOA,8BAEAA,KAAAqiB,OAAA6H,yBACAlqB,KAAAqiB,OAAA5Q,SAGA,OAAAzR,KAAA8d,OAAAzd,EAAAC,GAAAqK,SAAA3K,KAAA8d,MAAA8R,eACA9R,MAAA8R,wBAQA,cAGA,OAAA5vB,KAAA8d,YACAA,MAAA2T,SAAAhsB,KAAArG,cAIAA,EAAA,wCAaAtB,UACAkN,EAAAuG,KAAAtV,KAAA+D,KAAAlC,0CAtxBA4D,QAAA1B,KAAA6P,WAAA3O,EAAAgQ,8CAGAxP,QAAA1B,KAAA0c,WAAA1c,KAAAia,kDAGAvY,QAAA1B,KAAA6P,WAAA3O,EAAAkN,gDAGA1M,QAAA1B,KAAA6P,WAAA3O,EAAAmN,8CAGA3M,QAAA1B,KAAAlC,OAAAqD,EAAAkP,8CAGA3O,QAAA1B,KAAAlC,OAAAqD,EAAAoP,8CA8BA7O,QAAA1B,KAAAjB,QAAAiB,KAAAkY,SAAAlY,KAAAokB,6CAOA1iB,QAAA1B,KAAA0Q,MAAAwH,+CAOAxW,QAAA1B,KAAAkY,QAAA,IAAAlY,KAAAwR,kDAOA9P,QAAA1B,KAAA0Q,MAAA0T,yCAyDAhjB,MAEApB,KAAA+T,cAKA2d,EAAArxB,EAAAC,GAAA2L,OAAA7K,IAAAA,EAAA,OAGAsP,MAAAc,YAAAkgB,EAAA/rB,KAAAgsB,IAAAvwB,EAAApB,KAAA+T,UAAA,OAGAjC,MAAAC,IAAA,cAAA/R,KAAAwR,YAAA,oCAOAjQ,OAAAvB,KAAA0Q,MAAAc,kDAOAqF,EAAA7W,KAAA0Q,MAAAmG,gBAGAxW,EAAAC,GAAA2L,OAAA4K,GACAA,EAMAA,GAAAA,EAAAjb,QAAAoE,KAAA+T,SAAA,EACA8C,EAAA+a,IAAA,GAAA5xB,KAAA+T,SAGA,yChBndArS,QAAA1B,KAAA0Q,MAAAoH,8CgBkeA+Z,EAAAna,WAAA1X,KAAAJ,OAAAmU,UfteAA,GAAA/T,KAAA0Q,WAAAqD,UAAA,Se4eA8d,GAAA9d,+BAOAnM,OACAgM,EAAAhM,EAIAvH,EAAAC,GAAAK,OAAAiT,OACArS,OAAAqS,IAIAvT,EAAAC,GAAA2L,OAAA2H,OACA5T,KAAAH,QAAAgB,IAAA,WAIAR,EAAAC,GAAA2L,OAAA2H,OACA5T,KAAAJ,OAAAgU,QAIAA,EAlBA,MAAA,GAsBAA,EArBA,MAAA,QA0BAhU,OAAAgU,OAAAA,OAGAlD,MAAAkD,OAAAA,GAGAvT,EAAAC,GAAAC,MAAAqH,IAAA5H,KAAAwW,OAAA5C,EAAA,SACA4C,OAAA,0BAQAjV,OAAAvB,KAAA0Q,MAAAkD,oCAyBAT,OACAzJ,EAAAyJ,EAGA9S,EAAAC,GAAAmI,QAAAiB,OACA1J,KAAAH,QAAAgB,IAAA,UAIAR,EAAAC,GAAAmI,QAAAiB,OACA1J,KAAAJ,OAAA4W,YAIA5W,OAAA4W,MAAA9M,OAGAgH,MAAA8F,MAAA9M,yBAOAhI,QAAA1B,KAAA0Q,MAAA8F,+CAQAxW,KAAA2Q,YAIA3Q,KAAA8Q,UAMApP,QAAA1B,KAAA0Q,MAAAohB,cACApwB,QAAA1B,KAAA0Q,MAAAqhB,8BACArwB,QAAA1B,KAAA0Q,MAAAshB,aAAAhyB,KAAA0Q,MAAAshB,YAAAp2B,sCAQAwF,OACA4Y,EAAA,KAEA3Z,EAAAC,GAAA2L,OAAA7K,OACAA,GAGAf,EAAAC,GAAA2L,OAAA+N,OACAha,KAAAH,QAAAgB,IAAA,UAGAR,EAAAC,GAAA2L,OAAA+N,OACAha,KAAAJ,OAAAoa,MAAAmN,UAIAnN,EAAA,OACA,IAEAA,EAAA,MACA,GAGAha,KAAAJ,OAAAoa,MAAAjP,QAAAzB,SAAA0Q,SAMApa,OAAAoa,MAAAmN,SAAAnN,OAGAtJ,MAAA+Y,aAAAzP,QARAlI,MAAAqC,KAAA,sBAAA6F,EAAA,4BAeAzY,OAAAvB,KAAA0Q,MAAA+Y,4CAQAroB,OACAmX,EAAA,QAEAlY,EAAAC,GAAAC,MAAAa,OACAG,OAAAH,IAGAf,EAAAC,GAAA2L,OAAAsM,OACAvY,KAAAH,QAAAgB,IAAA,YAGAR,EAAAC,GAAA2L,OAAAsM,OACAvY,KAAAJ,OAAA2Y,QAAA4O,UAGA9mB,EAAAC,GAAA2L,OAAAsM,OACAvY,KAAAJ,OAAA2Y,QAAAgB,SAGAvZ,KAAA+K,QAAAwN,QAAA3c,YAIAoE,KAAA+K,QAAAwN,QAAAjP,SAAAiP,GAAA,KACA0Z,EAAA5xB,EAAA4xB,QAAAjyB,KAAA+K,QAAAwN,QAAAA,QACAzG,MAAAqC,KAAA,+BAAAoE,EAAA,WAAA0Z,EAAA,cACAA,OAIAryB,OAAA2Y,QAAA4O,SAAA5O,OAGA7H,MAAA6H,QAAAA,0BAOAvY,KAAA0Q,MAAA6H,mCAQAnX,OACAsI,EAAArJ,EAAAC,GAAAmI,QAAArH,GAAAA,EAAApB,KAAAJ,OAAAqhB,KAAArH,YACAha,OAAAqhB,KAAArH,OAAAlQ,OACAgH,MAAAuQ,KAAAvX,yBAkDAhI,QAAA1B,KAAA0Q,MAAAuQ,mCAOA7f,KACA8wB,OAAAj2B,KAAA+D,KAAAoB,0BAOApB,KAAA0Q,MAAA4W,wCAOAlmB,GACApB,KAAA6Q,UAKA4Q,UAAAxlB,KAAA+D,KAAAoB,QAJA0Q,MAAAqC,KAAA,2DAWAnU,KAAA6Q,QAIA7Q,KAAA0Q,MAAAW,aAAA,UAHA,oCAUAjQ,OACAsI,EAAArJ,EAAAC,GAAAmI,QAAArH,GAAAA,EAAApB,KAAAJ,OAAAymB,cACAzmB,OAAAymB,SAAA3c,yBAOAhI,QAAA1B,KAAAJ,OAAAymB,6CAiCAjlB,KACAmc,IAAAthB,KAAA+D,KAAAoB,yBAOApB,KAAAuT,SAAAqG,EADAyD,EACAzD,OAAAN,EADA+D,EACA/D,oBACAM,EAAAN,GAAA,iCAQAlY,KACA+b,YAAAlhB,KAAA+D,KAAAoB,0BAOAmS,EAAAsK,gBAAA5hB,KAAA+D,WAAA6Z,mCAQAzY,OACA+wB,EACA,qBADAA,EAEA,YAIAnnB,EAAAoI,SAKA1J,EAAArJ,EAAAC,GAAAmI,QAAArH,GAAAA,EAAApB,KAAAoT,MAAA+e,OAGAzhB,MAAAF,0BAAA9G,EAAAyoB,EAAAA,2BAOAnnB,EAAAoI,IAIApT,KAAA0Q,MAAA0hB,uBAHA,yCAkMAt0B,EAAA+R,EAAAwiB,UACArnB,EAAAqlB,MAAAvyB,EAAA+R,EAAAwiB,sCAQAlvB,EAAAqB,UACAnE,EAAA6b,WAAA/Y,EAAAqB,iCAQA0D,OAAA6C,EAAA1H,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,GAAAA,UAAA,MACA2C,EAAA,YAEA3F,EAAAC,GAAAK,OAAAuH,KACArG,MAAAoE,KAAAtJ,SAAA0M,iBAAAnB,IACA7H,EAAAC,GAAAoC,SAAAwF,KACArG,MAAAoE,KAAAiC,GACA7H,EAAAC,GAAAmC,MAAAyF,OACAA,EAAA0F,OAAAvN,EAAAC,GAAA8F,UAGA/F,EAAAC,GAAAC,MAAAyF,GACA,KAGAA,EAAAgJ,IAAA,SAAAsjB,UAAA,IAAA7B,EAAA6B,EAAAvnB,WAxlCA0lB,UA4lCAA,EAAA1R,SAAA1e,EAAAkyB,UAAAxT","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport loadjs from 'loadjs';\nimport Storage from './storage';\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return utils.getConstructor(input) === Object;\n        },\n        number(input) {\n            return utils.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return utils.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return utils.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return utils.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !utils.is.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return utils.is.instanceof(input, WeakMap);\n        },\n        nodeList(input) {\n            return utils.is.instanceof(input, NodeList);\n        },\n        element(input) {\n            return utils.is.instanceof(input, Element);\n        },\n        textNode(input) {\n            return utils.getConstructor(input) === Text;\n        },\n        event(input) {\n            return utils.is.instanceof(input, Event);\n        },\n        cue(input) {\n            return utils.is.instanceof(input, window.TextTrackCue) || utils.is.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return utils.is.instanceof(input, TextTrack) || (!utils.is.nullOrUndefined(input) && utils.is.string(input.kind));\n        },\n        url(input) {\n            return !utils.is.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                utils.is.nullOrUndefined(input) ||\n                ((utils.is.string(input) || utils.is.array(input) || utils.is.nodeList(input)) && !input.length) ||\n                (utils.is.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n    },\n\n    getConstructor(input) {\n        return !utils.is.nullOrUndefined(input) ? input.constructor : null;\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch (e) {\n                            resolve(request.responseText);\n                        }\n                    } else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load image avoiding xhr/fetch CORS issues\n    // Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded.\n    // By default it checks if it is at least 1px, but you can add a second argument to change this.\n    loadImage(src, minWidth = 1) {\n        return new Promise((resolve, reject) => {\n            const image = new Image();\n            const handler = () => {\n                delete image.onload;\n                delete image.onerror;\n                (image.naturalWidth >= minWidth ? resolve : reject)(image);\n            };\n            Object.assign(image, {onload: handler, onerror: handler, src});\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            loadjs(url, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        const exists = () => document.getElementById(id) !== null;\n\n        const update = (container, data) => {\n            container.innerHTML = data;\n\n            // Check again incase of race condition\n            if (hasId && exists()) {\n                return;\n            }\n\n            // Inject the SVG to the body\n            document.body.insertAdjacentElement('afterbegin', container);\n        };\n\n        // Only load once if ID set\n        if (!hasId || !exists()) {\n            const useStorage = Storage.supported;\n\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (useStorage) {\n                const cached = window.localStorage.getItem(`${prefix}-${id}`);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    update(container, data.content);\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (useStorage) {\n                        window.localStorage.setItem(\n                            `${prefix}-${id}`,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    update(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.innerText = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove element(s)\n    removeElement(element) {\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.entries(attributes).forEach(([\n            key,\n            value,\n        ]) => {\n            element.setAttribute(key, value);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle hidden\n    toggleHidden(element, hidden) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        let hide = hidden;\n\n        if (!utils.is.boolean(hide)) {\n            hide = !element.hasAttribute('hidden');\n        }\n\n        if (hide) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\n    toggleClass(element, className, force) {\n        if (utils.is.element(element)) {\n            let method = 'toggle';\n            if (typeof force !== 'undefined') {\n                method = force ? 'add' : 'remove';\n            }\n\n            element.classList[method](className);\n            return element.classList.contains(className);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle = false, passive = true, capture = false) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements) || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just the capture boolean for browsers with no passive listener support\n        let options = capture;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive,\n                // Whether the listener is a capturing listener or not\n                capture,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type = '', bubbles = false, detail = {}) {\n        // Bail if no element\n        if (!utils.is.element(element) || utils.is.empty(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles,\n            detail: Object.assign({}, detail, {\n                plyr: this,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Format string\n    format(input, ...args) {\n        if (utils.is.empty(input)) {\n            return input;\n        }\n\n        return input.toString().replace(/{(\\d+)}/g, (match, i) => (utils.is.string(args[i]) ? args[i] : ''));\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return utils.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = utils.getHours(time);\n        const mins = utils.getMinutes(time);\n        const secs = utils.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Replace all occurances of a string in a string\n    replaceAll(input = '', find = '', replace = '') {\n        return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n    },\n\n    // Convert to title case\n    toTitleCase(input = '') {\n        return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n    },\n\n    // Convert string to pascalCase\n    toPascalCase(input = '') {\n        let string = input.toString();\n\n        // Convert kebab case\n        string = utils.replaceAll(string, '-', ' ');\n\n        // Convert snake case\n        string = utils.replaceAll(string, '_', ' ');\n\n        // Convert to title case\n        string = utils.toTitleCase(string);\n\n        // Convert to pascal case\n        return utils.replaceAll(string, ' ', '');\n    },\n\n    // Convert string to pascalCase\n    toCamelCase(input = '') {\n        let string = input.toString();\n\n        // Convert to pascal case\n        string = utils.toPascalCase(string);\n\n        // Convert first character to lowercase\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Remove duplicates in an array\n    dedupe(array) {\n        if (!utils.is.array(array)) {\n            return array;\n        }\n\n        return array.filter((item, index) => array.indexOf(item) === index);\n    },\n\n    // Clone nested objects\n    cloneDeep(object) {\n        return JSON.parse(JSON.stringify(object));\n    },\n\n    // Get a nested value in an object\n    getDeep(object, path) {\n        return path.split('.').reduce((obj, key) => obj && obj[key], object);\n    },\n\n    // Get the closest value in an array\n    closest(array, value) {\n        if (!utils.is.array(array) || !array.length) {\n            return null;\n        }\n\n        return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = utils.parseUrl(input));\n        }\n\n        if (utils.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Like outerHTML, but also works for DocumentFragment\n    getHTML(element) {\n        const wrapper = document.createElement('div');\n        wrapper.appendChild(element);\n        return wrapper.innerHTML;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        return this.media.querySelectorAll('source');\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        // Get sources\n        const sources = html5.getSources.call(this);\n\n        if (utils.is.empty(sources)) {\n            return null;\n        }\n\n        // Get <source> with size attribute\n        const sizes = Array.from(sources).filter(source => !utils.is.empty(source.getAttribute('size')));\n\n        // If none, bail\n        if (utils.is.empty(sizes)) {\n            return null;\n        }\n\n        // Reduce to unique list\n        return utils.dedupe(sizes.map(source => Number(source.getAttribute('size'))));\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return null;\n                }\n\n                const matches = Array.from(sources).filter(source => source.getAttribute('src') === player.source);\n\n                if (utils.is.empty(matches)) {\n                    return null;\n                }\n\n                return Number(matches[0].getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return;\n                }\n\n                // Get matches for requested size\n                const matches = Array.from(sources).filter(source => Number(source.getAttribute('size')) === input);\n\n                // No matches for requested size\n                if (utils.is.empty(matches)) {\n                    return;\n                }\n\n                // Get supported sources\n                const supported = matches.filter(source => support.mime.call(player, source.getAttribute('type')));\n\n                // No supported sources\n                if (utils.is.empty(supported)) {\n                    return;\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                    quality: input,\n                });\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = supported[0].getAttribute('src');\n\n                // Restore time\n                const onLoadedMetaData = () => {\n                    player.currentTime = currentTime;\n                    player.off('loadedmetadata', onLoadedMetaData);\n                };\n                player.on('loadedmetadata', onLoadedMetaData);\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(html5.getSources());\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport utils from './utils';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (utils.is.empty(key) || utils.is.empty(config)) {\n            return '';\n        }\n\n        let string = utils.getDeep(config.i18n, key);\n\n        if (utils.is.empty(string)) {\n            return '';\n        }\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = utils.replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: utils.getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = utils.toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        // Toggle classname when pressed property is set\n        const className = this.config.classNames.controlPressed;\n        Object.defineProperty(button, 'pressed', {\n            enumerable: true,\n            get() {\n                return utils.hasClass(button, className);\n            },\n            set(pressed = false) {\n                utils.toggleClass(button, className, pressed);\n            },\n        });\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-label': i18n.get(type, this.config),\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return input;\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.innerText = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = utils.getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = utils.createElement(\n            'div',\n            utils.extend(attributes, {\n                class: `plyr__time ${attributes.class}`,\n                'aria-label': i18n.get(type, this.config),\n            }),\n            '00:00',\n        );\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem({value, list, type, title, badge = null, checked = false}) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Format a time for display\n    formatTime(time = 0, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return time;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = utils.getHours(this.duration) > 0;\n\n        return utils.formatTime(time, forceHours, inverted);\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        target.innerText = controls.formatTime(time, inverted);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            this.elements.buttons.mute.pressed = this.muted || this.volume === 0;\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        const setProgress = (target, input) => {\n            const value = utils.is.number(input) ? input : 0;\n            const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n            // Update value and label\n            if (utils.is.element(progress)) {\n                progress.value = value;\n\n                // Update text label inside\n                const label = progress.getElementsByTagName('span')[0];\n                if (utils.is.element(label)) {\n                    label.childNodes[0].nodeValue = value;\n                }\n            }\n        };\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                case 'seeked':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        controls.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    setProgress(this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria values for https://github.com/sampotts/plyr/issues/905\n        if (utils.matches(range, this.config.selectors.inputs.seek)) {\n            range.setAttribute('aria-valuenow', this.currentTime);\n            const currentTime = controls.formatTime(this.currentTime);\n            const duration = controls.formatTime(this.duration);\n            const format = i18n.get('seekLabel', this.config);\n            range.setAttribute('aria-valuetext', format.replace('{currentTime}', currentTime).replace('{duration}', duration));\n        } else if (utils.matches(range, this.config.selectors.inputs.volume)) {\n            const percent = range.value * 100;\n            range.setAttribute('aria-valuenow', percent);\n            range.setAttribute('aria-valuetext', `${percent}%`);\n        } else {\n            range.setAttribute('aria-valuenow', range.value);\n        }\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.progress.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        controls.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate() {\n        // Bail if no UI or durationchange event triggered after playing/seek when invertTime is false\n        if (!this.supported.ui || (!this.config.invertTime && this.currentTime)) {\n            return;\n        }\n\n        // Update ARIA values\n        if (utils.is.element(this.elements.inputs.seek)) {\n            this.elements.inputs.seek.setAttribute('aria-valuemax', this.duration);\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        utils.toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    // TODO: Vimeo support\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            const label = i18n.get(`qualityBadge.${quality}`, this.config);\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                controls.createMenuItem.call(this, {\n                    value: quality,\n                    list,\n                    type,\n                    title: controls.getLabel.call(this, 'quality', quality),\n                    badge: getBadge(quality),\n                });\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (utils.is.number(value)) {\n                    const label = i18n.get(`qualityLabel.${value}`, this.config);\n\n                    if (!label.length) {\n                        return `${value}p`;\n                    }\n\n                    return label;\n                }\n\n                return utils.toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.currentTrack;\n                break;\n\n            default:\n                value = !utils.is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!utils.is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!utils.is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n        const tracks = captions.getTracks.call(this);\n\n        // Toggle the pane and tab\n        controls.toggleTab.call(this, type, tracks.length);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!tracks.length) {\n            return;\n        }\n\n        // Generate options data\n        const options = tracks.map((track, value) => ({\n            value,\n            checked: this.captions.active && this.currentTrack === value,\n            title: captions.getLabel.call(this, track),\n            badge: track.language && controls.createBadge.call(this, track.language.toUpperCase()),\n            list,\n            type: 'language',\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        options.unshift({\n            value: -1,\n            checked: !this.captions.active,\n            title: i18n.get('disabled', this.config),\n            list,\n            type: 'language',\n        });\n\n        // Generate options\n        options.forEach(controls.createMenuItem.bind(this));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (utils.is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            controls.createMenuItem.call(this, {\n                value: speed,\n                list,\n                type,\n                title: controls.getLabel.call(this, 'speed', speed),\n            });\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !utils.is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        utils.toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.hasAttribute('hidden');\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            utils.toggleHidden(form, !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        utils.toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        utils.toggleHidden(pane, false);\n\n        const tabs = utils.getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            progress.appendChild(\n                controls.createRange.call(this, 'seek', {\n                    id: `plyr-seek-${data.id}`,\n                }),\n            );\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            volume.appendChild(\n                controls.createRange.call(\n                    this,\n                    'volume',\n                    utils.extend(attributes, {\n                        id: `plyr-volume-${data.id}`,\n                    }),\n                ),\n            );\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = utils.replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (utils.is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (utils.is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        }\n\n        // Get language from storage, fallback to config\n        let language = this.storage.get('language') || this.config.captions.language;\n        if (language === 'auto') {\n            [ language ] = (navigator.language || navigator.userLanguage).split('-');\n        }\n        // Set language and show if active\n        captions.setLanguage.call(this, language, active);\n\n        // Watch changes to textTracks and update captions menu\n        if (this.isHTML5) {\n            const trackEvents = this.config.captions.update ? 'addtrack removetrack' : 'removetrack';\n            utils.on(this.media.textTracks, trackEvents, captions.update.bind(this));\n        }\n\n        // Update available languages in list next tick (the event must not be triggered before the listeners)\n        setTimeout(captions.update.bind(this), 0);\n    },\n\n    update() {\n        const tracks = captions.getTracks.call(this, true);\n        // Get the wanted language\n        const { language, meta } = this.captions;\n\n        // Handle tracks (add event listener and \"pseudo\"-default)\n        if (this.isHTML5 && this.isVideo) {\n            tracks\n                .filter(track => !meta.get(track))\n                .forEach(track => {\n                    this.debug.log('Track added', track);\n                    // Attempt to store if the original dom element was \"default\"\n                    meta.set(track, {\n                        default: track.mode === 'showing',\n                    });\n\n                    // Turn off native caption rendering to avoid double captions\n                    track.mode = 'hidden';\n\n                    // Add event listener for cue changes\n                    utils.on(track, 'cuechange', () => captions.updateCues.call(this));\n                });\n        }\n\n        const trackRemoved = !tracks.find(track => track === this.captions.currentTrackNode);\n        const firstMatch = this.language !== language && tracks.find(track => track.language === language);\n\n        // Update language if removed or first matching track added\n        if (trackRemoved || firstMatch) {\n            captions.setLanguage.call(this, language, this.config.captions.active);\n        }\n\n        // Enable or disable captions based on track length\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(tracks));\n\n        // Update available languages in list\n        if ((this.config.controls || []).includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    set(index, setLanguage = true, show = true) {\n        const tracks = captions.getTracks.call(this);\n\n        // Disable captions if setting to -1\n        if (index === -1) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        if (!utils.is.number(index)) {\n            this.debug.warn('Invalid caption argument', index);\n            return;\n        }\n\n        if (!(index in tracks)) {\n            this.debug.warn('Track not found', index);\n            return;\n        }\n\n        if (this.captions.currentTrack !== index) {\n            this.captions.currentTrack = index;\n            const track = captions.getCurrentTrack.call(this);\n            const { language } = track || {};\n\n            // Store reference to node for invalidation on remove\n            this.captions.currentTrackNode = track;\n\n            // Prevent setting language in some cases, since it can violate user's intentions\n            if (setLanguage) {\n                this.captions.language = language;\n            }\n\n            // Handle Vimeo captions\n            if (this.isVimeo) {\n                this.embed.enableTextTrack(language);\n            }\n\n            // Trigger event\n            utils.dispatchEvent.call(this, this.media, 'languagechange');\n        }\n\n        if (this.isHTML5 && this.isVideo) {\n            // If we change the active track while a cue is already displayed we need to update it\n            captions.updateCues.call(this);\n        }\n\n        // Show captions\n        if (show) {\n            this.toggleCaptions(true);\n        }\n    },\n\n    setLanguage(language, show = true) {\n        if (!utils.is.string(language)) {\n            this.debug.warn('Invalid language argument', language);\n            return;\n        }\n        // Normalize\n        this.captions.language = language.toLowerCase();\n\n        // Set currentTrack\n        const tracks = captions.getTracks.call(this);\n        const track = captions.getCurrentTrack.call(this, true);\n        captions.set.call(this, tracks.indexOf(track), false, show);\n    },\n\n    // Get current valid caption tracks\n    // If update is false it will also ignore tracks without metadata\n    // This is used to \"freeze\" the language options when captions.update is false\n    getTracks(update = false) {\n        // Handle media or textTracks missing or null\n        const tracks = Array.from((this.media || {}).textTracks || []);\n        // For HTML5, use cache instead of current tracks when it exists (if captions.update is false)\n        // Filter out removed tracks and tracks that aren't captions/subtitles (for example metadata)\n        return tracks\n            .filter(track => !this.isHTML5 || update || this.captions.meta.has(track))\n            .filter(track => [\n                'captions',\n                'subtitles',\n            ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack(fromLanguage = false) {\n        const tracks = captions.getTracks.call(this);\n        const sortIsDefault = track => Number((this.captions.meta.get(track) || {}).default);\n        const sorted = Array.from(tracks).sort((a, b) => sortIsDefault(b) - sortIsDefault(a));\n        return (!fromLanguage && tracks[this.currentTrack]) || sorted.find(track => track.language === this.captions.language) || sorted[0];\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!utils.is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (utils.is.track(currentTrack)) {\n            if (!utils.is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!utils.is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Update captions using current track's active cues\n    // Also optional array argument in case there isn't any track (ex: vimeo)\n    updateCues(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (!utils.is.element(this.elements.captions)) {\n            this.debug.warn('No captions element to render to');\n            return;\n        }\n\n        // Only accept array or empty input\n        if (!utils.is.nullOrUndefined(input) && !Array.isArray(input)) {\n            this.debug.warn('updateCues: Invalid input', input);\n            return;\n        }\n\n        let cues = input;\n\n        // Get cues from track\n        if (!cues) {\n            const track = captions.getCurrentTrack.call(this);\n            cues = Array.from((track || {}).activeCues || [])\n                .map(cue => cue.getCueAsHTML())\n                .map(utils.getHTML);\n        }\n\n        // Set new caption text\n        const content = cues.map(cueText => cueText.trim()).join('\\n');\n        const changed = content !== this.elements.captions.innerHTML;\n\n        if (changed) {\n            // Empty the container and create a new child element\n            utils.emptyElement(this.elements.captions);\n            const caption = utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.caption));\n            caption.innerHTML = content;\n            this.elements.captions.appendChild(caption);\n\n            // Trigger event\n            utils.dispatchEvent.call(this, this.media, 'cuechange');\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Allow inline playback on iOS (this effects YouTube/Vimeo - HTML5 requires the attribute present)\n    // TODO: Remove iosNative fullscreen option in favour of this (logic needs work)\n    playsinline: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.3.12/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: 'auto',\n        // Listen to new tracks added after Plyr is initialized.\n        // This is needed for streaming captions, but may result in unselectable options\n        update: false,\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        seekLabel: '{currentTime} of {duration}',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        menuBack: 'Go back to previous menu',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n        qualityBadge: {\n            2160: '4K',\n            1440: 'HD',\n            1080: 'HD',\n            720: 'HD',\n            576: 'SD',\n            480: 'SD',\n        },\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress__buffer',\n            loop: '.plyr__progress__loop', // Used later\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        caption: '.plyr__caption',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        posterEnabled: 'plyr__poster-enabled',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        controlPressed: 'plyr__control--pressed',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        button.pressed = this.active;\n    }\n\n    // Trigger an event\n    utils.dispatchEvent.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (utils.is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}ExitFullscreen`]) || utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!utils.is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup captions for HTML5\n        if (this.isHTML5) {\n            captions.setup.call(this);\n        }\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        controls.updateVolume.call(this);\n\n        // Reset time display\n        controls.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        utils.toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Assure the poster image is set, if the property was added before the element was created\n        if (this.poster && this.elements.poster && !this.elements.poster.style.backgroundImage) {\n            ui.setPoster.call(this, this.poster);\n        }\n\n        // Manually set the duration if user has overridden it.\n        // The event listeners for it doesn't get called if preload is disabled (#701)\n        if (this.config.duration) {\n            controls.durationUpdate.call(this);\n        }\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Toggle poster\n    togglePoster(enable) {\n        utils.toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n\n    // Set the poster image (async)\n    setPoster(poster) {\n        // Set property regardless of validity\n        this.media.setAttribute('poster', poster);\n\n        // Bail if element is missing\n        if (!utils.is.element(this.elements.poster)) {\n            return Promise.reject();\n        }\n\n        // Load the image, and set poster if successful\n        const loadPromise = utils.loadImage(poster).then(() => {\n            this.elements.poster.style.backgroundImage = `url('${poster}')`;\n            Object.assign(this.elements.poster.style, {\n                backgroundImage: `url('${poster}')`,\n                // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n                backgroundSize: '',\n            });\n            ui.togglePoster.call(this, true);\n            return poster;\n        });\n\n        // Hide the element if the poster can't be loaded (otherwise it will just be a black element covering the video)\n        loadPromise.catch(() => ui.togglePoster.call(this, false));\n\n        // Return the promise so the caller can use it as well\n        return loadPromise;\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set state\n        Array.from(this.elements.buttons.play).forEach(target => {\n            target.pressed = this.playing;\n        });\n\n        // Only update controls on non timeupdate events\n        if (utils.is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        ui.toggleControls.call(this);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Update progress bar loading class state\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Update controls visibility\n            ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Toggle controls based on state and `force` argument\n    toggleControls(force) {\n        const { controls } = this.elements;\n\n        if (controls && this.config.hideControls) {\n            // Show controls if force, loading, paused, or button interaction, otherwise hide\n            this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover));\n        }\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && (\n                focused !== this.player.elements.inputs.seek &&\n                utils.matches(focused, this.player.config.selectors.editable))\n            ) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n        // Clean up\n        utils.off(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        utils.on(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls on mouse events and entering fullscreen\n        utils.on(this.player.elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', event => {\n            const { controls } = this.player.elements;\n\n            // Remove button states for fullscreen\n            if (event.type === 'enterfullscreen') {\n                controls.pressed = false;\n                controls.hover = false;\n            }\n\n            // Show, then hide after a timeout unless another control event occurs\n            const show = [\n                'touchstart',\n                'touchmove',\n                'mousemove',\n            ].includes(event.type);\n\n            let delay = 0;\n\n            if (show) {\n                ui.toggleControls.call(this.player, true);\n                // Use longer timeout for touch devices\n                delay = this.player.touch ? 3000 : 2000;\n            }\n\n            // Clear timer\n            clearTimeout(this.player.timers.controls);\n            // Timer to prevent flicker when seeking\n            this.player.timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n        });\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking seeked', event => controls.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadeddata loadedmetadata', event => controls.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing seeking seeked', event => controls.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        utils.on(this.player.media, 'volumechange', event => controls.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        utils.on(this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        utils.on(this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        utils.on(this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let {detail = {}} = event;\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const on = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n\n            utils.on(element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        on(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        on(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        on(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        on(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        on(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        on(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        on(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        on(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        on(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.currentTrack = Number(event.target.value);\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Set range input alternative \"value\", which matches the tooltip time (#954)\n        on(this.player.elements.inputs.seek, 'mousedown mousemove', event => {\n            const clientRect = this.player.elements.progress.getBoundingClientRect();\n            const percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n            event.currentTarget.setAttribute('seek-value', percent);\n        });\n\n        // Pause while seeking\n        on(this.player.elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', event => {\n            const seek = event.currentTarget;\n\n            const code = event.keyCode ? event.keyCode : event.which;\n            const eventType = event.type;\n\n            if ((eventType === 'keydown' || eventType === 'keyup') && (code !== 39 && code !== 37)) {\n                return;\n            }\n            // Was playing before?\n            const play = seek.hasAttribute('play-on-seeked');\n\n            // Done seeking\n            const done = [\n                'mouseup',\n                'touchend',\n                'keyup',\n            ].includes(event.type);\n\n            // If we're done seeking and it was playing, resume playback\n            if (play && done) {\n                seek.removeAttribute('play-on-seeked');\n                this.player.play();\n            } else if (!done && this.player.playing) {\n                seek.setAttribute('play-on-seeked', '');\n                this.player.pause();\n            }\n        });\n\n        // Seek\n        on(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                const seek = event.currentTarget;\n\n                // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n                let seekTo = seek.getAttribute('seek-value');\n\n                if (utils.is.empty(seekTo)) {\n                    seekTo = seek.value;\n                }\n\n                seek.removeAttribute('seek-value');\n\n                this.player.currentTime = seekTo / seek.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n\n                controls.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        on(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n            this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n        });\n\n        // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n            this.player.elements.controls.pressed = [\n                'mousedown',\n                'touchstart',\n            ].includes(event.type);\n        });\n\n        // Focus in/out on controls\n        on(this.player.elements.controls, 'focusin focusout', event => {\n            const { config, elements, timers } = this.player;\n\n            // Skip transition to prevent focus from scrolling the parent element\n            utils.toggleClass(elements.controls, config.classNames.noTransition, event.type === 'focusin');\n\n            // Toggle\n            ui.toggleControls.call(this.player, event.type === 'focusin');\n\n            // If focusin, hide again after delay\n            if (event.type === 'focusin') {\n                // Restore transition\n                setTimeout(() => {\n                    utils.toggleClass(elements.controls, config.classNames.noTransition, false);\n                }, 0);\n\n                // Delay a little more for keyboard users\n                const delay = this.touch ? 3000 : 4000;\n\n                // Clear timer\n                clearTimeout(timers.controls);\n                // Hide\n                timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n            }\n        });\n\n        // Mouse wheel for volume\n        on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = utils.format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Get poster image\n        utils.fetch(utils.format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (utils.is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set and show poster\n            ui.setPoster.call(player, url.href);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            assurePlaybackState.call(player, true);\n            return player.embed.play();\n        };\n\n        player.media.pause = () => {\n            assurePlaybackState.call(player, false);\n            return player.embed.pause();\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Vimeo will automatically play on seek if the video hasn't been played before\n\n                // Get current paused state and volume etc\n                const { embed, media, paused, volume } = player;\n                const restorePause = paused && !embed.hasPlayed;\n\n                // Set seeking state and trigger event\n                media.seeking = true;\n                utils.dispatchEvent.call(player, media, 'seeking');\n\n                // If paused, mute until seek is complete\n                Promise.resolve(restorePause && embed.setVolume(0))\n                    // Seek\n                    .then(() => embed.setCurrentTime(time))\n                    // Restore paused\n                    .then(() => restorePause && embed.pause())\n                    // Restore volume\n                    .then(() => restorePause && embed.setVolume(volume))\n                    .catch(() => {\n                        // Do nothing\n                    });\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        utils.dispatchEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', ({ cues = [] }) => {\n            const strippedCues = cues.map(cue => utils.stripHTML(cue.text));\n            captions.updateCues.call(player, strippedCues);\n        });\n\n        player.embed.on('loaded', () => {\n            // Assure state and events are updated on autoplay\n            player.embed.getPaused().then(paused => {\n                assurePlaybackState.call(player, !paused);\n                if (!paused) {\n                    utils.dispatchEvent.call(player, player.media, 'playing');\n                }\n            });\n\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            assurePlaybackState.call(player, true);\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            assurePlaybackState.call(player, false);\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    switch (input) {\n        case 'hd2160':\n            return 2160;\n\n        case 2160:\n            return 'hd2160';\n\n        case 'hd1440':\n            return 1440;\n\n        case 1440:\n            return 'hd1440';\n\n        case 'hd1080':\n            return 1080;\n\n        case 1080:\n            return 'hd1080';\n\n        case 'hd720':\n            return 720;\n\n        case 720:\n            return 'hd720';\n\n        case 'large':\n            return 480;\n\n        case 480:\n            return 'large';\n\n        case 'medium':\n            return 360;\n\n        case 360:\n            return 'medium';\n\n        case 'small':\n            return 240;\n\n        case 240:\n            return 'small';\n\n        default:\n            return 'default';\n    }\n}\n\nfunction mapQualityUnits(levels) {\n    if (utils.is.empty(levels)) {\n        return levels;\n    }\n\n    return utils.dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = utils.format(this.config.urls.youtube.api, videoId, key);\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Set poster image\n        const posterSrc = format => `https://img.youtube.com/vi/${videoId}/${format}default.jpg`;\n\n        // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n        utils.loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n            .catch(() => utils.loadImage(posterSrc('sd'), 121)) // 480p padded 4:3\n            .catch(() => utils.loadImage(posterSrc('hq'))) // 360p padded 4:3. Always exists\n            .then(image => ui.setPoster.call(player, image.src))\n            .then(posterSrc => {\n                // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n                if (!posterSrc.includes('maxres')) {\n                    player.elements.poster.style.backgroundSize = 'cover';\n                }\n            });\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        assurePlaybackState.call(player, true);\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        assurePlaybackState.call(player, false);\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // If paused, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                            if (player.paused) {\n                                player.embed.mute();\n                            }\n\n                            // Set seeking state and trigger event\n                            player.media.seeking = true;\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            const quality = input;\n\n                            // Set via API\n                            instance.setPlaybackQuality(mapQualityUnit(quality));\n\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality,\n                            });\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    const seeked = player.media.seeking && [\n                        1,\n                        2,\n                    ].includes(event.data);\n\n                    if (seeked) {\n                        // Unset seeking and fire seeked event\n                        player.media.seeking = false;\n                        utils.dispatchEvent.call(player, player.media, 'seeked');\n                    }\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            assurePlaybackState.call(player, false);\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (player.media.paused && !player.embed.hasPlayed) {\n                                player.media.pause();\n                            } else {\n                                assurePlaybackState.call(player, true);\n\n                                utils.dispatchEvent.call(player, player.media, 'playing');\n\n                                // Poll to get playback progress\n                                player.timers.playing = setInterval(() => {\n                                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                                }, 50);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/sampotts/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (player.media.duration !== instance.getDuration()) {\n                                    player.media.duration = instance.getDuration();\n                                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                                }\n\n                                // Get quality\n                                controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n                            }\n\n                            break;\n\n                        case 2:\n                            // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (!player.muted) {\n                                player.embed.unMute();\n                            }\n                            assurePlaybackState.call(player, false);\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport utils from './utils';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = utils.createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport utils from '../utils';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !utils.is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!utils.is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (utils.is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = utils.createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (utils.is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport { providers } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!utils.is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.12\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport Console from './console';\nimport controls from './controls';\nimport defaults from './defaults';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport { providers, types } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            Plyr.defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: -1,\n            meta: new WeakMap(),\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(params.playsinline);\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!utils.is.function(this.media.play)) {\n            return null;\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !utils.is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (utils.is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        // Bail if media duration isn't available yet\n        if (!this.duration) {\n            return;\n        }\n\n        // Validate input\n        const inputIsValid = utils.is.number(input) && input > 0;\n\n        // Set\n        this.media.currentTime = inputIsValid ? Math.min(input, this.duration) : 0;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (utils.is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // Media duration can be NaN before the media has loaded\n        const duration = (this.media || {}).duration || 0;\n\n        // If config duration is funky, use regular duration\n        return fauxDuration || duration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!utils.is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (!utils.is.empty(input)) {\n            quality = Number(input);\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.default;\n        }\n\n        if (!this.options.quality.length) {\n            return;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            const closest = utils.closest(this.options.quality, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${closest} instead`);\n            quality = closest;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        ui.setPoster.call(this, input);\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const active = utils.is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Toggle state\n        this.elements.buttons.captions.pressed = active;\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, active);\n\n        // Update state and trigger event\n        if (active !== this.captions.active) {\n            this.captions.active = active;\n            utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n        }\n    }\n\n    /**\n     * Set the caption track by index\n     * @param {number} - Caption index\n     */\n    set currentTrack(input) {\n        captions.set.call(this, input);\n    }\n\n    /**\n     * Get the current caption track index (-1 if disabled)\n     */\n    get currentTrack() {\n        const { active, currentTrack } = this.captions;\n        return active ? currentTrack : -1;\n    }\n\n    /**\n     * Set the wanted language for captions\n     * Since tracks can be added later it won't update the actual caption track until there is a matching track\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        captions.setLanguage.call(this, input);\n    }\n\n    /**\n     * Get the current track's language\n     */\n    get language() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} [toggle] - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n            // Get state before change\n            const isHidden = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n\n            // Negate the argument if not undefined since adding the class to hides the controls\n            const force = typeof toggle === 'undefined' ? undefined : !toggle;\n\n            // Apply and get updated state\n            const hiding = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, force);\n\n            // Close menu\n            if (hiding && this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                controls.toggleMenu.call(this, false);\n            }\n            // Trigger event on change\n            if (hiding !== isHidden) {\n                const eventName = hiding ? 'controlshidden' : 'controlsshown';\n                utils.dispatchEvent.call(this, this.media, eventName);\n            }\n            return !hiding;\n        }\n        return false;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && utils.is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (utils.is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (utils.is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (utils.is.array(selector)) {\n            targets = selector.filter(utils.is.element);\n        }\n\n        if (utils.is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nPlyr.defaults = utils.cloneDeep(defaults);\n\nexport default Plyr;\n"]}