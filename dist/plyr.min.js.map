{"version":3,"sources":["utils/is.js","utils/events.js","utils/elements.js","utils/animation.js","utils/browser.js","support.js","html5.js","utils/objects.js","utils/strings.js","i18n.js","utils/arrays.js","storage.js","utils/loadSprite.js","utils/time.js","controls.js","utils/fetch.js","utils/urls.js","captions.js","config/defaults.js","config/types.js","console.js","fullscreen.js","utils/loadImage.js","ui.js","listeners.js","../../node_modules/loadjs/dist/loadjs.umd.js","utils/loadScript.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","plyr.js"],"names":["getConstructor","input","constructor","instanceOf","Boolean","is","Object","Number","isNaN","String","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","window","TextTrackCue","VTTCue","TextTrack","string","kind","test","array","nodeList","length","object","keys","supportsPassiveListeners","supported","options","defineProperty","addEventListener","removeEventListener","e","toggleListener","elements","event","callback","toggle","arguments","undefined","passive","capture","once","empty","function","from","forEach","element","Node","call","events","split","type","_this","eventListeners","push","on","this","off","onceCallback","args","_len","_key","apply","triggerEvent","bubbles","detail","CustomEvent","assign","dispatchEvent","wrap","wrapper","targets","reverse","index","child","cloneNode","parent","parentNode","sibling","nextSibling","appendChild","insertBefore","setAttributes","attributes","entries","_ref","key","_ref2","value","setAttribute","createElement","text","document","innerText","insertElement","removeElement","removeChild","emptyElement","childNodes","lastChild","replaceElement","newChild","oldChild","replaceChild","getAttributesFromSelector","sel","existingAttributes","existing","s","selector","trim","className","replace","parts","charAt","class","id","toggleHidden","hidden","hide","boolean","hasAttribute","removeAttribute","toggleClass","force","method","classList","contains","hasClass","matches","prototype","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","querySelectorAll","includes","getElements","container","getElement","querySelector","getFocusElement","focused","activeElement","body","toggleState","target","pressed","getAttribute","state","transitionEndEvent","find","style","range","browser","documentMode","documentElement","navigator","userAgent","platform","support","provider","playsinline","api","ui","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","matchMedia","html5","filter","source","mime","getSources","map","player","currentTime","playing","src","load","play","config","blankVideo","debug","log","extend","sources","shift","concat","format","toString","match","i","replaceAll","RegExp","toTitleCase","toUpperCase","substr","toLowerCase","toCamelCase","toPascalCase","slice","getHTML","innerHTML","i18n","reduce","obj","seekTime","title","dedupe","item","indexOf","Storage","enabled","storage","store","localStorage","getItem","json","JSON","parse","get","setItem","stringify","removeItem","loadSprite","url","hasId","exists","getElementById","update","data","insertAdjacentElement","useStorage","cached","prefix","content","then","result","catch","getHours","parseInt","getMinutes","getSeconds","formatTime","time","displayHours","inverted","number","hours","mins","secs","controls","cors","URL","iconUrl","location","host","isIE","svg4everybody","selectors","buttons","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","seekTooltip","classNames","tooltip","error","warn","toggleNativeControls","getIconUrl","iconPath","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","badge","menu","buttonType","button","label","labelPressed","iconPressed","control","createIcon","createLabel","updateRangeFill","suffix","list","_ref$badge","checked","_ref$checked","radio","faux","insertAdjacentHTML","forceHours","setRange","muted","current","max","toFixed","getElementsByTagName","nodeValue","buffered","isWebkit","setProperty","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","_this2","touch","width","pageX","left","parseFloat","updateTimeDisplay","invert","invertTime","seeking","updateProgress","hasDuration","displayDuration","paused","updateSeekTooltip","setting","tabs","panes","quality","_this3","toggleTab","checkMenu","sort","a","b","sorting","createMenuItem","getLabel","createBadge","getBadge","updateSetting","pane","currentTrack","default","tracks","getTracks","track","_this4","active","language","unshift","bind","speed","isVimeo","_this5","values","some","tab","form","show","isMenuItem","isButton","stopPropagation","open","clone","position","opacity","name","scrollWidth","height","scrollHeight","transitions","reducedMotion","size","getTabSize","propertyName","focus","createButton","createRange","createProgress","createTime","inner","home","_this6","back","setQualityMenu","getQualityOptions","setSpeedMenu","Math","floor","random","props","create","_ref3","findElements","offsetHeight","labels","join","_this7","fetch","responseType","Promise","resolve","reject","request","XMLHttpRequest","responseText","response","Error","statusText","send","parseUrl","parser","href","buildUrlParams","params","URLSearchParams","set","isYouTube","textTracks","setCaptionsMenu","hostname","protocol","blob","createObjectURL","userLanguage","setLanguage","trackEvents","_captions","meta","mode","updateCues","trackRemoved","currentTrackNode","firstMatch","getCurrentTrack","embed","enableTextTrack","toggleCaptions","has","fromLanguage","sortIsDefault","sorted","cues","activeCues","cue","getCueAsHTML","cueText","caption","defaults","providers","types","noop","Console","console","onChange","isIos","focusable","first","last","trap","keyCode","shiftKey","preventDefault","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","x","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","loadImage","minWidth","image","Image","handler","onload","onerror","naturalWidth","uiSupported","listeners","inject","setup","loop","updateVolume","timeUpdate","checkPlaying","isTouch","ready","setTitle","poster","backgroundImage","setPoster","durationUpdate","isEmbed","iframe","enable","posterEnabled","loadPromise","togglePoster","stopped","toggleControls","loading","timers","setTimeout","hideControls","hover","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","keyboard","global","tabFocus","delay","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","_event$detail","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","currentTarget","eventType","done","seekTo","toggleInvert","_player","noTransition","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","splice","executeCallbacks","depsNotFound","success","loadFile","callbackFn","numTries","isCss","doc","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","rel","onbeforeload","ev","sheet","cssText","defaultPrevented","head","loadjs","paths","arg1","arg2","fn","numWaiting","loadFiles","deps","bundleIds","r","subscribe","reset","isDefined","module","exports","loadScript","assurePlaybackState","hasPlayed","vimeo","setAspectRatio","Vimeo","urls","sdk","ratio","padding","paddingBottom","offset","transform","autoplay","$2","embedContainer","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","restorePause","setVolume","setCurrentTime","selected","setPlaybackRate","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getRatio","w","h","getAspectRatio","setAutopause","getVideoTitle","getCurrentTime","getDuration","getTextTracks","strippedCues","_ref$cues","fragment","createDocumentFragment","firstChild","getPaused","seconds","build","mapQualityUnit","entry","youtube","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","startsWith","posterSrc","format$$1","backgroundSize","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","unMute","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","_this11","base","Date","now","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Plyr","failed","jQuery","plyr","original","tagName","getProviderByUrl","searchParams","truthy","step","webkitShowPlaybackTargetPicker","isHidden","hiding","eventName","soft","unload","inputIsValid","min","end","fauxDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","prev","curr","abs","closest","change","states","webkitPresentationMode","inline","t"],"mappings":"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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\n\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst is = {\n    object(input) {\n        return getConstructor(input) === Object;\n    },\n    number(input) {\n        return getConstructor(input) === Number && !Number.isNaN(input);\n    },\n    string(input) {\n        return getConstructor(input) === String;\n    },\n    boolean(input) {\n        return getConstructor(input) === Boolean;\n    },\n    function(input) {\n        return getConstructor(input) === Function;\n    },\n    array(input) {\n        return !is.nullOrUndefined(input) && Array.isArray(input);\n    },\n    weakMap(input) {\n        return instanceOf(input, WeakMap);\n    },\n    nodeList(input) {\n        return instanceOf(input, NodeList);\n    },\n    element(input) {\n        return instanceOf(input, Element);\n    },\n    textNode(input) {\n        return getConstructor(input) === Text;\n    },\n    event(input) {\n        return instanceOf(input, Event);\n    },\n    cue(input) {\n        return instanceOf(input, window.TextTrackCue) || instanceOf(input, window.VTTCue);\n    },\n    track(input) {\n        return instanceOf(input, TextTrack) || (!is.nullOrUndefined(input) && is.string(input.kind));\n    },\n    url(input) {\n        return !is.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n    },\n    nullOrUndefined(input) {\n        return input === null || typeof input === 'undefined';\n    },\n    empty(input) {\n        return (\n            is.nullOrUndefined(input) ||\n            ((is.string(input) || is.array(input) || is.nodeList(input)) && !input.length) ||\n            (is.object(input) && !Object.keys(input).length)\n        );\n    },\n};\n\nexport default is;\n","// ==========================================================================\n// Event utils\n// ==========================================================================\n\nimport is from './is';\n\n// Check for passive event listener support\n// https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n// https://www.youtube.com/watch?v=NPM6172J22g\nconst supportsPassiveListeners = (() => {\n    // Test via a getter in the options object to see if the passive property is accessed\n    let supported = false;\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get() {\n                supported = true;\n                return null;\n            },\n        });\n        window.addEventListener('test', null, options);\n        window.removeEventListener('test', null, options);\n    } catch (e) {\n        // Do nothing\n    }\n\n    return supported;\n})();\n\n// Toggle event listener\nexport function toggleListener(elements, event, callback, toggle = false, passive = true, capture = false, once = false) {\n    // Bail if no elemetns, event, or callback\n    if (is.empty(elements) || is.empty(event) || !is.function(callback)) {\n        return;\n    }\n\n    // If a nodelist is passed, call itself on each node\n    if (is.nodeList(elements) || is.array(elements)) {\n        // Create listener for each node\n        Array.from(elements).forEach(element => {\n            if (element instanceof Node) {\n                toggleListener.call(null, element, event, callback, toggle, passive, capture);\n            }\n        });\n\n        return;\n    }\n\n    // Allow multiple events\n    const events = event.split(' ');\n\n    // Build options\n    // Default to just the capture boolean for browsers with no passive listener support\n    let options = capture;\n\n    // If passive events listeners are supported\n    if (supportsPassiveListeners) {\n        options = {\n            // Whether the listener can be passive (i.e. default never prevented)\n            passive,\n            // Whether the listener is a capturing listener or not\n            capture,\n        };\n    }\n\n    // If a single node is passed, bind the event listener\n    events.forEach(type => {\n        if (this && this.eventListeners && toggle && !once) {\n            // Cache event listener\n            this.eventListeners.push({ elements, type, callback, options });\n        }\n\n        elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n    });\n}\n\n// Bind event handler\nexport function on(element, events = '', callback, passive = true, capture = false) {\n    toggleListener.call(this, element, events, callback, true, passive, capture);\n}\n\n// Unbind event handler\nexport function off(element, events = '', callback, passive = true, capture = false) {\n    toggleListener.call(this, element, events, callback, false, passive, capture);\n}\n\n// Bind once-only event handler\nexport function once(element, events = '', callback, passive = true, capture = false) {\n    function onceCallback(...args) {\n        off(element, events, onceCallback, passive, capture);\n        callback.apply(this, args);\n    }\n\n    toggleListener(element, events, onceCallback, true, passive, capture, true);\n}\n\n// Trigger event\nexport function triggerEvent(element, type = '', bubbles = false, detail = {}) {\n    // Bail if no element\n    if (!is.element(element) || is.empty(type)) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new CustomEvent(type, {\n        bubbles,\n        detail: Object.assign({}, detail, {\n            plyr: this,\n        }),\n    });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\n// Unbind all cached event listeners\nexport function unbindListeners() {\n    if (this && this.eventListeners) {\n        this.eventListeners.forEach(item => {\n            const { elements, type, callback, options } = item;\n            elements.removeEventListener(type, callback, options);\n        });\n\n        this.eventListeners = [];\n    }\n}\n","// ==========================================================================\n// Element utils\n// ==========================================================================\n\nimport { off, on } from './events';\nimport is from './is';\n\n// Wrap an element\nexport function wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    const targets = elements.length ? elements : [elements];\n\n    // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n    Array.from(targets)\n        .reverse()\n        .forEach((element, index) => {\n            const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n            // Cache the current parent and sibling.\n            const parent = element.parentNode;\n            const sibling = element.nextSibling;\n\n            // Wrap the element (is automatically removed from its current\n            // parent).\n            child.appendChild(element);\n\n            // If the element had a sibling, insert the wrapper before\n            // the sibling to maintain the HTML structure; otherwise, just\n            // append it to the parent.\n            if (sibling) {\n                parent.insertBefore(child, sibling);\n            } else {\n                parent.appendChild(child);\n            }\n        });\n}\n\n// Set attributes\nexport function setAttributes(element, attributes) {\n    if (!is.element(element) || is.empty(attributes)) {\n        return;\n    }\n\n    Object.entries(attributes).forEach(([\n        key,\n        value,\n    ]) => {\n        element.setAttribute(key, value);\n    });\n}\n\n// Create a DocumentFragment\nexport function createElement(type, attributes, text) {\n    // Create a new <element>\n    const element = document.createElement(type);\n\n    // Set all passed attributes\n    if (is.object(attributes)) {\n        setAttributes(element, attributes);\n    }\n\n    // Add text node\n    if (is.string(text)) {\n        element.innerText = text;\n    }\n\n    // Return built element\n    return element;\n}\n\n// Inaert an element after another\nexport function insertAfter(element, target) {\n    target.parentNode.insertBefore(element, target.nextSibling);\n}\n\n// Insert a DocumentFragment\nexport function insertElement(type, parent, attributes, text) {\n    // Inject the new <element>\n    parent.appendChild(createElement(type, attributes, text));\n}\n\n// Remove element(s)\nexport function removeElement(element) {\n    if (is.nodeList(element) || is.array(element)) {\n        Array.from(element).forEach(removeElement);\n        return;\n    }\n\n    if (!is.element(element) || !is.element(element.parentNode)) {\n        return;\n    }\n\n    element.parentNode.removeChild(element);\n}\n\n// Remove all child elements\nexport function emptyElement(element) {\n    let { length } = element.childNodes;\n\n    while (length > 0) {\n        element.removeChild(element.lastChild);\n        length -= 1;\n    }\n}\n\n// Replace element\nexport function replaceElement(newChild, oldChild) {\n    if (!is.element(oldChild) || !is.element(oldChild.parentNode) || !is.element(newChild)) {\n        return null;\n    }\n\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n\n    return newChild;\n}\n\n// Get an attribute object from a string selector\nexport function getAttributesFromSelector(sel, existingAttributes) {\n    // For example:\n    // '.test' to { class: 'test' }\n    // '#test' to { id: 'test' }\n    // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n    if (!is.string(sel) || is.empty(sel)) {\n        return {};\n    }\n\n    const attributes = {};\n    const existing = existingAttributes;\n\n    sel.split(',').forEach(s => {\n        // Remove whitespace\n        const selector = s.trim();\n        const className = selector.replace('.', '');\n        const stripped = selector.replace(/[[\\]]/g, '');\n\n        // Get the parts and value\n        const parts = stripped.split('=');\n        const key = parts[0];\n        const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n        // Get the first character\n        const start = selector.charAt(0);\n\n        switch (start) {\n            case '.':\n                // Add to existing classname\n                if (is.object(existing) && is.string(existing.class)) {\n                    existing.class += ` ${className}`;\n                }\n\n                attributes.class = className;\n                break;\n\n            case '#':\n                // ID selector\n                attributes.id = selector.replace('#', '');\n                break;\n\n            case '[':\n                // Attribute selector\n                attributes[key] = value;\n\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    return attributes;\n}\n\n// Toggle hidden\nexport function toggleHidden(element, hidden) {\n    if (!is.element(element)) {\n        return;\n    }\n\n    let hide = hidden;\n\n    if (!is.boolean(hide)) {\n        hide = !element.hasAttribute('hidden');\n    }\n\n    if (hide) {\n        element.setAttribute('hidden', '');\n    } else {\n        element.removeAttribute('hidden');\n    }\n}\n\n// Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\nexport function toggleClass(element, className, force) {\n    if (is.element(element)) {\n        let method = 'toggle';\n        if (typeof force !== 'undefined') {\n            method = force ? 'add' : 'remove';\n        }\n\n        element.classList[method](className);\n        return element.classList.contains(className);\n    }\n\n    return null;\n}\n\n// Has class name\nexport function hasClass(element, className) {\n    return is.element(element) && element.classList.contains(className);\n}\n\n// Element matches selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n    return matches.call(element, selector);\n}\n\n// Find all elements\nexport function getElements(selector) {\n    return this.elements.container.querySelectorAll(selector);\n}\n\n// Find a single element\nexport function getElement(selector) {\n    return this.elements.container.querySelector(selector);\n}\n\n// Get the focused element\nexport function getFocusElement() {\n    let focused = document.activeElement;\n\n    if (!focused || focused === document.body) {\n        focused = null;\n    } else {\n        focused = document.querySelector(':focus');\n    }\n\n    return focused;\n}\n\n// Trap focus inside container\nexport function trapFocus(element = null, toggle = false) {\n    if (!is.element(element)) {\n        return;\n    }\n\n    const focusable = getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n    const first = focusable[0];\n    const last = focusable[focusable.length - 1];\n\n    const trap = event => {\n        // Bail if not tab key or not fullscreen\n        if (event.key !== 'Tab' || event.keyCode !== 9) {\n            return;\n        }\n\n        // Get the current focused element\n        const focused = getFocusElement();\n\n        if (focused === last && !event.shiftKey) {\n            // Move focus to first element that can be tabbed if Shift isn't used\n            first.focus();\n            event.preventDefault();\n        } else if (focused === first && event.shiftKey) {\n            // Move focus to last element that can be tabbed if Shift is used\n            last.focus();\n            event.preventDefault();\n        }\n    };\n\n    if (toggle) {\n        on(this.elements.container, 'keydown', trap, false);\n    } else {\n        off(this.elements.container, 'keydown', trap, false);\n    }\n}\n\n// Toggle aria-pressed state on a toggle button\n// http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\nexport function toggleState(element, input) {\n    // If multiple elements passed\n    if (is.array(element) || is.nodeList(element)) {\n        Array.from(element).forEach(target => toggleState(target, input));\n        return;\n    }\n\n    // Bail if no target\n    if (!is.element(element)) {\n        return;\n    }\n\n    // Get state\n    const pressed = element.getAttribute('aria-pressed') === 'true';\n    const state = is.boolean(input) ? input : !pressed;\n\n    // Set the attribute on target\n    element.setAttribute('aria-pressed', state);\n}\n","// ==========================================================================\n// Animation utils\n// ==========================================================================\n\nimport { toggleHidden } from './elements';\nimport is from './is';\n\nexport const transitionEndEvent = (() => {\n    const element = document.createElement('span');\n\n    const events = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend',\n    };\n\n    const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n    return is.string(type) ? events[type] : false;\n})();\n\n// Force repaint of element\nexport function repaint(element) {\n    setTimeout(() => {\n        toggleHidden(element, true);\n        element.offsetHeight; // eslint-disable-line\n        toggleHidden(element, false);\n    }, 0);\n}\n","// ==========================================================================\n// Browser sniffing\n// Unfortunately, due to mixed support, UA sniffing is required\n// ==========================================================================\n\nconst browser = {\n    isIE: /* @cc_on!@ */ false || !!document.documentMode,\n    isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n    isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n    isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n};\n\nexport default browser;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport { transitionEndEvent } from './utils/animation';\nimport browser from './utils/browser';\nimport { createElement } from './utils/elements';\nimport is from './utils/is';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => !browser.isIPhone && is.function(createElement('video').webkitSetPresentationMode))(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport { removeElement } from './utils/elements';\nimport { triggerEvent } from './utils/events';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return [];\n        }\n\n        const sources = Array.from(this.media.querySelectorAll('source'));\n\n        // Filter out unsupported sources\n        return sources.filter(source => support.mime.call(this, source.getAttribute('type')));\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        // Get sizes from <source> elements\n        return html5.getSources\n            .call(this)\n            .map(source => Number(source.getAttribute('size')))\n            .filter(Boolean);\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n                const [source] = sources.filter(source => source.getAttribute('src') === player.source);\n\n                // Return size, if match is found\n                return source && Number(source.getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                // Get first match for requested size\n                const source = sources.find(source => Number(source.getAttribute('size')) === input);\n\n                // No matching source found\n                if (!source) {\n                    return;\n                }\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = source.getAttribute('src');\n\n                // Restore time\n                const onLoadedMetaData = () => {\n                    player.currentTime = currentTime;\n                };\n                player.once('loadedmetadata', onLoadedMetaData);\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Trigger change event\n                triggerEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        removeElement(html5.getSources.call(this));\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Object utils\n// ==========================================================================\n\nimport is from './is';\n\n// Clone nested objects\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n// Get a nested value in an object\nexport function getDeep(object, path) {\n    return path.split('.').reduce((obj, key) => obj && obj[key], object);\n}\n\n// Deep extend destination object with N more objects\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\nimport is from './is';\n\n// Generate a random ID\nexport function generateId(prefix) {\n    return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n}\n\n// Format string\nexport function format(input, ...args) {\n    if (is.empty(input)) {\n        return input;\n    }\n\n    return input.toString().replace(/{(\\d+)}/g, (match, i) => args[i].toString());\n}\n\n// Get percentage\nexport function getPercentage(current, max) {\n    if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n        return 0;\n    }\n\n    return (current / max * 100).toFixed(2);\n}\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n// Remove HTML from a string\nexport function stripHTML(source) {\n    const fragment = document.createDocumentFragment();\n    const element = document.createElement('div');\n    fragment.appendChild(element);\n    element.innerHTML = source;\n    return fragment.firstChild.innerText;\n}\n\n// Like outerHTML, but also works for DocumentFragment\nexport function getHTML(element) {\n    const wrapper = document.createElement('div');\n    wrapper.appendChild(element);\n    return wrapper.innerHTML;\n}\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport is from './utils/is';\nimport { getDeep } from './utils/objects';\nimport { replaceAll } from './utils/strings';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (is.empty(key) || is.empty(config)) {\n            return '';\n        }\n\n        let string = getDeep(config.i18n, key);\n\n        if (is.empty(string)) {\n            return '';\n        }\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n// Remove duplicates in an array\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Get the closest value in an array\nexport function closest(array, value) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n}\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport is from './utils/is';\nimport { extend } from './utils/objects';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Sprite loader\n// ==========================================================================\n\nimport Storage from './../storage';\nimport is from './is';\n\n// Load an external SVG sprite\nexport default function loadSprite(url, id) {\n    if (!is.string(url)) {\n        return;\n    }\n\n    const prefix = 'cache';\n    const hasId = is.string(id);\n    let isCached = false;\n\n    const exists = () => document.getElementById(id) !== null;\n\n    const update = (container, data) => {\n        container.innerHTML = data;\n\n        // Check again incase of race condition\n        if (hasId && exists()) {\n            return;\n        }\n\n        // Inject the SVG to the body\n        document.body.insertAdjacentElement('afterbegin', container);\n    };\n\n    // Only load once if ID set\n    if (!hasId || !exists()) {\n        const useStorage = Storage.supported;\n\n        // Create container\n        const container = document.createElement('div');\n        container.setAttribute('hidden', '');\n\n        if (hasId) {\n            container.setAttribute('id', id);\n        }\n\n        // Check in cache\n        if (useStorage) {\n            const cached = window.localStorage.getItem(`${prefix}-${id}`);\n            isCached = cached !== null;\n\n            if (isCached) {\n                const data = JSON.parse(cached);\n                update(container, data.content);\n            }\n        }\n\n        // Get the sprite\n        fetch(url)\n            .then(result => {\n                if (is.empty(result)) {\n                    return;\n                }\n\n                if (useStorage) {\n                    window.localStorage.setItem(\n                        `${prefix}-${id}`,\n                        JSON.stringify({\n                            content: result,\n                        }),\n                    );\n                }\n\n                update(container, result);\n            })\n            .catch(() => {});\n    }\n}\n","// ==========================================================================\n// Time utils\n// ==========================================================================\n\nimport is from './is';\n\n// Time helpers\nexport const getHours = value => parseInt((value / 60 / 60) % 60, 10);\nexport const getMinutes = value => parseInt((value / 60) % 60, 10);\nexport const getSeconds = value => parseInt(value % 60, 10);\n\n// Format time to UI friendly string\nexport function formatTime(time = 0, displayHours = false, inverted = false) {\n    // Bail if the value isn't a number\n    if (!is.number(time)) {\n        return formatTime(null, displayHours, inverted);\n    }\n\n    // Format time component to add leading zero\n    const format = value => `0${value}`.slice(-2);\n\n    // Breakdown to hours, mins, secs\n    let hours = getHours(time);\n    const mins = getMinutes(time);\n    const secs = getSeconds(time);\n\n    // Do we need to display hours?\n    if (displayHours || hours > 0) {\n        hours = `${hours}:`;\n    } else {\n        hours = '';\n    }\n\n    // Render\n    return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n}\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport { repaint, transitionEndEvent } from './utils/animation';\nimport { dedupe } from './utils/arrays';\nimport browser from './utils/browser';\nimport { createElement, emptyElement, getAttributesFromSelector, getElement, getElements, hasClass, removeElement, setAttributes, toggleClass, toggleHidden, toggleState } from './utils/elements';\nimport { once } from './utils/events';\nimport is from './utils/is';\nimport loadSprite from './utils/loadSprite';\nimport { extend } from './utils/objects';\nimport { getPercentage, replaceAll, toCamelCase, toTitleCase } from './utils/strings';\nimport { formatTime, getHours } from './utils/time';\n\nconst controls = {\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: getElements.call(this, this.config.selectors.buttons.play),\n                pause: getElement.call(this, this.config.selectors.buttons.pause),\n                restart: getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: getElement.call(this, this.config.selectors.buttons.mute),\n                pip: getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: getElement.call(this, this.config.selectors.buttons.settings),\n                captions: getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: getElement.call(this, this.config.selectors.inputs.seek),\n                volume: getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: getElement.call(this, this.config.selectors.display.currentTime),\n                duration: getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        setAttributes(\n            icon,\n            extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (is.empty(text)) {\n            return null;\n        }\n\n        const badge = createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        extend(attributes, getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = createElement(\n            'label',\n            {\n                for: attributes.id,\n                id: `${attributes.id}-label`,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = createElement(\n            'input',\n            extend(\n                getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-labelledby': `${attributes.id}-label`,\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = createElement(\n            'progress',\n            extend(\n                getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.innerText = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = createElement(\n            'div',\n            extend(attributes, {\n                class: `plyr__time ${attributes.class}`,\n                'aria-label': i18n.get(type, this.config),\n            }),\n            '00:00',\n        );\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem({ value, list, type, title, badge = null, checked = false }) {\n        const item = createElement('li');\n\n        const label = createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = createElement(\n            'input',\n            extend(getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!is.element(target) || !is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.innerText = formatTime(time, forceHours, inverted);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (is.element(this.elements.inputs.volume)) {\n            controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (is.element(this.elements.buttons.mute)) {\n            toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        const setProgress = (target, input) => {\n            const value = is.number(input) ? input : 0;\n            const progress = is.element(target) ? target : this.elements.display.buffer;\n\n            // Update value and label\n            if (is.element(progress)) {\n                progress.value = value;\n\n                // Update text label inside\n                const label = progress.getElementsByTagName('span')[0];\n                if (is.element(label)) {\n                    label.childNodes[0].nodeValue = value;\n                }\n            }\n        };\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                case 'seeked':\n                    value = getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        controls.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    setProgress(this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria value for https://github.com/sampotts/plyr/issues/905\n        range.setAttribute('aria-valuenow', range.value);\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (!this.config.tooltips.seek || !is.element(this.elements.inputs.seek) || !is.element(this.elements.display.seekTooltip) || this.duration === 0) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.progress.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        controls.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate() {\n        // Bail if no ui or durationchange event triggered after playing/seek when invertTime is false\n        if (!this.supported.ui || (!this.config.invertTime && this.currentTime)) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    setQualityMenu(options) {\n        // Menu required\n        if (!is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on uniqueness and config\n        if (is.array(options)) {\n            this.options.quality = dedupe(options).filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            const label = i18n.get(`qualityBadge.${quality}`, this.config);\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                controls.createMenuItem.call(this, {\n                    value: quality,\n                    list,\n                    type,\n                    title: controls.getLabel.call(this, 'quality', quality),\n                    badge: getBadge(quality),\n                });\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (is.number(value)) {\n                    const label = i18n.get(`qualityLabel.${value}`, this.config);\n\n                    if (!label.length) {\n                        return `${value}p`;\n                    }\n\n                    return label;\n                }\n\n                return toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.currentTrack;\n                break;\n\n            default:\n                value = !is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        toggleHidden(this.elements.settings.tabs.loop, false);\n        toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        emptyElement(list);\n\n        options.forEach(option => {\n            const item = createElement('li');\n\n            const button = createElement(\n                'button',\n                extend(getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n        const tracks = captions.getTracks.call(this);\n\n        // Toggle the pane and tab\n        controls.toggleTab.call(this, type, tracks.length);\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!tracks.length) {\n            return;\n        }\n\n        // Generate options data\n        const options = tracks.map((track, value) => ({\n            value,\n            checked: this.captions.active && this.currentTrack === value,\n            title: captions.getLabel.call(this, track),\n            badge: track.language && controls.createBadge.call(this, track.language.toUpperCase()),\n            list,\n            type: 'language',\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        options.unshift({\n            value: -1,\n            checked: !this.captions.active,\n            title: i18n.get('disabled', this.config),\n            list,\n            type: 'language',\n        });\n\n        // Generate options\n        options.forEach(controls.createMenuItem.bind(this));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            controls.createMenuItem.call(this, {\n                value: speed,\n                list,\n                type,\n                title: controls.getLabel.call(this, 'speed', speed),\n            });\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!is.element(form) || !is.element(button)) {\n            return;\n        }\n\n        const show = is.boolean(event) ? event : is.element(form) && form.hasAttribute('hidden');\n\n        if (is.event(event)) {\n            const isMenuItem = is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (is.element(form)) {\n            toggleHidden(form, !show);\n            toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            once(container, transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        toggleHidden(pane, false);\n\n        const tabs = getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = createElement('div', getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = createElement('div', getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = createElement(\n                    'span',\n                    {\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !is.empty(this.config.settings)) {\n            const menu = createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = createElement('div');\n\n            const home = createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = createElement(\n                    'button',\n                    extend(getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (is.string(this.config.controls) || is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                toggleClass(label, this.config.classNames.hidden, false);\n                toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Fetch wrapper\n// Using XHR to avoid issues with older browsers\n// ==========================================================================\n\nexport default function fetch(url, responseType = 'text') {\n    return new Promise((resolve, reject) => {\n        try {\n            const request = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in request)) {\n                return;\n            }\n\n            request.addEventListener('load', () => {\n                if (responseType === 'text') {\n                    try {\n                        resolve(JSON.parse(request.responseText));\n                    } catch (e) {\n                        resolve(request.responseText);\n                    }\n                } else {\n                    resolve(request.response);\n                }\n            });\n\n            request.addEventListener('error', () => {\n                throw new Error(request.statusText);\n            });\n\n            request.open('GET', url, true);\n\n            // Set the required response type\n            request.responseType = responseType;\n\n            request.send();\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n","// ==========================================================================\n// URL utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Parse a string to a URL object\n * @param {string} input - the URL to be parsed\n * @param {boolean} safe - failsafe parsing\n */\nexport function parseUrl(input, safe = true) {\n    let url = input;\n\n    if (safe) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        url = parser.href;\n    }\n\n    try {\n        return new URL(url);\n    } catch (e) {\n        return null;\n    }\n}\n\n// Convert object to URLSearchParams\nexport function buildUrlParams(input) {\n    const params = new URLSearchParams();\n\n    if (is.object(input)) {\n        Object.entries(input).forEach(([\n            key,\n            value,\n        ]) => {\n            params.set(key, value);\n        });\n    }\n\n    return params;\n}\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport browser from './utils/browser';\nimport { createElement, emptyElement, getAttributesFromSelector, insertAfter, removeElement, toggleClass } from './utils/elements';\nimport { on, triggerEvent } from './utils/events';\nimport fetch from './utils/fetch';\nimport is from './utils/is';\nimport { getHTML } from './utils/strings';\nimport { parseUrl } from './utils/urls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!is.element(this.elements.captions)) {\n            this.elements.captions = createElement('div', getAttributesFromSelector(this.config.selectors.captions));\n\n            insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const url = parseUrl(src);\n\n                if (url !== null && url.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(url.protocol)) {\n                    fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!is.boolean(active)) {\n            ({ active } = this.config.captions);\n        }\n\n        // Get language from storage, fallback to config\n        let language = this.storage.get('language') || this.config.captions.language;\n        if (language === 'auto') {\n            [language] = (navigator.language || navigator.userLanguage).split('-');\n        }\n        // Set language and show if active\n        captions.setLanguage.call(this, language, active);\n\n        // Watch changes to textTracks and update captions menu\n        if (this.isHTML5) {\n            const trackEvents = this.config.captions.update ? 'addtrack removetrack' : 'removetrack';\n            on.call(this, this.media.textTracks, trackEvents, captions.update.bind(this));\n        }\n\n        // Update available languages in list next tick (the event must not be triggered before the listeners)\n        setTimeout(captions.update.bind(this), 0);\n    },\n\n    update() {\n        const tracks = captions.getTracks.call(this, true);\n        // Get the wanted language\n        const { language, meta } = this.captions;\n\n        // Handle tracks (add event listener and \"pseudo\"-default)\n        if (this.isHTML5 && this.isVideo) {\n            tracks.filter(track => !meta.get(track)).forEach(track => {\n                this.debug.log('Track added', track);\n                // Attempt to store if the original dom element was \"default\"\n                meta.set(track, {\n                    default: track.mode === 'showing',\n                });\n\n                // Turn off native caption rendering to avoid double captions\n                track.mode = 'hidden';\n\n                // Add event listener for cue changes\n                on.call(this, track, 'cuechange', () => captions.updateCues.call(this));\n            });\n        }\n\n        const trackRemoved = !tracks.find(track => track === this.captions.currentTrackNode);\n        const firstMatch = this.language !== language && tracks.find(track => track.language === language);\n\n        // Update language if removed or first matching track added\n        if (trackRemoved || firstMatch) {\n            captions.setLanguage.call(this, language, this.config.captions.active);\n        }\n\n        // Enable or disable captions based on track length\n        toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is.empty(tracks));\n\n        // Update available languages in list\n        if ((this.config.controls || []).includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    set(index, setLanguage = true, show = true) {\n        const tracks = captions.getTracks.call(this);\n\n        // Disable captions if setting to -1\n        if (index === -1) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        if (!is.number(index)) {\n            this.debug.warn('Invalid caption argument', index);\n            return;\n        }\n\n        if (!(index in tracks)) {\n            this.debug.warn('Track not found', index);\n            return;\n        }\n\n        if (this.captions.currentTrack !== index) {\n            this.captions.currentTrack = index;\n            const track = captions.getCurrentTrack.call(this);\n            const { language } = track || {};\n\n            // Store reference to node for invalidation on remove\n            this.captions.currentTrackNode = track;\n\n            // Prevent setting language in some cases, since it can violate user's intentions\n            if (setLanguage) {\n                this.captions.language = language;\n            }\n\n            // Handle Vimeo captions\n            if (this.isVimeo) {\n                this.embed.enableTextTrack(language);\n            }\n\n            // Trigger event\n            triggerEvent.call(this, this.media, 'languagechange');\n        }\n\n        if (this.isHTML5 && this.isVideo) {\n            // If we change the active track while a cue is already displayed we need to update it\n            captions.updateCues.call(this);\n        }\n\n        // Show captions\n        if (show) {\n            this.toggleCaptions(true);\n        }\n    },\n\n    setLanguage(language, show = true) {\n        if (!is.string(language)) {\n            this.debug.warn('Invalid language argument', language);\n            return;\n        }\n        // Normalize\n        this.captions.language = language.toLowerCase();\n\n        // Set currentTrack\n        const tracks = captions.getTracks.call(this);\n        const track = captions.getCurrentTrack.call(this, true);\n        captions.set.call(this, tracks.indexOf(track), false, show);\n    },\n\n    // Get current valid caption tracks\n    // If update is false it will also ignore tracks without metadata\n    // This is used to \"freeze\" the language options when captions.update is false\n    getTracks(update = false) {\n        // Handle media or textTracks missing or null\n        const tracks = Array.from((this.media || {}).textTracks || []);\n        // For HTML5, use cache instead of current tracks when it exists (if captions.update is false)\n        // Filter out removed tracks and tracks that aren't captions/subtitles (for example metadata)\n        return tracks.filter(track => !this.isHTML5 || update || this.captions.meta.has(track)).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack(fromLanguage = false) {\n        const tracks = captions.getTracks.call(this);\n        const sortIsDefault = track => Number((this.captions.meta.get(track) || {}).default);\n        const sorted = Array.from(tracks).sort((a, b) => sortIsDefault(b) - sortIsDefault(a));\n        return (!fromLanguage && tracks[this.currentTrack]) || sorted.find(track => track.language === this.captions.language) || sorted[0];\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (is.track(currentTrack)) {\n            if (!is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Update captions using current track's active cues\n    // Also optional array argument in case there isn't any track (ex: vimeo)\n    updateCues(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (!is.element(this.elements.captions)) {\n            this.debug.warn('No captions element to render to');\n            return;\n        }\n\n        // Only accept array or empty input\n        if (!is.nullOrUndefined(input) && !Array.isArray(input)) {\n            this.debug.warn('updateCues: Invalid input', input);\n            return;\n        }\n\n        let cues = input;\n\n        // Get cues from track\n        if (!cues) {\n            const track = captions.getCurrentTrack.call(this);\n            cues = Array.from((track || {}).activeCues || [])\n                .map(cue => cue.getCueAsHTML())\n                .map(getHTML);\n        }\n\n        // Set new caption text\n        const content = cues.map(cueText => cueText.trim()).join('\\n');\n        const changed = content !== this.elements.captions.innerHTML;\n\n        if (changed) {\n            // Empty the container and create a new child element\n            emptyElement(this.elements.captions);\n            const caption = createElement('span', getAttributesFromSelector(this.config.selectors.caption));\n            caption.innerHTML = content;\n            this.elements.captions.appendChild(caption);\n\n            // Trigger event\n            triggerEvent.call(this, this.media, 'cuechange');\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.3.12/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: 'auto',\n        // Listen to new tracks added after Plyr is initialized.\n        // This is needed for streaming captions, but may result in unselectable options\n        update: false,\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n        qualityBadge: {\n            2160: '4K',\n            1440: 'HD',\n            1080: 'HD',\n            720: 'HD',\n            576: 'SD',\n            480: 'SD',\n        },\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress__buffer',\n            loop: '.plyr__progress__loop', // Used later\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        caption: '.plyr__caption',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        posterEnabled: 'plyr__poster-enabled',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\n/**\n * Get provider by URL\n * @param {string} url\n */\nexport function getProviderByUrl(url) {\n    // YouTube\n    if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n        return providers.youtube;\n    }\n\n    // Vimeo\n    if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n        return providers.vimeo;\n    }\n\n    return null;\n}\n\nexport default { providers, types };\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport browser from './utils/browser';\nimport { hasClass, toggleClass, toggleState, trapFocus } from './utils/elements';\nimport { on, triggerEvent } from './utils/events';\nimport is from './utils/is';\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (is.element(button)) {\n        toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    triggerEvent.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        on.call(this.player, document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        on.call(this.player, this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (is.function(document[`${pre}ExitFullscreen`]) || is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Load image avoiding xhr/fetch CORS issues\n// Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded\n// By default it checks if it is at least 1px, but you can add a second argument to change this\n// ==========================================================================\n\nexport default function loadImage(src, minWidth = 1) {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        const handler = () => {\n            delete image.onload;\n            delete image.onerror;\n            (image.naturalWidth >= minWidth ? resolve : reject)(image);\n        };\n\n        Object.assign(image, { onload: handler, onerror: handler, src });\n    });\n}\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport browser from './utils/browser';\nimport { getElement, toggleClass, toggleState } from './utils/elements';\nimport { triggerEvent } from './utils/events';\nimport is from './utils/is';\nimport loadImage from './utils/loadImage';\n\nconst ui = {\n    addStyleHook() {\n        toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup captions for HTML5\n        if (this.isHTML5) {\n            captions.setup.call(this);\n        }\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        controls.updateVolume.call(this);\n\n        // Reset time display\n        controls.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            triggerEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Assure the poster image is set, if the property was added before the element was created\n        if (this.poster && this.elements.poster && !this.elements.poster.style.backgroundImage) {\n            ui.setPoster.call(this, this.poster);\n        }\n\n        // Manually set the duration if user has overridden it.\n        // The event listeners for it doesn't get called if preload is disabled (#701)\n        if (this.config.duration) {\n            controls.durationUpdate.call(this);\n        }\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (is.string(this.config.title) && !is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = getElement.call(this, 'iframe');\n\n            if (!is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Toggle poster\n    togglePoster(enable) {\n        toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n\n    // Set the poster image (async)\n    setPoster(poster) {\n        // Set property regardless of validity\n        this.media.setAttribute('poster', poster);\n\n        // Bail if element is missing\n        if (!is.element(this.elements.poster)) {\n            return Promise.reject();\n        }\n\n        // Load the image, and set poster if successful\n        const loadPromise = loadImage(poster).then(() => {\n            this.elements.poster.style.backgroundImage = `url('${poster}')`;\n            Object.assign(this.elements.poster.style, {\n                backgroundImage: `url('${poster}')`,\n                // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n                backgroundSize: '',\n            });\n            ui.togglePoster.call(this, true);\n            return poster;\n        });\n\n        // Hide the element if the poster can't be loaded (otherwise it will just be a black element covering the video)\n        loadPromise.catch(() => ui.togglePoster.call(this, false));\n\n        // Return the promise so the caller can use it as well\n        return loadPromise;\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set ARIA state\n        toggleState(this.elements.buttons.play, this.playing);\n\n        // Only update controls on non timeupdate events\n        if (is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        ui.toggleControls.call(this);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Update progress bar loading class state\n            toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Update controls visibility\n            ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Toggle controls based on state and `force` argument\n    toggleControls(force) {\n        const { controls } = this.elements;\n\n        if (controls && this.config.hideControls) {\n            // Show controls if force, loading, paused, or button interaction, otherwise hide\n            this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover));\n        }\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport browser from './utils/browser';\nimport { getElement, getElements, getFocusElement, matches, toggleClass, toggleHidden } from './utils/elements';\nimport { on, once, toggleListener, triggerEvent } from './utils/events';\nimport is from './utils/is';\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = getFocusElement();\n            if (is.element(focused) && (\n                focused !== this.player.elements.inputs.seek &&\n                matches(focused, this.player.config.selectors.editable))\n            ) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            toggleListener.call(this.player, window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        toggleListener.call(this.player, document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        once(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            on.call(this.player, this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        on.call(this.player, this.player.elements.container, 'focusout', event => {\n            toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n        // Add classname to tabbed elements\n        on.call(this.player, this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                toggleClass(getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls on mouse events and entering fullscreen\n        on.call(this.player, this.player.elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', event => {\n            const { controls } = this.player.elements;\n\n            // Remove button states for fullscreen\n            if (event.type === 'enterfullscreen') {\n                controls.pressed = false;\n                controls.hover = false;\n            }\n\n            // Show, then hide after a timeout unless another control event occurs\n            const show = [\n                'touchstart',\n                'touchmove',\n                'mousemove',\n            ].includes(event.type);\n\n            let delay = 0;\n\n            if (show) {\n                ui.toggleControls.call(this.player, true);\n                // Use longer timeout for touch devices\n                delay = this.player.touch ? 3000 : 2000;\n            }\n\n            // Clear timer\n            clearTimeout(this.player.timers.controls);\n            // Timer to prevent flicker when seeking\n            this.player.timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n        });\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        on.call(this.player, this.player.media, 'timeupdate seeking seeked', event => controls.timeUpdate.call(this.player, event));\n\n        // Display duration\n        on.call(this.player, this.player.media, 'durationchange loadeddata loadedmetadata', event => controls.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        on.call(this.player, this.player.media, 'canplay', () => {\n            toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        on.call(this.player, this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        on.call(this.player, this.player.media, 'progress playing seeking seeked', event => controls.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        on.call(this.player, this.player.media, 'volumechange', event => controls.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        on.call(this.player, this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        on.call(this.player, this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        on.call(this.player, this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            on.call(this.player, wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            on.call(this.player,\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        on.call(this.player, this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        on.call(this.player, this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        on.call(this.player, this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        on.call(this.player, this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        on.call(this.player, this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        on.call(this.player, this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        on.call(this.player, this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let {detail = {}} = event;\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            triggerEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const bind = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = is.function(customHandler);\n\n            on.call(this.player, element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        bind(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        bind(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        bind(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        bind(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        bind(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        bind(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        bind(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        bind(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        bind(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        bind(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        bind(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.currentTrack = Number(event.target.value);\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Set range input alternative \"value\", which matches the tooltip time (#954)\n        bind(this.player.elements.inputs.seek, 'mousedown mousemove', event => {\n            const clientRect = this.player.elements.progress.getBoundingClientRect();\n            const percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n            event.currentTarget.setAttribute('seek-value', percent);\n        });\n\n        // Pause while seeking\n        bind(this.player.elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', event => {\n            const seek = event.currentTarget;\n\n            const code = event.keyCode ? event.keyCode : event.which;\n            const eventType = event.type;\n\n            if ((eventType === 'keydown' || eventType === 'keyup') && (code !== 39 && code !== 37)) {\n                return;\n            }\n            // Was playing before?\n            const play = seek.hasAttribute('play-on-seeked');\n\n            // Done seeking\n            const done = [\n                'mouseup',\n                'touchend',\n                'keyup',\n            ].includes(event.type);\n\n            // If we're done seeking and it was playing, resume playback\n            if (play && done) {\n                seek.removeAttribute('play-on-seeked');\n                this.player.play();\n            } else if (!done && this.player.playing) {\n                seek.setAttribute('play-on-seeked', '');\n                this.player.pause();\n            }\n        });\n\n        // Seek\n        bind(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                const seek = event.currentTarget;\n\n                // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n                let seekTo = seek.getAttribute('seek-value');\n\n                if (is.empty(seekTo)) {\n                    seekTo = seek.value;\n                }\n\n                seek.removeAttribute('seek-value');\n\n                this.player.currentTime = seekTo / seek.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !is.element(this.player.elements.display.duration)) {\n            bind(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n\n                controls.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        bind(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            bind(getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        bind(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n        bind(this.player.elements.controls, 'mouseenter mouseleave', event => {\n            this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n        });\n\n        // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n        bind(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n            this.player.elements.controls.pressed = [\n                'mousedown',\n                'touchstart',\n            ].includes(event.type);\n        });\n\n        // Focus in/out on controls\n        bind(this.player.elements.controls, 'focusin focusout', event => {\n            const { config, elements, timers } = this.player;\n\n            // Skip transition to prevent focus from scrolling the parent element\n            toggleClass(elements.controls, config.classNames.noTransition, event.type === 'focusin');\n\n            // Toggle\n            ui.toggleControls.call(this.player, event.type === 'focusin');\n\n            // If focusin, hide again after delay\n            if (event.type === 'focusin') {\n                // Restore transition\n                setTimeout(() => {\n                    toggleClass(elements.controls, config.classNames.noTransition, false);\n                }, 0);\n\n                // Delay a little more for keyboard users\n                const delay = this.touch ? 3000 : 4000;\n\n                // Clear timer\n                clearTimeout(timers.controls);\n                // Hide\n                timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n            }\n        });\n\n        // Mouse wheel for volume\n        bind(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n}\n\nexport default Listeners;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Load an external script\n// ==========================================================================\n\nimport loadjs from 'loadjs';\n\nexport default function loadScript(url) {\n    return new Promise((resolve, reject) => {\n        loadjs(url, {\n            success: resolve,\n            error: reject,\n        });\n    });\n}\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport { createElement, replaceElement, toggleClass } from './../utils/elements';\nimport { triggerEvent } from './../utils/events';\nimport fetch from './../utils/fetch';\nimport is from './../utils/is';\nimport loadScript from './../utils/loadScript';\nimport { format, stripHTML } from './../utils/strings';\nimport { buildUrlParams } from './../utils/urls';\n\n// Parse Vimeo ID from URL\nfunction parseId(url) {\n    if (is.empty(url)) {\n        return null;\n    }\n\n    if (is.number(Number(url))) {\n        return url;\n    }\n\n    const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n}\n\n// Get aspect ratio for dimensions\nfunction getAspectRatio(width, height) {\n    const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n    const ratio = getRatio(width, height);\n    return `${width / ratio}:${height / ratio}`;\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        triggerEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!is.object(window.Vimeo)) {\n            loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = parseId(source);\n\n        // Build an iframe\n        const iframe = createElement('iframe');\n        const src = format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = replaceElement(wrapper, player.media);\n\n        // Get poster image\n        fetch(format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set and show poster\n            ui.setPoster.call(player, url.href);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            assurePlaybackState.call(player, true);\n            return player.embed.play();\n        };\n\n        player.media.pause = () => {\n            assurePlaybackState.call(player, false);\n            return player.embed.pause();\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Vimeo will automatically play on seek if the video hasn't been played before\n\n                // Get current paused state and volume etc\n                const { embed, media, paused, volume } = player;\n                const restorePause = paused && !embed.hasPlayed;\n\n                // Set seeking state and trigger event\n                media.seeking = true;\n                triggerEvent.call(player, media, 'seeking');\n\n                // If paused, mute until seek is complete\n                Promise.resolve(restorePause && embed.setVolume(0))\n                    // Seek\n                    .then(() => embed.setCurrentTime(time))\n                    // Restore paused\n                    .then(() => restorePause && embed.pause())\n                    // Restore volume\n                    .then(() => restorePause && embed.setVolume(volume))\n                    .catch(() => {\n                        // Do nothing\n                    });\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        triggerEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    triggerEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    triggerEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            triggerEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            triggerEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', ({ cues = [] }) => {\n            const strippedCues = cues.map(cue => stripHTML(cue.text));\n            captions.updateCues.call(player, strippedCues);\n        });\n\n        player.embed.on('loaded', () => {\n            // Assure state and events are updated on autoplay\n            player.embed.getPaused().then(paused => {\n                assurePlaybackState.call(player, !paused);\n                if (!paused) {\n                    triggerEvent.call(player, player.media, 'playing');\n                }\n            });\n\n            if (is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            assurePlaybackState.call(player, true);\n            triggerEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            assurePlaybackState.call(player, false);\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            triggerEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            triggerEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                triggerEvent.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    triggerEvent.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            triggerEvent.call(player, player.media, 'seeked');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            triggerEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            triggerEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport { dedupe } from './../utils/arrays';\nimport { createElement, replaceElement, toggleClass } from './../utils/elements';\nimport { triggerEvent } from './../utils/events';\nimport fetch from './../utils/fetch';\nimport is from './../utils/is';\nimport loadImage from './../utils/loadImage';\nimport loadScript from './../utils/loadScript';\nimport { format, generateId } from './../utils/strings';\n\n// Parse YouTube ID from URL\nfunction parseId(url) {\n    if (is.empty(url)) {\n        return null;\n    }\n\n    const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n}\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    const qualities = {\n        hd2160: 2160,\n        hd1440: 1440,\n        hd1080: 1080,\n        hd720: 720,\n        large: 480,\n        medium: 360,\n        small: 240,\n        tiny: 144,\n    };\n\n    const entry = Object.entries(qualities).find(entry => entry.includes(input));\n\n    if (entry) {\n        // Get the match corresponding to the input\n        return entry.find(value => value !== input);\n    }\n\n    return 'default';\n}\n\nfunction mapQualityUnits(levels) {\n    if (is.empty(levels)) {\n        return levels;\n    }\n\n    return dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        triggerEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (is.object(window.YT) && is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (is.string(key) && !is.empty(key)) {\n            const url = format(this.config.urls.youtube.api, videoId, key);\n\n            fetch(url)\n                .then(result => {\n                    if (is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = parseId(source);\n        const id = generateId(player.provider);\n        const container = createElement('div', { id });\n        player.media = replaceElement(container, player.media);\n\n        // Set poster image\n        const posterSrc = format => `https://img.youtube.com/vi/${videoId}/${format}default.jpg`;\n\n        // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n        loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n            .catch(() => loadImage(posterSrc('sd'), 121)) // 480p padded 4:3\n            .catch(() => loadImage(posterSrc('hq'))) // 360p padded 4:3. Always exists\n            .then(image => ui.setPoster.call(player, image.src))\n            .then(posterSrc => {\n                // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n                if (!posterSrc.includes('maxres')) {\n                    player.elements.poster.style.backgroundSize = 'cover';\n                }\n            });\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    triggerEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    triggerEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    triggerEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        assurePlaybackState.call(player, true);\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        assurePlaybackState.call(player, false);\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // If paused, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                            if (player.paused) {\n                                player.embed.mute();\n                            }\n\n                            // Set seeking state and trigger event\n                            player.media.seeking = true;\n                            triggerEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            instance.setPlaybackQuality(mapQualityUnit(input));\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            triggerEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            triggerEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    triggerEvent.call(player, player.media, 'timeupdate');\n                    triggerEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            triggerEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            triggerEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    const seeked = player.media.seeking && [\n                        1,\n                        2,\n                    ].includes(event.data);\n\n                    if (seeked) {\n                        // Unset seeking and fire seeked event\n                        player.media.seeking = false;\n                        triggerEvent.call(player, player.media, 'seeked');\n                    }\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            triggerEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            triggerEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            assurePlaybackState.call(player, false);\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                triggerEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (player.media.paused && !player.embed.hasPlayed) {\n                                player.media.pause();\n                            } else {\n                                assurePlaybackState.call(player, true);\n\n                                triggerEvent.call(player, player.media, 'playing');\n\n                                // Poll to get playback progress\n                                player.timers.playing = setInterval(() => {\n                                    triggerEvent.call(player, player.media, 'timeupdate');\n                                }, 50);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/sampotts/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (player.media.duration !== instance.getDuration()) {\n                                    player.media.duration = instance.getDuration();\n                                    triggerEvent.call(player, player.media, 'durationchange');\n                                }\n\n                                // Get quality\n                                controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n                            }\n\n                            break;\n\n                        case 2:\n                            // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (!player.muted) {\n                                player.embed.unMute();\n                            }\n                            assurePlaybackState.call(player, false);\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    triggerEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport { createElement, toggleClass, wrap } from './utils/elements';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport { createElement } from './../utils/elements';\nimport { triggerEvent } from './../utils/events';\nimport is from './../utils/is';\nimport loadScript from './../utils/loadScript';\nimport { formatTime } from './../utils/time';\nimport { buildUrlParams } from './../utils/urls';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!is.object(window.google) || !is.object(window.google.ima)) {\n                loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            triggerEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './config/types';\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport ui from './ui';\nimport { createElement, insertElement, removeElement } from './utils/elements';\nimport is from './utils/is';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (is.string(attributes)) {\n            insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (is.array(attributes)) {\n            attributes.forEach(attribute => {\n                insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.12\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport defaults from './config/defaults';\nimport { getProviderByUrl, providers, types } from './config/types';\nimport Console from './console';\nimport controls from './controls';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport ui from './ui';\nimport { closest } from './utils/arrays';\nimport { createElement, hasClass, removeElement, replaceElement, toggleClass, toggleState, wrap } from './utils/elements';\nimport { off, on, once, triggerEvent, unbindListeners } from './utils/events';\nimport is from './utils/is';\nimport loadSprite from './utils/loadSprite';\nimport { cloneDeep, extend } from './utils/objects';\nimport { parseUrl } from './utils/urls';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || is.nodeList(this.media) || is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = extend(\n            {},\n            defaults,\n            Plyr.defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: -1,\n            meta: new WeakMap(),\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (is.nullOrUndefined(this.media) || !is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (is.element(iframe)) {\n                    // Detect provider\n                    url = parseUrl(iframe.getAttribute('src'));\n                    this.provider = getProviderByUrl(url.toString());\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    if (url.searchParams.length) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(url.searchParams.get('autoplay'))) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(url.searchParams.get('loop'))) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(url.searchParams.get('playsinline'));\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        this.eventListeners = [];\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!is.element(this.elements.container)) {\n            this.elements.container = createElement('div');\n            wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            on.call(this, this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!is.function(this.media.play)) {\n            return null;\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        // Bail if media duration isn't available yet\n        if (!this.duration) {\n            return;\n        }\n\n        // Validate input\n        const inputIsValid = is.number(input) && input > 0;\n\n        // Set\n        this.media.currentTime = inputIsValid ? Math.min(input, this.duration) : 0;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // Media duration can be NaN before the media has loaded\n        const duration = (this.media || {}).duration || 0;\n\n        // If config duration is funky, use regular duration\n        return fauxDuration || duration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (is.number(input)) {\n            speed = input;\n        }\n\n        if (!is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        const config = this.config.quality;\n        const options = this.options.quality;\n\n        if (!options.length) {\n            return;\n        }\n\n        let quality = ([\n            !is.empty(input) && Number(input),\n            this.storage.get('quality'),\n            config.selected,\n            config.default,\n        ]).find(is.number);\n\n        if (!options.includes(quality)) {\n            const value = closest(options, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${value} instead`);\n            quality = value;\n        }\n\n        // Trigger request event\n        triggerEvent.call(this, this.media, 'qualityrequested', false, { quality });\n\n        // Update config\n        config.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        ui.setPoster.call(this, input);\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const active = is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Toggle state\n        toggleState(this.elements.buttons.captions, active);\n\n        // Add class hook\n        toggleClass(this.elements.container, this.config.classNames.captions.active, active);\n\n        // Update state and trigger event\n        if (active !== this.captions.active) {\n            this.captions.active = active;\n            triggerEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n        }\n    }\n\n    /**\n     * Set the caption track by index\n     * @param {number} - Caption index\n     */\n    set currentTrack(input) {\n        captions.set.call(this, input);\n    }\n\n    /**\n     * Get the current caption track index (-1 if disabled)\n     */\n    get currentTrack() {\n        const { active, currentTrack } = this.captions;\n        return active ? currentTrack : -1;\n    }\n\n    /**\n     * Set the wanted language for captions\n     * Since tracks can be added later it won't update the actual caption track until there is a matching track\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        captions.setLanguage.call(this, input);\n    }\n\n    /**\n     * Get the current track's language\n     */\n    get language() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} [toggle] - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n            // Get state before change\n            const isHidden = hasClass(this.elements.container, this.config.classNames.hideControls);\n\n            // Negate the argument if not undefined since adding the class to hides the controls\n            const force = typeof toggle === 'undefined' ? undefined : !toggle;\n\n            // Apply and get updated state\n            const hiding = toggleClass(this.elements.container, this.config.classNames.hideControls, force);\n\n            // Close menu\n            if (hiding && this.config.controls.includes('settings') && !is.empty(this.config.settings)) {\n                controls.toggleMenu.call(this, false);\n            }\n            // Trigger event on change\n            if (hiding !== isHidden) {\n                const eventName = hiding ? 'controlshidden' : 'controlsshown';\n                triggerEvent.call(this, this.media, eventName);\n            }\n            return !hiding;\n        }\n        return false;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        on.call(this, this.elements.container, event, callback);\n    }\n    /**\n     * Add event listeners once\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    once(event, callback) {\n        once(this.elements.container, event, callback);\n    }\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    removeElement(this.elements.buttons.play);\n                    removeElement(this.elements.captions);\n                    removeElement(this.elements.controls);\n                    removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                unbindListeners.call(this);\n\n                // Replace the container with the original element provided\n                replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                triggerEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (is.array(selector)) {\n            targets = selector.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nPlyr.defaults = cloneDeep(defaults);\n\nexport default Plyr;\n"]}