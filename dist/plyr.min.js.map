{"version":3,"sources":["utils/is.js","utils/events.js","utils/elements.js","utils/animation.js","utils/browser.js","support.js","utils/arrays.js","html5.js","utils/objects.js","utils/strings.js","i18n.js","storage.js","utils/time.js","controls.js","utils/loadSprite.js","utils/fetch.js","utils/urls.js","captions.js","config/defaults.js","config/types.js","console.js","fullscreen.js","utils/loadImage.js","ui.js","listeners.js","../../node_modules/loadjs/dist/loadjs.umd.js","utils/loadScript.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","plyr.js"],"names":["getConstructor","input","constructor","instanceOf","Boolean","is","Object","Number","isNaN","String","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","window","TextTrackCue","VTTCue","TextTrack","string","kind","test","array","nodeList","length","object","keys","supportsPassiveListeners","supported","options","defineProperty","addEventListener","removeEventListener","e","toggleListener","elements","event","callback","toggle","arguments","undefined","passive","capture","empty","function","from","forEach","element","Node","call","events","split","type","on","off","trigger","bubbles","detail","CustomEvent","assign","this","dispatchEvent","wrap","wrapper","targets","reverse","index","child","cloneNode","parent","parentNode","sibling","nextSibling","appendChild","insertBefore","setAttributes","attributes","entries","_ref","key","_ref2","value","setAttribute","createElement","text","document","innerText","insertElement","removeElement","removeChild","emptyElement","childNodes","lastChild","replaceElement","newChild","oldChild","replaceChild","getAttributesFromSelector","sel","existingAttributes","existing","s","selector","trim","className","replace","parts","charAt","class","id","toggleHidden","hidden","hide","boolean","hasAttribute","removeAttribute","toggleClass","force","method","classList","contains","hasClass","matches","prototype","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","querySelectorAll","includes","getElements","container","getElement","querySelector","getFocusElement","focused","activeElement","body","toggleState","target","pressed","getAttribute","state","transitionEndEvent","find","style","range","browser","documentMode","documentElement","navigator","userAgent","platform","support","provider","playsinline","api","ui","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","matchMedia","dedupe","filter","item","indexOf","html5","sources","getSources","sizes","source","map","player","mime","currentTime","playing","src","onLoadedMetaData","load","play","config","blankVideo","debug","log","extend","_len","_key","shift","concat","format","args","toString","match","i","replaceAll","RegExp","toTitleCase","toUpperCase","substr","toLowerCase","toCamelCase","toPascalCase","slice","getHTML","innerHTML","i18n","reduce","obj","seekTime","title","Storage","enabled","storage","store","localStorage","getItem","json","JSON","parse","get","setItem","stringify","removeItem","getHours","parseInt","getMinutes","getSeconds","formatTime","time","displayHours","inverted","number","hours","mins","secs","controls","cors","URL","iconUrl","location","host","isIE","svg4everybody","selectors","buttons","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","seekTooltip","classNames","tooltip","error","warn","toggleNativeControls","getIconUrl","iconPath","url","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","badge","menu","buttonType","button","label","labelPressed","iconPressed","control","createIcon","createLabel","push","updateRangeFill","suffix","list","_ref$badge","checked","_ref$checked","radio","faux","insertAdjacentHTML","forceHours","setRange","muted","current","max","toFixed","_this","getElementsByTagName","nodeValue","buffered","isWebkit","setProperty","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","_this2","touch","width","pageX","left","parseFloat","updateTimeDisplay","invert","invertTime","seeking","updateProgress","hasDuration","displayDuration","paused","updateSeekTooltip","setting","tabs","panes","quality","_this3","toggleTab","checkMenu","sort","a","b","sorting","createMenuItem","getLabel","createBadge","getBadge","updateSetting","pane","currentTrack","default","tracks","getTracks","track","_this4","active","language","unshift","bind","speed","isVimeo","_this5","values","some","tab","form","show","isMenuItem","isButton","stopPropagation","open","clone","position","opacity","name","scrollWidth","height","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","focus","data","createButton","createRange","createProgress","createTime","inner","home","_this6","back","setQualityMenu","getQualityOptions","setSpeedMenu","loadSprite","hasId","exists","update","insertAdjacentElement","useStorage","cached","prefix","content","then","result","catch","Math","floor","random","props","create","_ref3","findElements","offsetHeight","labels","join","_this7","fetch","responseType","Promise","resolve","reject","request","XMLHttpRequest","responseText","response","Error","statusText","send","parseUrl","parser","href","buildUrlParams","params","URLSearchParams","set","isYouTube","textTracks","setCaptionsMenu","hostname","protocol","blob","createObjectURL","userLanguage","setLanguage","trackEvents","_captions","meta","mode","updateCues","trackRemoved","currentTrackNode","firstMatch","getCurrentTrack","embed","enableTextTrack","toggleCaptions","has","fromLanguage","sortIsDefault","sorted","cues","activeCues","cue","getCueAsHTML","cueText","caption","defaults","providers","types","noop","Console","console","onChange","isIos","focusable","first","last","trap","keyCode","shiftKey","preventDefault","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","x","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","loadImage","minWidth","image","Image","handler","onload","onerror","naturalWidth","uiSupported","listeners","inject","setup","loop","updateVolume","timeUpdate","checkPlaying","isTouch","ready","setTitle","poster","backgroundImage","setPoster","durationUpdate","isEmbed","iframe","enable","posterEnabled","loadPromise","togglePoster","stopped","toggleControls","loading","timers","setTimeout","hideControls","hover","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","keyboard","global","tabFocus","delay","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","_event$detail","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","currentTarget","eventType","done","seekTo","toggleInvert","_player","noTransition","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","splice","executeCallbacks","depsNotFound","success","loadFile","callbackFn","numTries","isCss","doc","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","rel","onbeforeload","ev","sheet","cssText","defaultPrevented","head","loadjs","paths","arg1","arg2","fn","numWaiting","loadFiles","deps","bundleIds","r","subscribe","reset","isDefined","module","exports","loadScript","assurePlaybackState","hasPlayed","vimeo","setAspectRatio","Vimeo","urls","sdk","ratio","padding","paddingBottom","offset","transform","autoplay","$2","embedContainer","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","restorePause","setVolume","setCurrentTime","selected","setPlaybackRate","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getRatio","w","h","getAspectRatio","setAutopause","getVideoTitle","getCurrentTime","getDuration","getTextTracks","strippedCues","_ref$cues","fragment","createDocumentFragment","firstChild","getPaused","seconds","build","mapQualityUnit","youtube","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","startsWith","posterSrc","format$$1","backgroundSize","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","unMute","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","apply","_this11","base","Date","now","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Plyr","failed","jQuery","plyr","original","tagName","getProviderByUrl","searchParams","truthy","step","webkitShowPlaybackTargetPicker","isHidden","hiding","eventName","soft","clear","unload","inputIsValid","min","end","fauxDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","prev","curr","abs","closest","change","states","webkitPresentationMode","inline","t"],"mappings":"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BwN,EAAU1Y,EAAc,OAAQc,EAA0BrC,KAAKgI,OAAO+D,UAAUkO,YAC9EzQ,UAAYyM,OACf1X,SAASkO,SAAS5L,YAAYoZ,KAG3B5a,KAAKW,KAAMA,KAAKwG,MAAO,wBA1B1B0B,MAAMoF,KAAK,4BAA6BrR,aANxCiM,MAAMoF,KAAK,sCCtPtB4M,aAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,cAGF,sBAGQ,cAGR,aACA,eACH,iDAGG,wDAIC,aAEL,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACE,eAGF,wBAKC,YACC,aACC,qBAKF,MACJ,kBAKL,+BAMA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,0BACF,aACC,oBACM,2BACP,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,eACC,iBACC,eACH,aACC,YACF,UACA,YACE,iBACG,mBACD,wBACM,wBAEL,UACA,UACA,SACD,SACA,SACA,wBAOA,gDACG,6CACH,wDAGA,yCACA,wHAGA,uEAMH,UACA,WACC,aACE,YACD,iBACK,UACP,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,mCACK,kCACP,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\n\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst is = {\n    object(input) {\n        return getConstructor(input) === Object;\n    },\n    number(input) {\n        return getConstructor(input) === Number && !Number.isNaN(input);\n    },\n    string(input) {\n        return getConstructor(input) === String;\n    },\n    boolean(input) {\n        return getConstructor(input) === Boolean;\n    },\n    function(input) {\n        return getConstructor(input) === Function;\n    },\n    array(input) {\n        return !is.nullOrUndefined(input) && Array.isArray(input);\n    },\n    weakMap(input) {\n        return instanceOf(input, WeakMap);\n    },\n    nodeList(input) {\n        return instanceOf(input, NodeList);\n    },\n    element(input) {\n        return instanceOf(input, Element);\n    },\n    textNode(input) {\n        return getConstructor(input) === Text;\n    },\n    event(input) {\n        return instanceOf(input, Event);\n    },\n    cue(input) {\n        return instanceOf(input, window.TextTrackCue) || instanceOf(input, window.VTTCue);\n    },\n    track(input) {\n        return instanceOf(input, TextTrack) || (!is.nullOrUndefined(input) && is.string(input.kind));\n    },\n    url(input) {\n        return !is.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n    },\n    nullOrUndefined(input) {\n        return input === null || typeof input === 'undefined';\n    },\n    empty(input) {\n        return (\n            is.nullOrUndefined(input) ||\n            ((is.string(input) || is.array(input) || is.nodeList(input)) && !input.length) ||\n            (is.object(input) && !Object.keys(input).length)\n        );\n    },\n};\n\nexport default is;\n","// ==========================================================================\n// Event utils\n// ==========================================================================\n\nimport is from './is';\n\n// Check for passive event listener support\n// https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n// https://www.youtube.com/watch?v=NPM6172J22g\nconst supportsPassiveListeners = (() => {\n    // Test via a getter in the options object to see if the passive property is accessed\n    let supported = false;\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get() {\n                supported = true;\n                return null;\n            },\n        });\n        window.addEventListener('test', null, options);\n        window.removeEventListener('test', null, options);\n    } catch (e) {\n        // Do nothing\n    }\n\n    return supported;\n})();\n\n// Toggle event listener\nexport function toggleListener(elements, event, callback, toggle = false, passive = true, capture = false) {\n    // Bail if no elemetns, event, or callback\n    if (is.empty(elements) || is.empty(event) || !is.function(callback)) {\n        return;\n    }\n\n    // If a nodelist is passed, call itself on each node\n    if (is.nodeList(elements) || is.array(elements)) {\n        // Create listener for each node\n        Array.from(elements).forEach(element => {\n            if (element instanceof Node) {\n                toggleListener.call(null, element, event, callback, toggle, passive, capture);\n            }\n        });\n\n        return;\n    }\n\n    // Allow multiple events\n    const events = event.split(' ');\n\n    // Build options\n    // Default to just the capture boolean for browsers with no passive listener support\n    let options = capture;\n\n    // If passive events listeners are supported\n    if (supportsPassiveListeners) {\n        options = {\n            // Whether the listener can be passive (i.e. default never prevented)\n            passive,\n            // Whether the listener is a capturing listener or not\n            capture,\n        };\n    }\n\n    // If a single node is passed, bind the event listener\n    events.forEach(type => {\n        elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n    });\n}\n\n// Bind event handler\nexport function on(element, events = '', callback, passive = true, capture = false) {\n    toggleListener(element, events, callback, true, passive, capture);\n}\n\n// Unbind event handler\nexport function off(element, events = '', callback, passive = true, capture = false) {\n    toggleListener(element, events, callback, false, passive, capture);\n}\n\n// Trigger event\nexport function trigger(element, type = '', bubbles = false, detail = {}) {\n    // Bail if no element\n    if (!is.element(element) || is.empty(type)) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new CustomEvent(type, {\n        bubbles,\n        detail: Object.assign({}, detail, {\n            plyr: this,\n        }),\n    });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n","// ==========================================================================\n// Element utils\n// ==========================================================================\n\nimport { off, on } from './events';\nimport is from './is';\n\n// Wrap an element\nexport function wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    const targets = elements.length ? elements : [elements];\n\n    // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n    Array.from(targets)\n        .reverse()\n        .forEach((element, index) => {\n            const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n            // Cache the current parent and sibling.\n            const parent = element.parentNode;\n            const sibling = element.nextSibling;\n\n            // Wrap the element (is automatically removed from its current\n            // parent).\n            child.appendChild(element);\n\n            // If the element had a sibling, insert the wrapper before\n            // the sibling to maintain the HTML structure; otherwise, just\n            // append it to the parent.\n            if (sibling) {\n                parent.insertBefore(child, sibling);\n            } else {\n                parent.appendChild(child);\n            }\n        });\n}\n\n// Set attributes\nexport function setAttributes(element, attributes) {\n    if (!is.element(element) || is.empty(attributes)) {\n        return;\n    }\n\n    Object.entries(attributes).forEach(([\n        key,\n        value,\n    ]) => {\n        element.setAttribute(key, value);\n    });\n}\n\n// Create a DocumentFragment\nexport function createElement(type, attributes, text) {\n    // Create a new <element>\n    const element = document.createElement(type);\n\n    // Set all passed attributes\n    if (is.object(attributes)) {\n        setAttributes(element, attributes);\n    }\n\n    // Add text node\n    if (is.string(text)) {\n        element.innerText = text;\n    }\n\n    // Return built element\n    return element;\n}\n\n// Inaert an element after another\nexport function insertAfter(element, target) {\n    target.parentNode.insertBefore(element, target.nextSibling);\n}\n\n// Insert a DocumentFragment\nexport function insertElement(type, parent, attributes, text) {\n    // Inject the new <element>\n    parent.appendChild(createElement(type, attributes, text));\n}\n\n// Remove element(s)\nexport function removeElement(element) {\n    if (is.nodeList(element) || is.array(element)) {\n        Array.from(element).forEach(removeElement);\n        return;\n    }\n\n    if (!is.element(element) || !is.element(element.parentNode)) {\n        return;\n    }\n\n    element.parentNode.removeChild(element);\n}\n\n// Remove all child elements\nexport function emptyElement(element) {\n    let { length } = element.childNodes;\n\n    while (length > 0) {\n        element.removeChild(element.lastChild);\n        length -= 1;\n    }\n}\n\n// Replace element\nexport function replaceElement(newChild, oldChild) {\n    if (!is.element(oldChild) || !is.element(oldChild.parentNode) || !is.element(newChild)) {\n        return null;\n    }\n\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n\n    return newChild;\n}\n\n// Get an attribute object from a string selector\nexport function getAttributesFromSelector(sel, existingAttributes) {\n    // For example:\n    // '.test' to { class: 'test' }\n    // '#test' to { id: 'test' }\n    // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n    if (!is.string(sel) || is.empty(sel)) {\n        return {};\n    }\n\n    const attributes = {};\n    const existing = existingAttributes;\n\n    sel.split(',').forEach(s => {\n        // Remove whitespace\n        const selector = s.trim();\n        const className = selector.replace('.', '');\n        const stripped = selector.replace(/[[\\]]/g, '');\n\n        // Get the parts and value\n        const parts = stripped.split('=');\n        const key = parts[0];\n        const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n        // Get the first character\n        const start = selector.charAt(0);\n\n        switch (start) {\n            case '.':\n                // Add to existing classname\n                if (is.object(existing) && is.string(existing.class)) {\n                    existing.class += ` ${className}`;\n                }\n\n                attributes.class = className;\n                break;\n\n            case '#':\n                // ID selector\n                attributes.id = selector.replace('#', '');\n                break;\n\n            case '[':\n                // Attribute selector\n                attributes[key] = value;\n\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    return attributes;\n}\n\n// Toggle hidden\nexport function toggleHidden(element, hidden) {\n    if (!is.element(element)) {\n        return;\n    }\n\n    let hide = hidden;\n\n    if (!is.boolean(hide)) {\n        hide = !element.hasAttribute('hidden');\n    }\n\n    if (hide) {\n        element.setAttribute('hidden', '');\n    } else {\n        element.removeAttribute('hidden');\n    }\n}\n\n// Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\nexport function toggleClass(element, className, force) {\n    if (is.element(element)) {\n        let method = 'toggle';\n        if (typeof force !== 'undefined') {\n            method = force ? 'add' : 'remove';\n        }\n\n        element.classList[method](className);\n        return element.classList.contains(className);\n    }\n\n    return null;\n}\n\n// Has class name\nexport function hasClass(element, className) {\n    return is.element(element) && element.classList.contains(className);\n}\n\n// Element matches selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n    return matches.call(element, selector);\n}\n\n// Find all elements\nexport function getElements(selector) {\n    return this.elements.container.querySelectorAll(selector);\n}\n\n// Find a single element\nexport function getElement(selector) {\n    return this.elements.container.querySelector(selector);\n}\n\n// Get the focused element\nexport function getFocusElement() {\n    let focused = document.activeElement;\n\n    if (!focused || focused === document.body) {\n        focused = null;\n    } else {\n        focused = document.querySelector(':focus');\n    }\n\n    return focused;\n}\n\n// Trap focus inside container\nexport function trapFocus(element = null, toggle = false) {\n    if (!is.element(element)) {\n        return;\n    }\n\n    const focusable = getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n    const first = focusable[0];\n    const last = focusable[focusable.length - 1];\n\n    const trap = event => {\n        // Bail if not tab key or not fullscreen\n        if (event.key !== 'Tab' || event.keyCode !== 9) {\n            return;\n        }\n\n        // Get the current focused element\n        const focused = getFocusElement();\n\n        if (focused === last && !event.shiftKey) {\n            // Move focus to first element that can be tabbed if Shift isn't used\n            first.focus();\n            event.preventDefault();\n        } else if (focused === first && event.shiftKey) {\n            // Move focus to last element that can be tabbed if Shift is used\n            last.focus();\n            event.preventDefault();\n        }\n    };\n\n    if (toggle) {\n        on(this.elements.container, 'keydown', trap, false);\n    } else {\n        off(this.elements.container, 'keydown', trap, false);\n    }\n}\n\n// Toggle aria-pressed state on a toggle button\n// http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\nexport function toggleState(element, input) {\n    // If multiple elements passed\n    if (is.array(element) || is.nodeList(element)) {\n        Array.from(element).forEach(target => toggleState(target, input));\n        return;\n    }\n\n    // Bail if no target\n    if (!is.element(element)) {\n        return;\n    }\n\n    // Get state\n    const pressed = element.getAttribute('aria-pressed') === 'true';\n    const state = is.boolean(input) ? input : !pressed;\n\n    // Set the attribute on target\n    element.setAttribute('aria-pressed', state);\n}\n","// ==========================================================================\n// Animation utils\n// ==========================================================================\n\nimport { toggleHidden } from './elements';\nimport is from './is';\n\nexport const transitionEndEvent = (() => {\n    const element = document.createElement('span');\n\n    const events = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend',\n    };\n\n    const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n    return is.string(type) ? events[type] : false;\n})();\n\n// Force repaint of element\nexport function repaint(element) {\n    setTimeout(() => {\n        toggleHidden(element, true);\n        element.offsetHeight; // eslint-disable-line\n        toggleHidden(element, false);\n    }, 0);\n}\n","// ==========================================================================\n// Browser sniffing\n// Unfortunately, due to mixed support, UA sniffing is required\n// ==========================================================================\n\nconst browser = {\n    isIE: /* @cc_on!@ */ false || !!document.documentMode,\n    isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n    isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n    isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n};\n\nexport default browser;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport { transitionEndEvent } from './utils/animation';\nimport browser from './utils/browser';\nimport { createElement } from './utils/elements';\nimport is from './utils/is';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => !browser.isIPhone && is.function(createElement('video').webkitSetPresentationMode))(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n// Remove duplicates in an array\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Get the closest value in an array\nexport function closest(array, value) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n}\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport { dedupe } from './utils/arrays';\nimport { removeElement } from './utils/elements';\nimport { trigger } from './utils/events';\nimport is from './utils/is';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        return this.media.querySelectorAll('source');\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        // Get sources\n        const sources = html5.getSources.call(this);\n\n        if (is.empty(sources)) {\n            return null;\n        }\n\n        // Get <source> with size attribute\n        const sizes = Array.from(sources).filter(source => !is.empty(source.getAttribute('size')));\n\n        // If none, bail\n        if (is.empty(sizes)) {\n            return null;\n        }\n\n        // Reduce to unique list\n        return dedupe(sizes.map(source => Number(source.getAttribute('size'))));\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (is.empty(sources)) {\n                    return null;\n                }\n\n                const matches = Array.from(sources).filter(source => source.getAttribute('src') === player.source);\n\n                if (is.empty(matches)) {\n                    return null;\n                }\n\n                return Number(matches[0].getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (is.empty(sources)) {\n                    return;\n                }\n\n                // Get matches for requested size\n                const matches = Array.from(sources).filter(source => Number(source.getAttribute('size')) === input);\n\n                // No matches for requested size\n                if (is.empty(matches)) {\n                    return;\n                }\n\n                // Get supported sources\n                const supported = matches.filter(source => support.mime.call(player, source.getAttribute('type')));\n\n                // No supported sources\n                if (is.empty(supported)) {\n                    return;\n                }\n\n                // Trigger change event\n                trigger.call(player, player.media, 'qualityrequested', false, {\n                    quality: input,\n                });\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = supported[0].getAttribute('src');\n\n                // Restore time\n                const onLoadedMetaData = () => {\n                    player.currentTime = currentTime;\n                    player.off('loadedmetadata', onLoadedMetaData);\n                };\n                player.on('loadedmetadata', onLoadedMetaData);\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Trigger change event\n                trigger.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        removeElement(html5.getSources());\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Object utils\n// ==========================================================================\n\nimport is from './is';\n\n// Clone nested objects\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n// Get a nested value in an object\nexport function getDeep(object, path) {\n    return path.split('.').reduce((obj, key) => obj && obj[key], object);\n}\n\n// Deep extend destination object with N more objects\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\nimport is from './is';\n\n// Generate a random ID\nexport function generateId(prefix) {\n    return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n}\n\n// Format string\nexport function format(input, ...args) {\n    if (is.empty(input)) {\n        return input;\n    }\n\n    return input.toString().replace(/{(\\d+)}/g, (match, i) => (is.string(args[i]) ? args[i] : ''));\n}\n\n// Get percentage\nexport function getPercentage(current, max) {\n    if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n        return 0;\n    }\n\n    return (current / max * 100).toFixed(2);\n}\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n// Remove HTML from a string\nexport function stripHTML(source) {\n    const fragment = document.createDocumentFragment();\n    const element = document.createElement('div');\n    fragment.appendChild(element);\n    element.innerHTML = source;\n    return fragment.firstChild.innerText;\n}\n\n// Like outerHTML, but also works for DocumentFragment\nexport function getHTML(element) {\n    const wrapper = document.createElement('div');\n    wrapper.appendChild(element);\n    return wrapper.innerHTML;\n}\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport is from './utils/is';\nimport { getDeep } from './utils/objects';\nimport { replaceAll } from './utils/strings';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (is.empty(key) || is.empty(config)) {\n            return '';\n        }\n\n        let string = getDeep(config.i18n, key);\n\n        if (is.empty(string)) {\n            return '';\n        }\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport is from './utils/is';\nimport { extend } from './utils/objects';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Time utils\n// ==========================================================================\n\nimport is from './is';\n\n// Time helpers\nexport const getHours = value => parseInt((value / 60 / 60) % 60, 10);\nexport const getMinutes = value => parseInt((value / 60) % 60, 10);\nexport const getSeconds = value => parseInt(value % 60, 10);\n\n// Format time to UI friendly string\nexport function formatTime(time = 0, displayHours = false, inverted = false) {\n    // Bail if the value isn't a number\n    if (!is.number(time)) {\n        return formatTime(null, displayHours, inverted);\n    }\n\n    // Format time component to add leading zero\n    const format = value => `0${value}`.slice(-2);\n\n    // Breakdown to hours, mins, secs\n    let hours = getHours(time);\n    const mins = getMinutes(time);\n    const secs = getSeconds(time);\n\n    // Do we need to display hours?\n    if (displayHours || hours > 0) {\n        hours = `${hours}:`;\n    } else {\n        hours = '';\n    }\n\n    // Render\n    return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n}\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport { repaint, transitionEndEvent } from './utils/animation';\nimport browser from './utils/browser';\nimport { createElement, emptyElement, getAttributesFromSelector, getElement, getElements, hasClass, removeElement, setAttributes, toggleClass, toggleHidden, toggleState } from './utils/elements';\nimport { off, on } from './utils/events';\nimport is from './utils/is';\nimport loadSprite from './utils/loadSprite';\nimport { extend } from './utils/objects';\nimport { getPercentage, replaceAll, toCamelCase, toTitleCase } from './utils/strings';\nimport { formatTime, getHours } from './utils/time';\n\nconst controls = {\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: getElements.call(this, this.config.selectors.buttons.play),\n                pause: getElement.call(this, this.config.selectors.buttons.pause),\n                restart: getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: getElement.call(this, this.config.selectors.buttons.mute),\n                pip: getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: getElement.call(this, this.config.selectors.buttons.settings),\n                captions: getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: getElement.call(this, this.config.selectors.inputs.seek),\n                volume: getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: getElement.call(this, this.config.selectors.display.currentTime),\n                duration: getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        setAttributes(\n            icon,\n            extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (is.empty(text)) {\n            return null;\n        }\n\n        const badge = createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        extend(attributes, getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = createElement(\n            'label',\n            {\n                for: attributes.id,\n                id: `${attributes.id}-label`,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = createElement(\n            'input',\n            extend(\n                getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-labelledby': `${attributes.id}-label`,\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = createElement(\n            'progress',\n            extend(\n                getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.innerText = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = createElement(\n            'div',\n            extend(attributes, {\n                class: `plyr__time ${attributes.class}`,\n                'aria-label': i18n.get(type, this.config),\n            }),\n            '00:00',\n        );\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem({ value, list, type, title, badge = null, checked = false }) {\n        const item = createElement('li');\n\n        const label = createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = createElement(\n            'input',\n            extend(getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!is.element(target) || !is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.innerText = formatTime(time, forceHours, inverted);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (is.element(this.elements.inputs.volume)) {\n            controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (is.element(this.elements.buttons.mute)) {\n            toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        const setProgress = (target, input) => {\n            const value = is.number(input) ? input : 0;\n            const progress = is.element(target) ? target : this.elements.display.buffer;\n\n            // Update value and label\n            if (is.element(progress)) {\n                progress.value = value;\n\n                // Update text label inside\n                const label = progress.getElementsByTagName('span')[0];\n                if (is.element(label)) {\n                    label.childNodes[0].nodeValue = value;\n                }\n            }\n        };\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                case 'seeked':\n                    value = getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        controls.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    setProgress(this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria value for https://github.com/sampotts/plyr/issues/905\n        range.setAttribute('aria-valuenow', range.value);\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (!this.config.tooltips.seek || !is.element(this.elements.inputs.seek) || !is.element(this.elements.display.seekTooltip) || this.duration === 0) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.progress.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        controls.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate() {\n        // Bail if no ui or durationchange event triggered after playing/seek when invertTime is false\n        if (!this.supported.ui || (!this.config.invertTime && this.currentTime)) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    // TODO: Vimeo support\n    setQualityMenu(options) {\n        // Menu required\n        if (!is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            const label = i18n.get(`qualityBadge.${quality}`, this.config);\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                controls.createMenuItem.call(this, {\n                    value: quality,\n                    list,\n                    type,\n                    title: controls.getLabel.call(this, 'quality', quality),\n                    badge: getBadge(quality),\n                });\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (is.number(value)) {\n                    const label = i18n.get(`qualityLabel.${value}`, this.config);\n\n                    if (!label.length) {\n                        return `${value}p`;\n                    }\n\n                    return label;\n                }\n\n                return toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.currentTrack;\n                break;\n\n            default:\n                value = !is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        toggleHidden(this.elements.settings.tabs.loop, false);\n        toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        emptyElement(list);\n\n        options.forEach(option => {\n            const item = createElement('li');\n\n            const button = createElement(\n                'button',\n                extend(getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n        const tracks = captions.getTracks.call(this);\n\n        // Toggle the pane and tab\n        controls.toggleTab.call(this, type, tracks.length);\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!tracks.length) {\n            return;\n        }\n\n        // Generate options data\n        const options = tracks.map((track, value) => ({\n            value,\n            checked: this.captions.active && this.currentTrack === value,\n            title: captions.getLabel.call(this, track),\n            badge: track.language && controls.createBadge.call(this, track.language.toUpperCase()),\n            list,\n            type: 'language',\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        options.unshift({\n            value: -1,\n            checked: !this.captions.active,\n            title: i18n.get('disabled', this.config),\n            list,\n            type: 'language',\n        });\n\n        // Generate options\n        options.forEach(controls.createMenuItem.bind(this));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            controls.createMenuItem.call(this, {\n                value: speed,\n                list,\n                type,\n                title: controls.getLabel.call(this, 'speed', speed),\n            });\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!is.element(form) || !is.element(button)) {\n            return;\n        }\n\n        const show = is.boolean(event) ? event : is.element(form) && form.hasAttribute('hidden');\n\n        if (is.event(event)) {\n            const isMenuItem = is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (is.element(form)) {\n            toggleHidden(form, !show);\n            toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                off(container, transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            on(container, transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        toggleHidden(pane, false);\n\n        const tabs = getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = createElement('div', getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = createElement('div', getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = createElement(\n                    'span',\n                    {\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !is.empty(this.config.settings)) {\n            const menu = createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = createElement('div');\n\n            const home = createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = createElement(\n                    'button',\n                    extend(getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (is.string(this.config.controls) || is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                toggleClass(label, this.config.classNames.hidden, false);\n                toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Sprite loader\n// ==========================================================================\n\nimport Storage from './../storage';\nimport is from './is';\n\n// Load an external SVG sprite\nexport default function loadSprite(url, id) {\n    if (!is.string(url)) {\n        return;\n    }\n\n    const prefix = 'cache';\n    const hasId = is.string(id);\n    let isCached = false;\n\n    const exists = () => document.getElementById(id) !== null;\n\n    const update = (container, data) => {\n        container.innerHTML = data;\n\n        // Check again incase of race condition\n        if (hasId && exists()) {\n            return;\n        }\n\n        // Inject the SVG to the body\n        document.body.insertAdjacentElement('afterbegin', container);\n    };\n\n    // Only load once if ID set\n    if (!hasId || !exists()) {\n        const useStorage = Storage.supported;\n\n        // Create container\n        const container = document.createElement('div');\n        container.setAttribute('hidden', '');\n\n        if (hasId) {\n            container.setAttribute('id', id);\n        }\n\n        // Check in cache\n        if (useStorage) {\n            const cached = window.localStorage.getItem(`${prefix}-${id}`);\n            isCached = cached !== null;\n\n            if (isCached) {\n                const data = JSON.parse(cached);\n                update(container, data.content);\n            }\n        }\n\n        // Get the sprite\n        fetch(url)\n            .then(result => {\n                if (is.empty(result)) {\n                    return;\n                }\n\n                if (useStorage) {\n                    window.localStorage.setItem(\n                        `${prefix}-${id}`,\n                        JSON.stringify({\n                            content: result,\n                        }),\n                    );\n                }\n\n                update(container, result);\n            })\n            .catch(() => {});\n    }\n}\n","// ==========================================================================\n// Fetch wrapper\n// Using XHR to avoid issues with older browsers\n// ==========================================================================\n\nexport default function fetch(url, responseType = 'text') {\n    return new Promise((resolve, reject) => {\n        try {\n            const request = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in request)) {\n                return;\n            }\n\n            request.addEventListener('load', () => {\n                if (responseType === 'text') {\n                    try {\n                        resolve(JSON.parse(request.responseText));\n                    } catch (e) {\n                        resolve(request.responseText);\n                    }\n                } else {\n                    resolve(request.response);\n                }\n            });\n\n            request.addEventListener('error', () => {\n                throw new Error(request.statusText);\n            });\n\n            request.open('GET', url, true);\n\n            // Set the required response type\n            request.responseType = responseType;\n\n            request.send();\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n","// ==========================================================================\n// URL utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Parse a string to a URL object\n * @param {string} input - the URL to be parsed\n * @param {boolean} safe - failsafe parsing\n */\nexport function parseUrl(input, safe = true) {\n    let url = input;\n\n    if (safe) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        url = parser.href;\n    }\n\n    try {\n        return new URL(url);\n    } catch (e) {\n        return null;\n    }\n}\n\n// Convert object to URLSearchParams\nexport function buildUrlParams(input) {\n    if (!is.object(input)) {\n        return '';\n    }\n\n    const params = new URLSearchParams();\n\n    Object.entries(input).forEach(([\n        key,\n        value,\n    ]) => {\n        params.set(key, value);\n    });\n\n    return params;\n}\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport browser from './utils/browser';\nimport { createElement, emptyElement, getAttributesFromSelector, insertAfter, removeElement, toggleClass } from './utils/elements';\nimport { on, trigger } from './utils/events';\nimport fetch from './utils/fetch';\nimport is from './utils/is';\nimport { getHTML } from './utils/strings';\nimport { parseUrl } from './utils/urls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!is.element(this.elements.captions)) {\n            this.elements.captions = createElement('div', getAttributesFromSelector(this.config.selectors.captions));\n\n            insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const url = parseUrl(src);\n\n                if (url !== null && url.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(url.protocol)) {\n                    fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!is.boolean(active)) {\n            ({ active } = this.config.captions);\n        }\n\n        // Get language from storage, fallback to config\n        let language = this.storage.get('language') || this.config.captions.language;\n        if (language === 'auto') {\n            [language] = (navigator.language || navigator.userLanguage).split('-');\n        }\n        // Set language and show if active\n        captions.setLanguage.call(this, language, active);\n\n        // Watch changes to textTracks and update captions menu\n        if (this.isHTML5) {\n            const trackEvents = this.config.captions.update ? 'addtrack removetrack' : 'removetrack';\n            on(this.media.textTracks, trackEvents, captions.update.bind(this));\n        }\n\n        // Update available languages in list next tick (the event must not be triggered before the listeners)\n        setTimeout(captions.update.bind(this), 0);\n    },\n\n    update() {\n        const tracks = captions.getTracks.call(this, true);\n        // Get the wanted language\n        const { language, meta } = this.captions;\n\n        // Handle tracks (add event listener and \"pseudo\"-default)\n        if (this.isHTML5 && this.isVideo) {\n            tracks.filter(track => !meta.get(track)).forEach(track => {\n                this.debug.log('Track added', track);\n                // Attempt to store if the original dom element was \"default\"\n                meta.set(track, {\n                    default: track.mode === 'showing',\n                });\n\n                // Turn off native caption rendering to avoid double captions\n                track.mode = 'hidden';\n\n                // Add event listener for cue changes\n                on(track, 'cuechange', () => captions.updateCues.call(this));\n            });\n        }\n\n        const trackRemoved = !tracks.find(track => track === this.captions.currentTrackNode);\n        const firstMatch = this.language !== language && tracks.find(track => track.language === language);\n\n        // Update language if removed or first matching track added\n        if (trackRemoved || firstMatch) {\n            captions.setLanguage.call(this, language, this.config.captions.active);\n        }\n\n        // Enable or disable captions based on track length\n        toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is.empty(tracks));\n\n        // Update available languages in list\n        if ((this.config.controls || []).includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    set(index, setLanguage = true, show = true) {\n        const tracks = captions.getTracks.call(this);\n\n        // Disable captions if setting to -1\n        if (index === -1) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        if (!is.number(index)) {\n            this.debug.warn('Invalid caption argument', index);\n            return;\n        }\n\n        if (!(index in tracks)) {\n            this.debug.warn('Track not found', index);\n            return;\n        }\n\n        if (this.captions.currentTrack !== index) {\n            this.captions.currentTrack = index;\n            const track = captions.getCurrentTrack.call(this);\n            const { language } = track || {};\n\n            // Store reference to node for invalidation on remove\n            this.captions.currentTrackNode = track;\n\n            // Prevent setting language in some cases, since it can violate user's intentions\n            if (setLanguage) {\n                this.captions.language = language;\n            }\n\n            // Handle Vimeo captions\n            if (this.isVimeo) {\n                this.embed.enableTextTrack(language);\n            }\n\n            // Trigger event\n            trigger.call(this, this.media, 'languagechange');\n        }\n\n        if (this.isHTML5 && this.isVideo) {\n            // If we change the active track while a cue is already displayed we need to update it\n            captions.updateCues.call(this);\n        }\n\n        // Show captions\n        if (show) {\n            this.toggleCaptions(true);\n        }\n    },\n\n    setLanguage(language, show = true) {\n        if (!is.string(language)) {\n            this.debug.warn('Invalid language argument', language);\n            return;\n        }\n        // Normalize\n        this.captions.language = language.toLowerCase();\n\n        // Set currentTrack\n        const tracks = captions.getTracks.call(this);\n        const track = captions.getCurrentTrack.call(this, true);\n        captions.set.call(this, tracks.indexOf(track), false, show);\n    },\n\n    // Get current valid caption tracks\n    // If update is false it will also ignore tracks without metadata\n    // This is used to \"freeze\" the language options when captions.update is false\n    getTracks(update = false) {\n        // Handle media or textTracks missing or null\n        const tracks = Array.from((this.media || {}).textTracks || []);\n        // For HTML5, use cache instead of current tracks when it exists (if captions.update is false)\n        // Filter out removed tracks and tracks that aren't captions/subtitles (for example metadata)\n        return tracks.filter(track => !this.isHTML5 || update || this.captions.meta.has(track)).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack(fromLanguage = false) {\n        const tracks = captions.getTracks.call(this);\n        const sortIsDefault = track => Number((this.captions.meta.get(track) || {}).default);\n        const sorted = Array.from(tracks).sort((a, b) => sortIsDefault(b) - sortIsDefault(a));\n        return (!fromLanguage && tracks[this.currentTrack]) || sorted.find(track => track.language === this.captions.language) || sorted[0];\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (is.track(currentTrack)) {\n            if (!is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Update captions using current track's active cues\n    // Also optional array argument in case there isn't any track (ex: vimeo)\n    updateCues(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (!is.element(this.elements.captions)) {\n            this.debug.warn('No captions element to render to');\n            return;\n        }\n\n        // Only accept array or empty input\n        if (!is.nullOrUndefined(input) && !Array.isArray(input)) {\n            this.debug.warn('updateCues: Invalid input', input);\n            return;\n        }\n\n        let cues = input;\n\n        // Get cues from track\n        if (!cues) {\n            const track = captions.getCurrentTrack.call(this);\n            cues = Array.from((track || {}).activeCues || [])\n                .map(cue => cue.getCueAsHTML())\n                .map(getHTML);\n        }\n\n        // Set new caption text\n        const content = cues.map(cueText => cueText.trim()).join('\\n');\n        const changed = content !== this.elements.captions.innerHTML;\n\n        if (changed) {\n            // Empty the container and create a new child element\n            emptyElement(this.elements.captions);\n            const caption = createElement('span', getAttributesFromSelector(this.config.selectors.caption));\n            caption.innerHTML = content;\n            this.elements.captions.appendChild(caption);\n\n            // Trigger event\n            trigger.call(this, this.media, 'cuechange');\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.3.12/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: 'auto',\n        // Listen to new tracks added after Plyr is initialized.\n        // This is needed for streaming captions, but may result in unselectable options\n        update: false,\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n        qualityBadge: {\n            2160: '4K',\n            1440: 'HD',\n            1080: 'HD',\n            720: 'HD',\n            576: 'SD',\n            480: 'SD',\n        },\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress__buffer',\n            loop: '.plyr__progress__loop', // Used later\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        caption: '.plyr__caption',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        posterEnabled: 'plyr__poster-enabled',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\n/**\n * Get provider by URL\n * @param {string} url\n */\nexport function getProviderByUrl(url) {\n    // YouTube\n    if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n        return providers.youtube;\n    }\n\n    // Vimeo\n    if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n        return providers.vimeo;\n    }\n\n    return null;\n}\n\nexport default { providers, types };\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport browser from './utils/browser';\nimport { hasClass, toggleClass, toggleState, trapFocus } from './utils/elements';\nimport { on, trigger } from './utils/events';\nimport is from './utils/is';\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (is.element(button)) {\n        toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    trigger.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        on(this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (is.function(document[`${pre}ExitFullscreen`]) || is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Load image avoiding xhr/fetch CORS issues\n// Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded\n// By default it checks if it is at least 1px, but you can add a second argument to change this\n// ==========================================================================\n\nexport default function loadImage(src, minWidth = 1) {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        const handler = () => {\n            delete image.onload;\n            delete image.onerror;\n            (image.naturalWidth >= minWidth ? resolve : reject)(image);\n        };\n\n        Object.assign(image, { onload: handler, onerror: handler, src });\n    });\n}\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport browser from './utils/browser';\nimport { getElement, toggleClass, toggleState } from './utils/elements';\nimport { trigger } from './utils/events';\nimport is from './utils/is';\nimport loadImage from './utils/loadImage';\n\nconst ui = {\n    addStyleHook() {\n        toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup captions for HTML5\n        if (this.isHTML5) {\n            captions.setup.call(this);\n        }\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        controls.updateVolume.call(this);\n\n        // Reset time display\n        controls.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            trigger.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Assure the poster image is set, if the property was added before the element was created\n        if (this.poster && this.elements.poster && !this.elements.poster.style.backgroundImage) {\n            ui.setPoster.call(this, this.poster);\n        }\n\n        // Manually set the duration if user has overridden it.\n        // The event listeners for it doesn't get called if preload is disabled (#701)\n        if (this.config.duration) {\n            controls.durationUpdate.call(this);\n        }\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (is.string(this.config.title) && !is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = getElement.call(this, 'iframe');\n\n            if (!is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Toggle poster\n    togglePoster(enable) {\n        toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n\n    // Set the poster image (async)\n    setPoster(poster) {\n        // Set property regardless of validity\n        this.media.setAttribute('poster', poster);\n\n        // Bail if element is missing\n        if (!is.element(this.elements.poster)) {\n            return Promise.reject();\n        }\n\n        // Load the image, and set poster if successful\n        const loadPromise = loadImage(poster).then(() => {\n            this.elements.poster.style.backgroundImage = `url('${poster}')`;\n            Object.assign(this.elements.poster.style, {\n                backgroundImage: `url('${poster}')`,\n                // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n                backgroundSize: '',\n            });\n            ui.togglePoster.call(this, true);\n            return poster;\n        });\n\n        // Hide the element if the poster can't be loaded (otherwise it will just be a black element covering the video)\n        loadPromise.catch(() => ui.togglePoster.call(this, false));\n\n        // Return the promise so the caller can use it as well\n        return loadPromise;\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set ARIA state\n        toggleState(this.elements.buttons.play, this.playing);\n\n        // Only update controls on non timeupdate events\n        if (is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        ui.toggleControls.call(this);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Update progress bar loading class state\n            toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Update controls visibility\n            ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Toggle controls based on state and `force` argument\n    toggleControls(force) {\n        const { controls } = this.elements;\n\n        if (controls && this.config.hideControls) {\n            // Show controls if force, loading, paused, or button interaction, otherwise hide\n            this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover));\n        }\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport browser from './utils/browser';\nimport { getElement, getElements, getFocusElement, matches, toggleClass, toggleHidden } from './utils/elements';\nimport { off, on, toggleListener, trigger } from './utils/events';\nimport is from './utils/is';\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = getFocusElement();\n            if (is.element(focused) && (\n                focused !== this.player.elements.inputs.seek &&\n                matches(focused, this.player.config.selectors.editable))\n            ) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n        // Clean up\n        off(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        toggleListener(document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        on(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        on(this.player.elements.container, 'focusout', event => {\n            toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                toggleClass(getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls on mouse events and entering fullscreen\n        on(this.player.elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', event => {\n            const { controls } = this.player.elements;\n\n            // Remove button states for fullscreen\n            if (event.type === 'enterfullscreen') {\n                controls.pressed = false;\n                controls.hover = false;\n            }\n\n            // Show, then hide after a timeout unless another control event occurs\n            const show = [\n                'touchstart',\n                'touchmove',\n                'mousemove',\n            ].includes(event.type);\n\n            let delay = 0;\n\n            if (show) {\n                ui.toggleControls.call(this.player, true);\n                // Use longer timeout for touch devices\n                delay = this.player.touch ? 3000 : 2000;\n            }\n\n            // Clear timer\n            clearTimeout(this.player.timers.controls);\n            // Timer to prevent flicker when seeking\n            this.player.timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n        });\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        on(this.player.media, 'timeupdate seeking seeked', event => controls.timeUpdate.call(this.player, event));\n\n        // Display duration\n        on(this.player.media, 'durationchange loadeddata loadedmetadata', event => controls.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        on(this.player.media, 'loadeddata canplay', () => {\n            toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        on(this.player.media, 'progress playing seeking seeked', event => controls.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        on(this.player.media, 'volumechange', event => controls.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        on(this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        on(this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            on(\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        on(this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        on(this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let {detail = {}} = event;\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            trigger.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const bind = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = is.function(customHandler);\n\n            on(element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        bind(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        bind(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        bind(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        bind(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        bind(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        bind(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        bind(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        bind(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        bind(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        bind(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        bind(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.currentTrack = Number(event.target.value);\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Set range input alternative \"value\", which matches the tooltip time (#954)\n        bind(this.player.elements.inputs.seek, 'mousedown mousemove', event => {\n            const clientRect = this.player.elements.progress.getBoundingClientRect();\n            const percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n            event.currentTarget.setAttribute('seek-value', percent);\n        });\n\n        // Pause while seeking\n        bind(this.player.elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', event => {\n            const seek = event.currentTarget;\n\n            const code = event.keyCode ? event.keyCode : event.which;\n            const eventType = event.type;\n\n            if ((eventType === 'keydown' || eventType === 'keyup') && (code !== 39 && code !== 37)) {\n                return;\n            }\n            // Was playing before?\n            const play = seek.hasAttribute('play-on-seeked');\n\n            // Done seeking\n            const done = [\n                'mouseup',\n                'touchend',\n                'keyup',\n            ].includes(event.type);\n\n            // If we're done seeking and it was playing, resume playback\n            if (play && done) {\n                seek.removeAttribute('play-on-seeked');\n                this.player.play();\n            } else if (!done && this.player.playing) {\n                seek.setAttribute('play-on-seeked', '');\n                this.player.pause();\n            }\n        });\n\n        // Seek\n        bind(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                const seek = event.currentTarget;\n\n                // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n                let seekTo = seek.getAttribute('seek-value');\n\n                if (is.empty(seekTo)) {\n                    seekTo = seek.value;\n                }\n\n                seek.removeAttribute('seek-value');\n\n                this.player.currentTime = seekTo / seek.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !is.element(this.player.elements.display.duration)) {\n            bind(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n\n                controls.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        bind(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            bind(getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        bind(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n        bind(this.player.elements.controls, 'mouseenter mouseleave', event => {\n            this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n        });\n\n        // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n        bind(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n            this.player.elements.controls.pressed = [\n                'mousedown',\n                'touchstart',\n            ].includes(event.type);\n        });\n\n        // Focus in/out on controls\n        bind(this.player.elements.controls, 'focusin focusout', event => {\n            const { config, elements, timers } = this.player;\n\n            // Skip transition to prevent focus from scrolling the parent element\n            toggleClass(elements.controls, config.classNames.noTransition, event.type === 'focusin');\n\n            // Toggle\n            ui.toggleControls.call(this.player, event.type === 'focusin');\n\n            // If focusin, hide again after delay\n            if (event.type === 'focusin') {\n                // Restore transition\n                setTimeout(() => {\n                    toggleClass(elements.controls, config.classNames.noTransition, false);\n                }, 0);\n\n                // Delay a little more for keyboard users\n                const delay = this.touch ? 3000 : 4000;\n\n                // Clear timer\n                clearTimeout(timers.controls);\n                // Hide\n                timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n            }\n        });\n\n        // Mouse wheel for volume\n        bind(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Load an external script\n// ==========================================================================\n\nimport loadjs from 'loadjs';\n\nexport default function loadScript(url) {\n    return new Promise((resolve, reject) => {\n        loadjs(url, {\n            success: resolve,\n            error: reject,\n        });\n    });\n}\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport { createElement, replaceElement, toggleClass } from './../utils/elements';\nimport { trigger } from './../utils/events';\nimport fetch from './../utils/fetch';\nimport is from './../utils/is';\nimport loadScript from './../utils/loadScript';\nimport { format, stripHTML } from './../utils/strings';\nimport { buildUrlParams } from './../utils/urls';\n\n// Parse Vimeo ID from URL\nfunction parseId(url) {\n    if (is.empty(url)) {\n        return null;\n    }\n\n    if (is.number(Number(url))) {\n        return url;\n    }\n\n    const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n}\n\n// Get aspect ratio for dimensions\nfunction getAspectRatio(width, height) {\n    const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n    const ratio = getRatio(width, height);\n    return `${width / ratio}:${height / ratio}`;\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        trigger.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!is.object(window.Vimeo)) {\n            loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = parseId(source);\n\n        // Build an iframe\n        const iframe = createElement('iframe');\n        const src = format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = replaceElement(wrapper, player.media);\n\n        // Get poster image\n        fetch(format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set and show poster\n            ui.setPoster.call(player, url.href);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            assurePlaybackState.call(player, true);\n            return player.embed.play();\n        };\n\n        player.media.pause = () => {\n            assurePlaybackState.call(player, false);\n            return player.embed.pause();\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Vimeo will automatically play on seek if the video hasn't been played before\n\n                // Get current paused state and volume etc\n                const { embed, media, paused, volume } = player;\n                const restorePause = paused && !embed.hasPlayed;\n\n                // Set seeking state and trigger event\n                media.seeking = true;\n                trigger.call(player, media, 'seeking');\n\n                // If paused, mute until seek is complete\n                Promise.resolve(restorePause && embed.setVolume(0))\n                    // Seek\n                    .then(() => embed.setCurrentTime(time))\n                    // Restore paused\n                    .then(() => restorePause && embed.pause())\n                    // Restore volume\n                    .then(() => restorePause && embed.setVolume(volume))\n                    .catch(() => {\n                        // Do nothing\n                    });\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        trigger.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    trigger.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    trigger.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            trigger.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            trigger.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', ({ cues = [] }) => {\n            const strippedCues = cues.map(cue => stripHTML(cue.text));\n            captions.updateCues.call(player, strippedCues);\n        });\n\n        player.embed.on('loaded', () => {\n            // Assure state and events are updated on autoplay\n            player.embed.getPaused().then(paused => {\n                assurePlaybackState.call(player, !paused);\n                if (!paused) {\n                    trigger.call(player, player.media, 'playing');\n                }\n            });\n\n            if (is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            assurePlaybackState.call(player, true);\n            trigger.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            assurePlaybackState.call(player, false);\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            trigger.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            trigger.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                trigger.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    trigger.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            trigger.call(player, player.media, 'seeked');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            trigger.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            trigger.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport { dedupe } from './../utils/arrays';\nimport { createElement, replaceElement, toggleClass } from './../utils/elements';\nimport { trigger } from './../utils/events';\nimport fetch from './../utils/fetch';\nimport is from './../utils/is';\nimport loadImage from './../utils/loadImage';\nimport loadScript from './../utils/loadScript';\nimport { format, generateId } from './../utils/strings';\n\n// Parse YouTube ID from URL\nfunction parseId(url) {\n    if (is.empty(url)) {\n        return null;\n    }\n\n    const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n}\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    switch (input) {\n        case 'hd2160':\n            return 2160;\n\n        case 2160:\n            return 'hd2160';\n\n        case 'hd1440':\n            return 1440;\n\n        case 1440:\n            return 'hd1440';\n\n        case 'hd1080':\n            return 1080;\n\n        case 1080:\n            return 'hd1080';\n\n        case 'hd720':\n            return 720;\n\n        case 720:\n            return 'hd720';\n\n        case 'large':\n            return 480;\n\n        case 480:\n            return 'large';\n\n        case 'medium':\n            return 360;\n\n        case 360:\n            return 'medium';\n\n        case 'small':\n            return 240;\n\n        case 240:\n            return 'small';\n\n        default:\n            return 'default';\n    }\n}\n\nfunction mapQualityUnits(levels) {\n    if (is.empty(levels)) {\n        return levels;\n    }\n\n    return dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        trigger.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (is.object(window.YT) && is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (is.string(key) && !is.empty(key)) {\n            const url = format(this.config.urls.youtube.api, videoId, key);\n\n            fetch(url)\n                .then(result => {\n                    if (is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = parseId(source);\n        const id = generateId(player.provider);\n        const container = createElement('div', { id });\n        player.media = replaceElement(container, player.media);\n\n        // Set poster image\n        const posterSrc = format => `https://img.youtube.com/vi/${videoId}/${format}default.jpg`;\n\n        // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n        loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n            .catch(() => loadImage(posterSrc('sd'), 121)) // 480p padded 4:3\n            .catch(() => loadImage(posterSrc('hq'))) // 360p padded 4:3. Always exists\n            .then(image => ui.setPoster.call(player, image.src))\n            .then(posterSrc => {\n                // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n                if (!posterSrc.includes('maxres')) {\n                    player.elements.poster.style.backgroundSize = 'cover';\n                }\n            });\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    trigger.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    trigger.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    trigger.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        assurePlaybackState.call(player, true);\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        assurePlaybackState.call(player, false);\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // If paused, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                            if (player.paused) {\n                                player.embed.mute();\n                            }\n\n                            // Set seeking state and trigger event\n                            player.media.seeking = true;\n                            trigger.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            const quality = input;\n\n                            // Set via API\n                            instance.setPlaybackQuality(mapQualityUnit(quality));\n\n                            // Trigger request event\n                            trigger.call(player, player.media, 'qualityrequested', false, {\n                                quality,\n                            });\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            trigger.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            trigger.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    trigger.call(player, player.media, 'timeupdate');\n                    trigger.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            trigger.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            trigger.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    const seeked = player.media.seeking && [\n                        1,\n                        2,\n                    ].includes(event.data);\n\n                    if (seeked) {\n                        // Unset seeking and fire seeked event\n                        player.media.seeking = false;\n                        trigger.call(player, player.media, 'seeked');\n                    }\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            trigger.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            trigger.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            assurePlaybackState.call(player, false);\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                trigger.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (player.media.paused && !player.embed.hasPlayed) {\n                                player.media.pause();\n                            } else {\n                                assurePlaybackState.call(player, true);\n\n                                trigger.call(player, player.media, 'playing');\n\n                                // Poll to get playback progress\n                                player.timers.playing = setInterval(() => {\n                                    trigger.call(player, player.media, 'timeupdate');\n                                }, 50);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/sampotts/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (player.media.duration !== instance.getDuration()) {\n                                    player.media.duration = instance.getDuration();\n                                    trigger.call(player, player.media, 'durationchange');\n                                }\n\n                                // Get quality\n                                controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n                            }\n\n                            break;\n\n                        case 2:\n                            // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (!player.muted) {\n                                player.embed.unMute();\n                            }\n                            assurePlaybackState.call(player, false);\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    trigger.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport { createElement, toggleClass, wrap } from './utils/elements';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport { createElement } from './../utils/elements';\nimport { trigger } from './../utils/events';\nimport is from './../utils/is';\nimport loadScript from './../utils/loadScript';\nimport { formatTime } from './../utils/time';\nimport { buildUrlParams } from './../utils/urls';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!is.object(window.google) || !is.object(window.google.ima)) {\n                loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            trigger.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './config/types';\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport ui from './ui';\nimport { createElement, insertElement, removeElement } from './utils/elements';\nimport is from './utils/is';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (is.string(attributes)) {\n            insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (is.array(attributes)) {\n            attributes.forEach(attribute => {\n                insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.12\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport defaults from './config/defaults';\nimport { getProviderByUrl, providers, types } from './config/types';\nimport Console from './console';\nimport controls from './controls';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport ui from './ui';\nimport { closest } from './utils/arrays';\nimport { createElement, hasClass, removeElement, replaceElement, toggleClass, toggleState, wrap } from './utils/elements';\nimport { off, on, trigger } from './utils/events';\nimport is from './utils/is';\nimport loadSprite from './utils/loadScript';\nimport { cloneDeep, extend } from './utils/objects';\nimport { parseUrl } from './utils/urls';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || is.nodeList(this.media) || is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = extend(\n            {},\n            defaults,\n            Plyr.defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: -1,\n            meta: new WeakMap(),\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (is.nullOrUndefined(this.media) || !is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (is.element(iframe)) {\n                    // Detect provider\n                    url = parseUrl(iframe.getAttribute('src'));\n                    this.provider = getProviderByUrl(url.toString());\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    if (!url.searchParams) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(url.searchParams.get('autoplay'))) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(url.searchParams.get('loop'))) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(url.searchParams.get('playsinline'));\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!is.element(this.elements.container)) {\n            this.elements.container = createElement('div');\n            wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!is.function(this.media.play)) {\n            return null;\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        // Bail if media duration isn't available yet\n        if (!this.duration) {\n            return;\n        }\n\n        // Validate input\n        const inputIsValid = is.number(input) && input > 0;\n\n        // Set\n        this.media.currentTime = inputIsValid ? Math.min(input, this.duration) : 0;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // Media duration can be NaN before the media has loaded\n        const duration = (this.media || {}).duration || 0;\n\n        // If config duration is funky, use regular duration\n        return fauxDuration || duration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (is.number(input)) {\n            speed = input;\n        }\n\n        if (!is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (!is.empty(input)) {\n            quality = Number(input);\n        }\n\n        if (!is.number(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!is.number(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!is.number(quality)) {\n            quality = this.config.quality.default;\n        }\n\n        if (!this.options.quality.length) {\n            return;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            const value = closest(this.options.quality, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${value} instead`);\n            quality = value;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        ui.setPoster.call(this, input);\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const active = is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Toggle state\n        toggleState(this.elements.buttons.captions, active);\n\n        // Add class hook\n        toggleClass(this.elements.container, this.config.classNames.captions.active, active);\n\n        // Update state and trigger event\n        if (active !== this.captions.active) {\n            this.captions.active = active;\n            trigger.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n        }\n    }\n\n    /**\n     * Set the caption track by index\n     * @param {number} - Caption index\n     */\n    set currentTrack(input) {\n        captions.set.call(this, input);\n    }\n\n    /**\n     * Get the current caption track index (-1 if disabled)\n     */\n    get currentTrack() {\n        const { active, currentTrack } = this.captions;\n        return active ? currentTrack : -1;\n    }\n\n    /**\n     * Set the wanted language for captions\n     * Since tracks can be added later it won't update the actual caption track until there is a matching track\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        captions.setLanguage.call(this, input);\n    }\n\n    /**\n     * Get the current track's language\n     */\n    get language() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} [toggle] - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n            // Get state before change\n            const isHidden = hasClass(this.elements.container, this.config.classNames.hideControls);\n\n            // Negate the argument if not undefined since adding the class to hides the controls\n            const force = typeof toggle === 'undefined' ? undefined : !toggle;\n\n            // Apply and get updated state\n            const hiding = toggleClass(this.elements.container, this.config.classNames.hideControls, force);\n\n            // Close menu\n            if (hiding && this.config.controls.includes('settings') && !is.empty(this.config.settings)) {\n                controls.toggleMenu.call(this, false);\n            }\n            // Trigger event on change\n            if (hiding !== isHidden) {\n                const eventName = hiding ? 'controlshidden' : 'controlsshown';\n                trigger.call(this, this.media, eventName);\n            }\n            return !hiding;\n        }\n        return false;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    removeElement(this.elements.buttons.play);\n                    removeElement(this.elements.captions);\n                    removeElement(this.elements.controls);\n                    removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                trigger.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (is.array(selector)) {\n            targets = selector.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nPlyr.defaults = cloneDeep(defaults);\n\nexport default Plyr;\n"]}